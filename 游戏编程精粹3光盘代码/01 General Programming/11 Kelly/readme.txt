Game Programming Gems 3
Using Lex & Yacc for Parsing Custom Data Files
Paul Kelly
paul_kelly2000@yahoo.com


Before getting started, get flex and bison.  You will need these programs
to compile the weapon and the packer programs.  Windows users can get them at 
www.cygwin.com.  Other OS users can get the programs at www.gnu.org.

Bison is at

ftp://ftp.gnu.org/gnu/bison/

Flex is at

ftp://ftp.gnu.org/gnu/non-gnu/flex/

After getting flex and bison, be sure the executables are in your path.


This zip has three directories:
weapon
unpacker
packer

The weapon directory contains an example of a tool that uses lex and yacc to
parse data for a game subsystem. In this case, a weapon data file.  The text
data is converted into binary data that can be loaded into the game engine.

The unpacker directory contains a tool that takes as input a .md3 model
file.  From the binary input file, it creates a text file that shows
the different sections of the binary model file (triangle indexes, 
vertice coordinates, etc).

The packer directory contains a tool that takes as input a text 
description of a .md3 model file (a file generated by unpacker).
From the text file, a binary .md3 file will be generated that can be
loaded as game data.

Unpacker and packer show how lex and yacc can be used to visually
inspect exported data.  Visually inspecting data can reveal obvious
export errors that normally wouldn't be recognized in a straight to 
binary data export.

