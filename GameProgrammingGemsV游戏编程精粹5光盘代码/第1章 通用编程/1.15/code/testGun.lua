#!/usr/bin/lua
--[[
--  $Id: testGun.lua 503 2004-08-27 03:18:51Z sjacobs $
--  $HeadURL: svn://localhost/trunk/gpg5/code/testGun.lua $
--
--  A test harness that exercises the functionality of the gun state machine.
--
--]]

require "StateMachineFactory"

--[[
-- Some methods to provide functions and data normally supplied by a game
-- engine.
--]]

--[[
--  Return a random bool. pctTrue argument, if supplied is a number between
--  0 and 1 which specifies how likely this method is to return true.
--]]
randomBool = function( pctTrue )
    assert( not pctTrue or (pctTrue >= 0 and pctTrue <= 1), "Invalid percentage of returning true" )

    if math.random() < (pctTrue or 0.5) then
        return true
    else
        return false
    end
end

--[[
-- Use the state machine factory to create a Gun from the lua file
-- generated by the uss to state machine conversion script.
--]]
gun = StateMachineFactory.create("Gun.lua")

--Make sure that the StateMachineFactory returned an object like we expect.
assert( type(gun) == "table", "StateMachineFactory returned an unexpected type")
assert( type(gun.begin) == "function", "State machines should have a begin method")
assert( type(gun.isDone) == "function", "State machines should have an isDone method")
assert( type(gun.update) == "function", "State machines should have an update method")
assert( type(gun.machineData) == "table", "StateMachineFactory returned an incomplete state machine.")

--[[
--  All state machines returned by the StateMachineFactory are started with
--  this call...
--]]
gun:begin()

gun.numRounds = 5
gun.roundsInInventory = 100

print(gun, type(gun))
print(gun.machine,type(gun.machine))
print(gun.roundsInInventory,type(gun.roundsInInventory))
print(gun.machine.roundsInInventory,type(gun.machine.roundsInInventory))
print(gun.machine.numRounds,type(gun.machine.numRounds))

--[[
--  This particular state machine never ends...
--]]
while not gun:isDone() do

    --[[
    -- Set some variables that the state machine will be looking for.
    -- Normally, this would be set by your game engine and made available
    -- to the state machines.
    -- ]]
    frameTime = 1 / 60 -- 60 Frames per second! Smooth as glass! ;)
    triggerDown = randomBool()
    reloadDown = randomBool()

    --[[
    -- Run the state machine.
    --]]
    gun:update()

    print( tostring(gun.currentState.name) .. " Num rounds: " .. tostring(numRounds) )

end
