/******************************************************************************

******************************************************************************/

// define inputs from application
struct appin
{
    float3 Pos			: POSITION;
    float2 uv			: TEXCOORD0;
    float3 Col			: COLOR0;
};

// define outputs from vertex shader
struct vertout
{
    float4 Pos			: POSITION;
    float4 Col			: COLOR0;
    float4 uv			: TEXCOORD0;
};

vertout main(appin IN,
             uniform float4x4 ModelView,
             uniform float4x4 Proj,
             uniform float4 constans,
             uniform float4 blockSize,
             uniform float4 treeColor,
             uniform float4 impostorPos
             )
{
	// constans.x = (blockSize * blockScreen * 2);
	// constans.y = -(blockSize * blockScreen * 2);
	// constans.z = (1/blocksize);
	// constans.w = ((1/blocksize)/2 + 0.5);

    vertout OUT;

	float4 pos	= IN.Pos.xyzz;
	pos.w		= 1;
	
	pos			= mul( pos, ModelView);		// calculate block center point from view
	pos.z		-= blockSize.x;				// move the plane with half block size to view
	float4 vpos	= pos;
	pos			= mul( pos, Proj);			// projection
	pos			/= pos.w;


//	float4 scl	= mul( float4( 0, 0, 0, 1), ModelView);	// calculate center point from view
//	scl.z		-= blockSize.x;				// move the plane with half block size to view
//	scl.xy		= vpos.xy;					
//	scl			= mul( scl, Proj);
//	scl			/= scl.w;

//	float scale	= pos.x / scl.x;			// calculate block size difference
	float scale = 1;
	
	float2 uvp	= (IN.uv - 0.5) * constans.xy * scale;
	pos			= pos + float4( uvp.x, uvp.y, 0, 0);

	float2 uv	= IN.uv * constans.z + constans.w;

    OUT.Pos		= pos;
	OUT.Col.rgb	= IN.Col * treeColor.xyz;
	OUT.Col.w	= 0;
	OUT.uv		= float4( impostorPos.x + uv.x * impostorPos.z, 
						  impostorPos.y + uv.y * impostorPos.w, pos.z, 1);
	return OUT;
}
