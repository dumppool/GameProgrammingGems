#include "main.h"

struct error_entry
{
   int32     code;
   char     *str;   // NULL indicates end of table
};

#define ERROR_ENTRY(x) {x, #x}
static error_entry entries[] =
{
   ERROR_ENTRY(WSAEINTR),
   ERROR_ENTRY(WSAEBADF),
   ERROR_ENTRY(WSAEACCES),
   ERROR_ENTRY(WSAEFAULT),
   ERROR_ENTRY(WSAEINVAL),
   ERROR_ENTRY(WSAEMFILE),
   ERROR_ENTRY(WSAEWOULDBLOCK),
   ERROR_ENTRY(WSAEINPROGRESS),
   ERROR_ENTRY(WSAEALREADY),
   ERROR_ENTRY(WSAENOTSOCK),
   ERROR_ENTRY(WSAEDESTADDRREQ),
   ERROR_ENTRY(WSAEMSGSIZE),
   ERROR_ENTRY(WSAEPROTOTYPE),
   ERROR_ENTRY(WSAENOPROTOOPT),
   ERROR_ENTRY(WSAEPROTONOSUPPORT),
   ERROR_ENTRY(WSAESOCKTNOSUPPORT),
   ERROR_ENTRY(WSAEOPNOTSUPP),
   ERROR_ENTRY(WSAEPFNOSUPPORT),
   ERROR_ENTRY(WSAEAFNOSUPPORT),
   ERROR_ENTRY(WSAEADDRINUSE),
   ERROR_ENTRY(WSAEADDRNOTAVAIL),
   ERROR_ENTRY(WSAENETDOWN),
   ERROR_ENTRY(WSAENETUNREACH),
   ERROR_ENTRY(WSAENETRESET),
   ERROR_ENTRY(WSAECONNABORTED),
   ERROR_ENTRY(WSAECONNRESET),
   ERROR_ENTRY(WSAENOBUFS),
   ERROR_ENTRY(WSAEISCONN),
   ERROR_ENTRY(WSAENOTCONN),
   ERROR_ENTRY(WSAESHUTDOWN),
   ERROR_ENTRY(WSAETOOMANYREFS),
   ERROR_ENTRY(WSAETIMEDOUT),
   ERROR_ENTRY(WSAECONNREFUSED),
   ERROR_ENTRY(WSAELOOP),
   ERROR_ENTRY(WSAENAMETOOLONG),
   ERROR_ENTRY(WSAEHOSTDOWN),
   ERROR_ENTRY(WSAEHOSTUNREACH),
   ERROR_ENTRY(WSAENOTEMPTY),
   ERROR_ENTRY(WSAEPROCLIM),
   ERROR_ENTRY(WSAEUSERS),
   ERROR_ENTRY(WSAEDQUOT),
   ERROR_ENTRY(WSAESTALE),
   ERROR_ENTRY(WSAEREMOTE),
   ERROR_ENTRY(WSAEDISCON),
   ERROR_ENTRY(WSASYSNOTREADY),
   ERROR_ENTRY(WSAVERNOTSUPPORTED),
   ERROR_ENTRY(WSANOTINITIALISED),
   ERROR_ENTRY(WSAHOST_NOT_FOUND),
   ERROR_ENTRY(WSATRY_AGAIN),
   ERROR_ENTRY(WSANO_RECOVERY),
   ERROR_ENTRY(WSANO_DATA),   
   ERROR_ENTRY(WSANO_ADDRESS),
   {0, NULL},
};
#undef ERROR_ENTRY


/***************************************************************/
char *GetLastWinsockErrorString()
{
   int32 code = WSAGetLastError();
   
   error_entry *entry = entries;
   while (entry->str != NULL)
   {
      if (entry->code == code)
         return entry->str;
      entry++;
   }

   static char str[50];
   sprintf(str, "UNKNOWN (%d)", code);
   return str;
}

/***************************************************************/
int GetLastWinsockError()
{
   return WSAGetLastError();
}
