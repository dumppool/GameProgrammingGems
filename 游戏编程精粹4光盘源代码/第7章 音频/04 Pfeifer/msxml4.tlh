// Created by Microsoft (R) C/C++ Compiler Version 12.00.8447.0 (a12e75bf).
//
// msxml4.tlh
//
// C++ source equivalent of Win32 type library msxml4.dll
// compiler-generated file created 05/19/03 at 22:35:17 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace MSXML2 {

//
// Forward references and typedefs
//

struct __declspec(uuid("2933bf8f-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMImplementation;
struct __declspec(uuid("2933bf80-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMNode;
typedef enum tagDOMNodeType DOMNodeType;
struct __declspec(uuid("2933bf82-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMNodeList;
struct __declspec(uuid("2933bf83-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMNamedNodeMap;
struct __declspec(uuid("2933bf81-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMDocument;
struct __declspec(uuid("2933bf8b-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMDocumentType;
struct __declspec(uuid("2933bf86-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMElement;
struct __declspec(uuid("2933bf85-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMAttribute;
struct __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782"))
/* dual interface */ IXMLDOMDocumentFragment;
struct __declspec(uuid("2933bf87-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMText;
struct __declspec(uuid("2933bf84-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMCharacterData;
struct __declspec(uuid("2933bf88-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMComment;
struct __declspec(uuid("2933bf8a-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMCDATASection;
struct __declspec(uuid("2933bf89-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMProcessingInstruction;
struct __declspec(uuid("2933bf8e-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMEntityReference;
struct __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782"))
/* dual interface */ IXMLDOMParseError;
struct __declspec(uuid("2933bf95-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMDocument2;
struct __declspec(uuid("373984c8-b845-449b-91e7-45ac83036ade"))
/* dual interface */ IXMLDOMSchemaCollection;
struct __declspec(uuid("2933bf8c-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMNotation;
struct __declspec(uuid("2933bf8d-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXMLDOMEntity;
struct __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782"))
/* dual interface */ IXTLRuntime;
struct __declspec(uuid("2933bf93-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXSLTemplate;
struct __declspec(uuid("2933bf92-7b36-11d2-b20e-00c04f983e60"))
/* dual interface */ IXSLProcessor;
struct __declspec(uuid("a4f96ed0-f829-476e-81c0-cdc7bd2a0802"))
/* interface */ ISAXXMLReader;
struct __declspec(uuid("99bca7bd-e8c4-4d5f-a0cf-6d907901ff07"))
/* interface */ ISAXEntityResolver;
struct __declspec(uuid("1545cdfa-9e4e-4497-a8a4-2bf7d0112c44"))
/* interface */ ISAXContentHandler;
struct __declspec(uuid("9b7e472a-0de4-4640-bff3-84d38a051c31"))
/* interface */ ISAXLocator;
struct __declspec(uuid("f078abe1-45d2-4832-91ea-4466ce2f25c9"))
/* interface */ ISAXAttributes;
struct __declspec(uuid("e15c1baf-afb3-4d60-8c36-19a8c45defed"))
/* interface */ ISAXDTDHandler;
struct __declspec(uuid("a60511c4-ccf5-479e-98a3-dc8dc545b7d0"))
/* interface */ ISAXErrorHandler;
struct __declspec(uuid("70409222-ca09-4475-acb8-40312fe8d145"))
/* interface */ ISAXXMLFilter;
struct __declspec(uuid("7f85d5f5-47a8-4497-bda5-84ba04819ea6"))
/* interface */ ISAXLexicalHandler;
struct __declspec(uuid("862629ac-771a-47b2-8337-4e6843c1be90"))
/* interface */ ISAXDeclHandler;
struct __declspec(uuid("8c033caa-6cd6-4f73-b728-4531af74945f"))
/* dual interface */ IVBSAXXMLReader;
struct __declspec(uuid("0c05d096-f45b-4aca-ad1a-aa0bc25518dc"))
/* dual interface */ IVBSAXEntityResolver;
struct __declspec(uuid("2ed7290a-4dd5-4b46-bb26-4e4155e77faa"))
/* dual interface */ IVBSAXContentHandler;
struct __declspec(uuid("796e7ac5-5aa2-4eff-acad-3faaf01a3288"))
/* dual interface */ IVBSAXLocator;
struct __declspec(uuid("10dc0586-132b-4cac-8bb3-db00ac8b7ee0"))
/* dual interface */ IVBSAXAttributes;
struct __declspec(uuid("24fb3297-302d-4620-ba39-3a732d850558"))
/* dual interface */ IVBSAXDTDHandler;
struct __declspec(uuid("d963d3fe-173c-4862-9095-b92f66995f52"))
/* dual interface */ IVBSAXErrorHandler;
struct __declspec(uuid("1299eb1b-5b88-433e-82de-82ca75ad4e04"))
/* dual interface */ IVBSAXXMLFilter;
struct __declspec(uuid("032aac35-8c0e-4d9d-979f-e3b702935576"))
/* dual interface */ IVBSAXLexicalHandler;
struct __declspec(uuid("e8917260-7579-4be1-b5dd-7afbfa6f077b"))
/* dual interface */ IVBSAXDeclHandler;
struct __declspec(uuid("4d7ff4ba-1565-4ea8-94e1-6e724a46f98d"))
/* dual interface */ IMXWriter;
struct __declspec(uuid("f10d27cc-3ec0-415c-8ed8-77ab1c5e7262"))
/* dual interface */ IMXAttributes;
struct __declspec(uuid("808f4e35-8d5a-4fbe-8466-33a41279ed30"))
/* dual interface */ IMXReaderControl;
struct __declspec(uuid("fa4bb38c-faf9-4cca-9302-d1dd0fe520db"))
/* dual interface */ IMXSchemaDeclHandler;
struct __declspec(uuid("50ea08b7-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaElement;
struct __declspec(uuid("50ea08b5-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaParticle;
struct __declspec(uuid("50ea08b3-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaItem;
struct __declspec(uuid("50ea08b4-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchema;
struct __declspec(uuid("50ea08b2-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaItemCollection;
struct __declspec(uuid("50ea08b1-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaStringCollection;
typedef enum _SOMITEMTYPE SOMITEMTYPE;
struct __declspec(uuid("50ea08b8-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaType;
typedef enum _SCHEMADERIVATIONMETHOD SCHEMADERIVATIONMETHOD;
typedef enum _SCHEMATYPEVARIETY SCHEMATYPEVARIETY;
typedef enum _SCHEMAWHITESPACE SCHEMAWHITESPACE;
struct __declspec(uuid("50ea08b9-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaComplexType;
struct __declspec(uuid("50ea08bc-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaAny;
typedef enum _SCHEMAPROCESSCONTENTS SCHEMAPROCESSCONTENTS;
typedef enum _SCHEMACONTENTTYPE SCHEMACONTENTTYPE;
struct __declspec(uuid("50ea08bb-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaModelGroup;
struct __declspec(uuid("50ea08b0-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ IXMLDOMSchemaCollection2;
struct __declspec(uuid("50ea08b6-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaAttribute;
typedef enum _SCHEMAUSE SCHEMAUSE;
struct __declspec(uuid("50ea08ba-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaAttributeGroup;
struct __declspec(uuid("50ea08bd-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaIdentityConstraint;
struct __declspec(uuid("50ea08be-dd1b-4664-9a50-c2f40f4bd79a"))
/* dual interface */ ISchemaNotation;
struct __declspec(uuid("65725580-9b5d-11d0-9bfe-00c04fc99c8e"))
/* dual interface */ IXMLElementCollection;
struct __declspec(uuid("f52e2b61-18a1-11d1-b105-00805f49916b"))
/* dual interface */ IXMLDocument;
struct __declspec(uuid("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e"))
/* dual interface */ IXMLElement;
struct __declspec(uuid("2b8de2fe-8d2d-11d1-b2fc-00c04fd915a9"))
/* interface */ IXMLDocument2;
struct __declspec(uuid("2b8de2ff-8d2d-11d1-b2fc-00c04fd915a9"))
/* dual interface */ IXMLElement2;
struct __declspec(uuid("d4d4a0fc-3b73-11d1-b2b4-00c04fb92596"))
/* dual interface */ IXMLAttribute;
struct __declspec(uuid("948c5ad3-c58d-11d0-9c0b-00c04fc99c8e"))
/* interface */ IXMLError;
struct _xml_error;
typedef enum tagXMLEMEM_TYPE XMLELEM_TYPE;
struct __declspec(uuid("aa634fc7-5888-44a7-a257-3a47150d3a0e"))
/* dual interface */ IXMLDOMSelection;
struct __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782"))
/* dispinterface */ XMLDOMDocumentEvents;
struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39"))
/* dual interface */ IDSOControl;
struct __declspec(uuid("ed8c108d-4349-11d2-91a4-00c04f7969e8"))
/* dual interface */ IXMLHTTPRequest;
typedef enum _SERVERXMLHTTP_OPTION SERVERXMLHTTP_OPTION;
typedef enum _SXH_SERVER_CERT_OPTION SXH_SERVER_CERT_OPTION;
struct __declspec(uuid("2e9196bf-13ba-4dd4-91ca-6c571f281495"))
/* dual interface */ IServerXMLHTTPRequest;
typedef enum _SXH_PROXY_SETTING SXH_PROXY_SETTING;
struct __declspec(uuid("2e01311b-c322-4b0a-bd77-b90cfdc8dce7"))
/* dual interface */ IServerXMLHTTPRequest2;
struct __declspec(uuid("c90352f4-643c-4fbc-bb23-e996eb2d51fd"))
/* dual interface */ IMXNamespacePrefixes;
struct __declspec(uuid("c90352f5-643c-4fbc-bb23-e996eb2d51fd"))
/* dual interface */ IVBMXNamespaceManager;
struct __declspec(uuid("c90352f6-643c-4fbc-bb23-e996eb2d51fd"))
/* interface */ IMXNamespaceManager;
struct /* coclass */ DOMDocument;
struct /* coclass */ DOMDocument26;
struct /* coclass */ DOMDocument30;
struct /* coclass */ DOMDocument40;
struct /* coclass */ FreeThreadedDOMDocument;
struct /* coclass */ FreeThreadedDOMDocument26;
struct /* coclass */ FreeThreadedDOMDocument30;
struct /* coclass */ FreeThreadedDOMDocument40;
struct /* coclass */ XMLSchemaCache;
struct /* coclass */ XMLSchemaCache26;
struct /* coclass */ XMLSchemaCache30;
struct /* coclass */ XMLSchemaCache40;
struct /* coclass */ XSLTemplate;
struct /* coclass */ XSLTemplate26;
struct /* coclass */ XSLTemplate30;
struct /* coclass */ XSLTemplate40;
struct /* coclass */ DSOControl;
struct /* coclass */ DSOControl26;
struct /* coclass */ DSOControl30;
struct /* coclass */ DSOControl40;
struct /* coclass */ XMLHTTP;
struct /* coclass */ XMLHTTP26;
struct /* coclass */ XMLHTTP30;
struct /* coclass */ XMLHTTP40;
struct /* coclass */ ServerXMLHTTP;
struct /* coclass */ ServerXMLHTTP30;
struct /* coclass */ ServerXMLHTTP40;
struct /* coclass */ SAXXMLReader;
struct /* coclass */ SAXXMLReader30;
struct /* coclass */ SAXXMLReader40;
struct /* coclass */ MXXMLWriter;
struct /* coclass */ MXXMLWriter30;
struct /* coclass */ MXXMLWriter40;
struct /* coclass */ MXHTMLWriter;
struct /* coclass */ MXHTMLWriter30;
struct /* coclass */ MXHTMLWriter40;
struct /* coclass */ SAXAttributes;
struct /* coclass */ SAXAttributes30;
struct /* coclass */ SAXAttributes40;
struct /* coclass */ MXNamespaceManager;
struct /* coclass */ MXNamespaceManager40;
struct /* coclass */ XMLDocument;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IXMLDOMImplementation, __uuidof(IXMLDOMImplementation));
_COM_SMARTPTR_TYPEDEF(IXMLDOMNode, __uuidof(IXMLDOMNode));
_COM_SMARTPTR_TYPEDEF(IXMLDOMNodeList, __uuidof(IXMLDOMNodeList));
_COM_SMARTPTR_TYPEDEF(IXMLDOMNamedNodeMap, __uuidof(IXMLDOMNamedNodeMap));
_COM_SMARTPTR_TYPEDEF(IXMLDOMDocument, __uuidof(IXMLDOMDocument));
_COM_SMARTPTR_TYPEDEF(IXMLDOMDocumentType, __uuidof(IXMLDOMDocumentType));
_COM_SMARTPTR_TYPEDEF(IXMLDOMElement, __uuidof(IXMLDOMElement));
_COM_SMARTPTR_TYPEDEF(IXMLDOMAttribute, __uuidof(IXMLDOMAttribute));
_COM_SMARTPTR_TYPEDEF(IXMLDOMDocumentFragment, __uuidof(IXMLDOMDocumentFragment));
_COM_SMARTPTR_TYPEDEF(IXMLDOMCharacterData, __uuidof(IXMLDOMCharacterData));
_COM_SMARTPTR_TYPEDEF(IXMLDOMText, __uuidof(IXMLDOMText));
_COM_SMARTPTR_TYPEDEF(IXMLDOMComment, __uuidof(IXMLDOMComment));
_COM_SMARTPTR_TYPEDEF(IXMLDOMCDATASection, __uuidof(IXMLDOMCDATASection));
_COM_SMARTPTR_TYPEDEF(IXMLDOMProcessingInstruction, __uuidof(IXMLDOMProcessingInstruction));
_COM_SMARTPTR_TYPEDEF(IXMLDOMEntityReference, __uuidof(IXMLDOMEntityReference));
_COM_SMARTPTR_TYPEDEF(IXMLDOMParseError, __uuidof(IXMLDOMParseError));
_COM_SMARTPTR_TYPEDEF(IXMLDOMDocument2, __uuidof(IXMLDOMDocument2));
_COM_SMARTPTR_TYPEDEF(IXMLDOMSchemaCollection, __uuidof(IXMLDOMSchemaCollection));
_COM_SMARTPTR_TYPEDEF(IXMLDOMNotation, __uuidof(IXMLDOMNotation));
_COM_SMARTPTR_TYPEDEF(IXMLDOMEntity, __uuidof(IXMLDOMEntity));
_COM_SMARTPTR_TYPEDEF(IXTLRuntime, __uuidof(IXTLRuntime));
_COM_SMARTPTR_TYPEDEF(IXSLTemplate, __uuidof(IXSLTemplate));
_COM_SMARTPTR_TYPEDEF(IXSLProcessor, __uuidof(IXSLProcessor));
_COM_SMARTPTR_TYPEDEF(ISAXXMLReader, __uuidof(ISAXXMLReader));
_COM_SMARTPTR_TYPEDEF(ISAXEntityResolver, __uuidof(ISAXEntityResolver));
_COM_SMARTPTR_TYPEDEF(ISAXContentHandler, __uuidof(ISAXContentHandler));
_COM_SMARTPTR_TYPEDEF(ISAXLocator, __uuidof(ISAXLocator));
_COM_SMARTPTR_TYPEDEF(ISAXAttributes, __uuidof(ISAXAttributes));
_COM_SMARTPTR_TYPEDEF(ISAXDTDHandler, __uuidof(ISAXDTDHandler));
_COM_SMARTPTR_TYPEDEF(ISAXErrorHandler, __uuidof(ISAXErrorHandler));
_COM_SMARTPTR_TYPEDEF(ISAXXMLFilter, __uuidof(ISAXXMLFilter));
_COM_SMARTPTR_TYPEDEF(ISAXLexicalHandler, __uuidof(ISAXLexicalHandler));
_COM_SMARTPTR_TYPEDEF(ISAXDeclHandler, __uuidof(ISAXDeclHandler));
_COM_SMARTPTR_TYPEDEF(IVBSAXXMLReader, __uuidof(IVBSAXXMLReader));
_COM_SMARTPTR_TYPEDEF(IVBSAXEntityResolver, __uuidof(IVBSAXEntityResolver));
_COM_SMARTPTR_TYPEDEF(IVBSAXContentHandler, __uuidof(IVBSAXContentHandler));
_COM_SMARTPTR_TYPEDEF(IVBSAXLocator, __uuidof(IVBSAXLocator));
_COM_SMARTPTR_TYPEDEF(IVBSAXAttributes, __uuidof(IVBSAXAttributes));
_COM_SMARTPTR_TYPEDEF(IVBSAXDTDHandler, __uuidof(IVBSAXDTDHandler));
_COM_SMARTPTR_TYPEDEF(IVBSAXErrorHandler, __uuidof(IVBSAXErrorHandler));
_COM_SMARTPTR_TYPEDEF(IVBSAXXMLFilter, __uuidof(IVBSAXXMLFilter));
_COM_SMARTPTR_TYPEDEF(IVBSAXLexicalHandler, __uuidof(IVBSAXLexicalHandler));
_COM_SMARTPTR_TYPEDEF(IVBSAXDeclHandler, __uuidof(IVBSAXDeclHandler));
_COM_SMARTPTR_TYPEDEF(IMXWriter, __uuidof(IMXWriter));
_COM_SMARTPTR_TYPEDEF(IMXAttributes, __uuidof(IMXAttributes));
_COM_SMARTPTR_TYPEDEF(IMXReaderControl, __uuidof(IMXReaderControl));
_COM_SMARTPTR_TYPEDEF(IMXSchemaDeclHandler, __uuidof(IMXSchemaDeclHandler));
_COM_SMARTPTR_TYPEDEF(ISchemaItem, __uuidof(ISchemaItem));
_COM_SMARTPTR_TYPEDEF(ISchemaParticle, __uuidof(ISchemaParticle));
_COM_SMARTPTR_TYPEDEF(ISchemaElement, __uuidof(ISchemaElement));
_COM_SMARTPTR_TYPEDEF(ISchema, __uuidof(ISchema));
_COM_SMARTPTR_TYPEDEF(ISchemaItemCollection, __uuidof(ISchemaItemCollection));
_COM_SMARTPTR_TYPEDEF(ISchemaStringCollection, __uuidof(ISchemaStringCollection));
_COM_SMARTPTR_TYPEDEF(ISchemaType, __uuidof(ISchemaType));
_COM_SMARTPTR_TYPEDEF(ISchemaComplexType, __uuidof(ISchemaComplexType));
_COM_SMARTPTR_TYPEDEF(ISchemaAny, __uuidof(ISchemaAny));
_COM_SMARTPTR_TYPEDEF(ISchemaModelGroup, __uuidof(ISchemaModelGroup));
_COM_SMARTPTR_TYPEDEF(IXMLDOMSchemaCollection2, __uuidof(IXMLDOMSchemaCollection2));
_COM_SMARTPTR_TYPEDEF(ISchemaAttribute, __uuidof(ISchemaAttribute));
_COM_SMARTPTR_TYPEDEF(ISchemaAttributeGroup, __uuidof(ISchemaAttributeGroup));
_COM_SMARTPTR_TYPEDEF(ISchemaIdentityConstraint, __uuidof(ISchemaIdentityConstraint));
_COM_SMARTPTR_TYPEDEF(ISchemaNotation, __uuidof(ISchemaNotation));
_COM_SMARTPTR_TYPEDEF(IXMLElementCollection, __uuidof(IXMLElementCollection));
_COM_SMARTPTR_TYPEDEF(IXMLDocument, __uuidof(IXMLDocument));
_COM_SMARTPTR_TYPEDEF(IXMLElement, __uuidof(IXMLElement));
_COM_SMARTPTR_TYPEDEF(IXMLDocument2, __uuidof(IXMLDocument2));
_COM_SMARTPTR_TYPEDEF(IXMLElement2, __uuidof(IXMLElement2));
_COM_SMARTPTR_TYPEDEF(IXMLAttribute, __uuidof(IXMLAttribute));
_COM_SMARTPTR_TYPEDEF(IXMLError, __uuidof(IXMLError));
_COM_SMARTPTR_TYPEDEF(IXMLDOMSelection, __uuidof(IXMLDOMSelection));
_COM_SMARTPTR_TYPEDEF(XMLDOMDocumentEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IDSOControl, __uuidof(IDSOControl));
_COM_SMARTPTR_TYPEDEF(IXMLHTTPRequest, __uuidof(IXMLHTTPRequest));
_COM_SMARTPTR_TYPEDEF(IServerXMLHTTPRequest, __uuidof(IServerXMLHTTPRequest));
_COM_SMARTPTR_TYPEDEF(IServerXMLHTTPRequest2, __uuidof(IServerXMLHTTPRequest2));
_COM_SMARTPTR_TYPEDEF(IMXNamespacePrefixes, __uuidof(IMXNamespacePrefixes));
_COM_SMARTPTR_TYPEDEF(IVBMXNamespaceManager, __uuidof(IVBMXNamespaceManager));
_COM_SMARTPTR_TYPEDEF(IMXNamespaceManager, __uuidof(IMXNamespaceManager));

//
// Type library items
//

struct __declspec(uuid("2933bf8f-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMImplementation : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL hasFeature (
        _bstr_t feature,
        _bstr_t version );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_hasFeature (
        BSTR feature,
        BSTR version,
        VARIANT_BOOL * hasFeature ) = 0;
};

struct __declspec(uuid("2933bf80-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetnodeName))
    _bstr_t nodeName;
    __declspec(property(get=GetnodeValue,put=PutnodeValue))
    _variant_t nodeValue;
    __declspec(property(get=GetnodeType))
    DOMNodeType nodeType;
    __declspec(property(get=GetparentNode))
    IXMLDOMNodePtr parentNode;
    __declspec(property(get=GetchildNodes))
    IXMLDOMNodeListPtr childNodes;
    __declspec(property(get=GetfirstChild))
    IXMLDOMNodePtr firstChild;
    __declspec(property(get=GetlastChild))
    IXMLDOMNodePtr lastChild;
    __declspec(property(get=GetpreviousSibling))
    IXMLDOMNodePtr previousSibling;
    __declspec(property(get=GetnextSibling))
    IXMLDOMNodePtr nextSibling;
    __declspec(property(get=Getattributes))
    IXMLDOMNamedNodeMapPtr attributes;
    __declspec(property(get=GetownerDocument))
    IXMLDOMDocumentPtr ownerDocument;
    __declspec(property(get=GetnodeTypeString))
    _bstr_t nodeTypeString;
    __declspec(property(get=Getspecified))
    VARIANT_BOOL specified;
    __declspec(property(get=Getdefinition))
    IXMLDOMNodePtr definition;
    __declspec(property(get=Gettext,put=Puttext))
    _bstr_t text;
    __declspec(property(get=GetnodeTypedValue,put=PutnodeTypedValue))
    _variant_t nodeTypedValue;
    __declspec(property(get=Getxml))
    _bstr_t xml;
    __declspec(property(get=Getparsed))
    VARIANT_BOOL parsed;
    __declspec(property(get=GetnamespaceURI))
    _bstr_t namespaceURI;
    __declspec(property(get=Getprefix))
    _bstr_t prefix;
    __declspec(property(get=GetbaseName))
    _bstr_t baseName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetnodeName ( );
    _variant_t GetnodeValue ( );
    void PutnodeValue (
        const _variant_t & value );
    DOMNodeType GetnodeType ( );
    IXMLDOMNodePtr GetparentNode ( );
    IXMLDOMNodeListPtr GetchildNodes ( );
    IXMLDOMNodePtr GetfirstChild ( );
    IXMLDOMNodePtr GetlastChild ( );
    IXMLDOMNodePtr GetpreviousSibling ( );
    IXMLDOMNodePtr GetnextSibling ( );
    IXMLDOMNamedNodeMapPtr Getattributes ( );
    IXMLDOMNodePtr insertBefore (
        struct IXMLDOMNode * newChild,
        const _variant_t & refChild );
    IXMLDOMNodePtr replaceChild (
        struct IXMLDOMNode * newChild,
        struct IXMLDOMNode * oldChild );
    IXMLDOMNodePtr removeChild (
        struct IXMLDOMNode * childNode );
    IXMLDOMNodePtr appendChild (
        struct IXMLDOMNode * newChild );
    VARIANT_BOOL hasChildNodes ( );
    IXMLDOMDocumentPtr GetownerDocument ( );
    IXMLDOMNodePtr cloneNode (
        VARIANT_BOOL deep );
    _bstr_t GetnodeTypeString ( );
    _bstr_t Gettext ( );
    void Puttext (
        _bstr_t text );
    VARIANT_BOOL Getspecified ( );
    IXMLDOMNodePtr Getdefinition ( );
    _variant_t GetnodeTypedValue ( );
    void PutnodeTypedValue (
        const _variant_t & typedValue );
    _variant_t GetdataType ( );
    void PutdataType (
        _bstr_t dataTypeName );
    _bstr_t Getxml ( );
    _bstr_t transformNode (
        struct IXMLDOMNode * stylesheet );
    IXMLDOMNodeListPtr selectNodes (
        _bstr_t queryString );
    IXMLDOMNodePtr selectSingleNode (
        _bstr_t queryString );
    VARIANT_BOOL Getparsed ( );
    _bstr_t GetnamespaceURI ( );
    _bstr_t Getprefix ( );
    _bstr_t GetbaseName ( );
    HRESULT transformNodeToObject (
        struct IXMLDOMNode * stylesheet,
        const _variant_t & outputObject );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_nodeName (
        BSTR * name ) = 0;
    virtual HRESULT __stdcall get_nodeValue (
        VARIANT * value ) = 0;
    virtual HRESULT __stdcall put_nodeValue (
        VARIANT value ) = 0;
    virtual HRESULT __stdcall get_nodeType (
        DOMNodeType * type ) = 0;
    virtual HRESULT __stdcall get_parentNode (
        struct IXMLDOMNode * * parent ) = 0;
    virtual HRESULT __stdcall get_childNodes (
        struct IXMLDOMNodeList * * childList ) = 0;
    virtual HRESULT __stdcall get_firstChild (
        struct IXMLDOMNode * * firstChild ) = 0;
    virtual HRESULT __stdcall get_lastChild (
        struct IXMLDOMNode * * lastChild ) = 0;
    virtual HRESULT __stdcall get_previousSibling (
        struct IXMLDOMNode * * previousSibling ) = 0;
    virtual HRESULT __stdcall get_nextSibling (
        struct IXMLDOMNode * * nextSibling ) = 0;
    virtual HRESULT __stdcall get_attributes (
        struct IXMLDOMNamedNodeMap * * attributeMap ) = 0;
    virtual HRESULT __stdcall raw_insertBefore (
        struct IXMLDOMNode * newChild,
        VARIANT refChild,
        struct IXMLDOMNode * * outNewChild ) = 0;
    virtual HRESULT __stdcall raw_replaceChild (
        struct IXMLDOMNode * newChild,
        struct IXMLDOMNode * oldChild,
        struct IXMLDOMNode * * outOldChild ) = 0;
    virtual HRESULT __stdcall raw_removeChild (
        struct IXMLDOMNode * childNode,
        struct IXMLDOMNode * * oldChild ) = 0;
    virtual HRESULT __stdcall raw_appendChild (
        struct IXMLDOMNode * newChild,
        struct IXMLDOMNode * * outNewChild ) = 0;
    virtual HRESULT __stdcall raw_hasChildNodes (
        VARIANT_BOOL * hasChild ) = 0;
    virtual HRESULT __stdcall get_ownerDocument (
        struct IXMLDOMDocument * * DOMDocument ) = 0;
    virtual HRESULT __stdcall raw_cloneNode (
        VARIANT_BOOL deep,
        struct IXMLDOMNode * * cloneRoot ) = 0;
    virtual HRESULT __stdcall get_nodeTypeString (
        BSTR * nodeType ) = 0;
    virtual HRESULT __stdcall get_text (
        BSTR * text ) = 0;
    virtual HRESULT __stdcall put_text (
        BSTR text ) = 0;
    virtual HRESULT __stdcall get_specified (
        VARIANT_BOOL * isSpecified ) = 0;
    virtual HRESULT __stdcall get_definition (
        struct IXMLDOMNode * * definitionNode ) = 0;
    virtual HRESULT __stdcall get_nodeTypedValue (
        VARIANT * typedValue ) = 0;
    virtual HRESULT __stdcall put_nodeTypedValue (
        VARIANT typedValue ) = 0;
    virtual HRESULT __stdcall get_dataType (
        VARIANT * dataTypeName ) = 0;
    virtual HRESULT __stdcall put_dataType (
        BSTR dataTypeName ) = 0;
    virtual HRESULT __stdcall get_xml (
        BSTR * xmlString ) = 0;
    virtual HRESULT __stdcall raw_transformNode (
        struct IXMLDOMNode * stylesheet,
        BSTR * xmlString ) = 0;
    virtual HRESULT __stdcall raw_selectNodes (
        BSTR queryString,
        struct IXMLDOMNodeList * * resultList ) = 0;
    virtual HRESULT __stdcall raw_selectSingleNode (
        BSTR queryString,
        struct IXMLDOMNode * * resultNode ) = 0;
    virtual HRESULT __stdcall get_parsed (
        VARIANT_BOOL * isParsed ) = 0;
    virtual HRESULT __stdcall get_namespaceURI (
        BSTR * namespaceURI ) = 0;
    virtual HRESULT __stdcall get_prefix (
        BSTR * prefixString ) = 0;
    virtual HRESULT __stdcall get_baseName (
        BSTR * nameString ) = 0;
    virtual HRESULT __stdcall raw_transformNodeToObject (
        struct IXMLDOMNode * stylesheet,
        VARIANT outputObject ) = 0;
};

enum tagDOMNodeType
{
    NODE_INVALID = 0,
    NODE_ELEMENT = 1,
    NODE_ATTRIBUTE = 2,
    NODE_TEXT = 3,
    NODE_CDATA_SECTION = 4,
    NODE_ENTITY_REFERENCE = 5,
    NODE_ENTITY = 6,
    NODE_PROCESSING_INSTRUCTION = 7,
    NODE_COMMENT = 8,
    NODE_DOCUMENT = 9,
    NODE_DOCUMENT_TYPE = 10,
    NODE_DOCUMENT_FRAGMENT = 11,
    NODE_NOTATION = 12
};

struct __declspec(uuid("2933bf82-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMNodeList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getitem))
    IXMLDOMNodePtr item[];
    __declspec(property(get=Getlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    //
    // Wrapper methods for error-handling
    //

    IXMLDOMNodePtr Getitem (
        long index );
    long Getlength ( );
    IXMLDOMNodePtr nextNode ( );
    HRESULT reset ( );
    IUnknownPtr Get_newEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_item (
        long index,
        struct IXMLDOMNode * * listItem ) = 0;
    virtual HRESULT __stdcall get_length (
        long * listLength ) = 0;
    virtual HRESULT __stdcall raw_nextNode (
        struct IXMLDOMNode * * nextItem ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("2933bf83-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMNamedNodeMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getitem))
    IXMLDOMNodePtr item[];
    __declspec(property(get=Getlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    //
    // Wrapper methods for error-handling
    //

    IXMLDOMNodePtr getNamedItem (
        _bstr_t name );
    IXMLDOMNodePtr setNamedItem (
        struct IXMLDOMNode * newItem );
    IXMLDOMNodePtr removeNamedItem (
        _bstr_t name );
    IXMLDOMNodePtr Getitem (
        long index );
    long Getlength ( );
    IXMLDOMNodePtr getQualifiedItem (
        _bstr_t baseName,
        _bstr_t namespaceURI );
    IXMLDOMNodePtr removeQualifiedItem (
        _bstr_t baseName,
        _bstr_t namespaceURI );
    IXMLDOMNodePtr nextNode ( );
    HRESULT reset ( );
    IUnknownPtr Get_newEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_getNamedItem (
        BSTR name,
        struct IXMLDOMNode * * namedItem ) = 0;
    virtual HRESULT __stdcall raw_setNamedItem (
        struct IXMLDOMNode * newItem,
        struct IXMLDOMNode * * nameItem ) = 0;
    virtual HRESULT __stdcall raw_removeNamedItem (
        BSTR name,
        struct IXMLDOMNode * * namedItem ) = 0;
    virtual HRESULT __stdcall get_item (
        long index,
        struct IXMLDOMNode * * listItem ) = 0;
    virtual HRESULT __stdcall get_length (
        long * listLength ) = 0;
    virtual HRESULT __stdcall raw_getQualifiedItem (
        BSTR baseName,
        BSTR namespaceURI,
        struct IXMLDOMNode * * qualifiedItem ) = 0;
    virtual HRESULT __stdcall raw_removeQualifiedItem (
        BSTR baseName,
        BSTR namespaceURI,
        struct IXMLDOMNode * * qualifiedItem ) = 0;
    virtual HRESULT __stdcall raw_nextNode (
        struct IXMLDOMNode * * nextItem ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("2933bf81-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMDocument : IXMLDOMNode
{
    //
    // Property data
    //

    __declspec(property(get=GetvalidateOnParse,put=PutvalidateOnParse))
    VARIANT_BOOL validateOnParse;
    __declspec(property(get=GetresolveExternals,put=PutresolveExternals))
    VARIANT_BOOL resolveExternals;
    __declspec(property(get=GetpreserveWhiteSpace,put=PutpreserveWhiteSpace))
    VARIANT_BOOL preserveWhiteSpace;
    __declspec(property(put=Putonreadystatechange))
    _variant_t onreadystatechange;
    __declspec(property(put=Putondataavailable))
    _variant_t ondataavailable;
    __declspec(property(get=Getdoctype))
    IXMLDOMDocumentTypePtr doctype;
    __declspec(property(get=Getimplementation))
    IXMLDOMImplementationPtr implementation;
    __declspec(property(get=GetdocumentElement,put=PutRefdocumentElement))
    IXMLDOMElementPtr documentElement;
    __declspec(property(put=Putontransformnode))
    _variant_t ontransformnode;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(get=GetparseError))
    IXMLDOMParseErrorPtr parseError;
    __declspec(property(get=Geturl))
    _bstr_t url;
    __declspec(property(get=Getasync,put=Putasync))
    VARIANT_BOOL async;

    //
    // Wrapper methods for error-handling
    //

    IXMLDOMDocumentTypePtr Getdoctype ( );
    IXMLDOMImplementationPtr Getimplementation ( );
    IXMLDOMElementPtr GetdocumentElement ( );
    void PutRefdocumentElement (
        struct IXMLDOMElement * DOMElement );
    IXMLDOMElementPtr createElement (
        _bstr_t tagName );
    IXMLDOMDocumentFragmentPtr createDocumentFragment ( );
    IXMLDOMTextPtr createTextNode (
        _bstr_t data );
    IXMLDOMCommentPtr createComment (
        _bstr_t data );
    IXMLDOMCDATASectionPtr createCDATASection (
        _bstr_t data );
    IXMLDOMProcessingInstructionPtr createProcessingInstruction (
        _bstr_t target,
        _bstr_t data );
    IXMLDOMAttributePtr createAttribute (
        _bstr_t name );
    IXMLDOMEntityReferencePtr createEntityReference (
        _bstr_t name );
    IXMLDOMNodeListPtr getElementsByTagName (
        _bstr_t tagName );
    IXMLDOMNodePtr createNode (
        const _variant_t & type,
        _bstr_t name,
        _bstr_t namespaceURI );
    IXMLDOMNodePtr nodeFromID (
        _bstr_t idString );
    VARIANT_BOOL load (
        const _variant_t & xmlSource );
    long GetreadyState ( );
    IXMLDOMParseErrorPtr GetparseError ( );
    _bstr_t Geturl ( );
    VARIANT_BOOL Getasync ( );
    void Putasync (
        VARIANT_BOOL isAsync );
    HRESULT abort ( );
    VARIANT_BOOL loadXML (
        _bstr_t bstrXML );
    HRESULT save (
        const _variant_t & destination );
    VARIANT_BOOL GetvalidateOnParse ( );
    void PutvalidateOnParse (
        VARIANT_BOOL isValidating );
    VARIANT_BOOL GetresolveExternals ( );
    void PutresolveExternals (
        VARIANT_BOOL isResolving );
    VARIANT_BOOL GetpreserveWhiteSpace ( );
    void PutpreserveWhiteSpace (
        VARIANT_BOOL isPreserving );
    void Putonreadystatechange (
        const _variant_t & _arg1 );
    void Putondataavailable (
        const _variant_t & _arg1 );
    void Putontransformnode (
        const _variant_t & _arg1 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_doctype (
        struct IXMLDOMDocumentType * * documentType ) = 0;
    virtual HRESULT __stdcall get_implementation (
        struct IXMLDOMImplementation * * impl ) = 0;
    virtual HRESULT __stdcall get_documentElement (
        struct IXMLDOMElement * * DOMElement ) = 0;
    virtual HRESULT __stdcall putref_documentElement (
        struct IXMLDOMElement * DOMElement ) = 0;
    virtual HRESULT __stdcall raw_createElement (
        BSTR tagName,
        struct IXMLDOMElement * * element ) = 0;
    virtual HRESULT __stdcall raw_createDocumentFragment (
        struct IXMLDOMDocumentFragment * * docFrag ) = 0;
    virtual HRESULT __stdcall raw_createTextNode (
        BSTR data,
        struct IXMLDOMText * * text ) = 0;
    virtual HRESULT __stdcall raw_createComment (
        BSTR data,
        struct IXMLDOMComment * * comment ) = 0;
    virtual HRESULT __stdcall raw_createCDATASection (
        BSTR data,
        struct IXMLDOMCDATASection * * cdata ) = 0;
    virtual HRESULT __stdcall raw_createProcessingInstruction (
        BSTR target,
        BSTR data,
        struct IXMLDOMProcessingInstruction * * pi ) = 0;
    virtual HRESULT __stdcall raw_createAttribute (
        BSTR name,
        struct IXMLDOMAttribute * * attribute ) = 0;
    virtual HRESULT __stdcall raw_createEntityReference (
        BSTR name,
        struct IXMLDOMEntityReference * * entityRef ) = 0;
    virtual HRESULT __stdcall raw_getElementsByTagName (
        BSTR tagName,
        struct IXMLDOMNodeList * * resultList ) = 0;
    virtual HRESULT __stdcall raw_createNode (
        VARIANT type,
        BSTR name,
        BSTR namespaceURI,
        struct IXMLDOMNode * * node ) = 0;
    virtual HRESULT __stdcall raw_nodeFromID (
        BSTR idString,
        struct IXMLDOMNode * * node ) = 0;
    virtual HRESULT __stdcall raw_load (
        VARIANT xmlSource,
        VARIANT_BOOL * isSuccessful ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * value ) = 0;
    virtual HRESULT __stdcall get_parseError (
        struct IXMLDOMParseError * * errorObj ) = 0;
    virtual HRESULT __stdcall get_url (
        BSTR * urlString ) = 0;
    virtual HRESULT __stdcall get_async (
        VARIANT_BOOL * isAsync ) = 0;
    virtual HRESULT __stdcall put_async (
        VARIANT_BOOL isAsync ) = 0;
    virtual HRESULT __stdcall raw_abort ( ) = 0;
    virtual HRESULT __stdcall raw_loadXML (
        BSTR bstrXML,
        VARIANT_BOOL * isSuccessful ) = 0;
    virtual HRESULT __stdcall raw_save (
        VARIANT destination ) = 0;
    virtual HRESULT __stdcall get_validateOnParse (
        VARIANT_BOOL * isValidating ) = 0;
    virtual HRESULT __stdcall put_validateOnParse (
        VARIANT_BOOL isValidating ) = 0;
    virtual HRESULT __stdcall get_resolveExternals (
        VARIANT_BOOL * isResolving ) = 0;
    virtual HRESULT __stdcall put_resolveExternals (
        VARIANT_BOOL isResolving ) = 0;
    virtual HRESULT __stdcall get_preserveWhiteSpace (
        VARIANT_BOOL * isPreserving ) = 0;
    virtual HRESULT __stdcall put_preserveWhiteSpace (
        VARIANT_BOOL isPreserving ) = 0;
    virtual HRESULT __stdcall put_onreadystatechange (
        VARIANT _arg1 ) = 0;
    virtual HRESULT __stdcall put_ondataavailable (
        VARIANT _arg1 ) = 0;
    virtual HRESULT __stdcall put_ontransformnode (
        VARIANT _arg1 ) = 0;
};

struct __declspec(uuid("2933bf8b-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMDocumentType : IXMLDOMNode
{
    //
    // Property data
    //

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=Getentities))
    IXMLDOMNamedNodeMapPtr entities;
    __declspec(property(get=Getnotations))
    IXMLDOMNamedNodeMapPtr notations;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getname ( );
    IXMLDOMNamedNodeMapPtr Getentities ( );
    IXMLDOMNamedNodeMapPtr Getnotations ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_name (
        BSTR * rootName ) = 0;
    virtual HRESULT __stdcall get_entities (
        struct IXMLDOMNamedNodeMap * * entityMap ) = 0;
    virtual HRESULT __stdcall get_notations (
        struct IXMLDOMNamedNodeMap * * notationMap ) = 0;
};

struct __declspec(uuid("2933bf86-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMElement : IXMLDOMNode
{
    //
    // Property data
    //

    __declspec(property(get=GettagName))
    _bstr_t tagName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GettagName ( );
    _variant_t getAttribute (
        _bstr_t name );
    HRESULT setAttribute (
        _bstr_t name,
        const _variant_t & value );
    HRESULT removeAttribute (
        _bstr_t name );
    IXMLDOMAttributePtr getAttributeNode (
        _bstr_t name );
    IXMLDOMAttributePtr setAttributeNode (
        struct IXMLDOMAttribute * DOMAttribute );
    IXMLDOMAttributePtr removeAttributeNode (
        struct IXMLDOMAttribute * DOMAttribute );
    IXMLDOMNodeListPtr getElementsByTagName (
        _bstr_t tagName );
    HRESULT normalize ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_tagName (
        BSTR * tagName ) = 0;
    virtual HRESULT __stdcall raw_getAttribute (
        BSTR name,
        VARIANT * value ) = 0;
    virtual HRESULT __stdcall raw_setAttribute (
        BSTR name,
        VARIANT value ) = 0;
    virtual HRESULT __stdcall raw_removeAttribute (
        BSTR name ) = 0;
    virtual HRESULT __stdcall raw_getAttributeNode (
        BSTR name,
        struct IXMLDOMAttribute * * attributeNode ) = 0;
    virtual HRESULT __stdcall raw_setAttributeNode (
        struct IXMLDOMAttribute * DOMAttribute,
        struct IXMLDOMAttribute * * attributeNode ) = 0;
    virtual HRESULT __stdcall raw_removeAttributeNode (
        struct IXMLDOMAttribute * DOMAttribute,
        struct IXMLDOMAttribute * * attributeNode ) = 0;
    virtual HRESULT __stdcall raw_getElementsByTagName (
        BSTR tagName,
        struct IXMLDOMNodeList * * resultList ) = 0;
    virtual HRESULT __stdcall raw_normalize ( ) = 0;
};

struct __declspec(uuid("2933bf85-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMAttribute : IXMLDOMNode
{
    //
    // Property data
    //

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=Getvalue,put=Putvalue))
    _variant_t value;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getname ( );
    _variant_t Getvalue ( );
    void Putvalue (
        const _variant_t & attributeValue );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_name (
        BSTR * attributeName ) = 0;
    virtual HRESULT __stdcall get_value (
        VARIANT * attributeValue ) = 0;
    virtual HRESULT __stdcall put_value (
        VARIANT attributeValue ) = 0;
};

struct __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782"))
IXMLDOMDocumentFragment : IXMLDOMNode
{};

struct __declspec(uuid("2933bf84-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMCharacterData : IXMLDOMNode
{
    //
    // Property data
    //

    __declspec(property(get=Getdata,put=Putdata))
    _bstr_t data;
    __declspec(property(get=Getlength))
    long length;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getdata ( );
    void Putdata (
        _bstr_t data );
    long Getlength ( );
    _bstr_t substringData (
        long offset,
        long count );
    HRESULT appendData (
        _bstr_t data );
    HRESULT insertData (
        long offset,
        _bstr_t data );
    HRESULT deleteData (
        long offset,
        long count );
    HRESULT replaceData (
        long offset,
        long count,
        _bstr_t data );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_data (
        BSTR * data ) = 0;
    virtual HRESULT __stdcall put_data (
        BSTR data ) = 0;
    virtual HRESULT __stdcall get_length (
        long * dataLength ) = 0;
    virtual HRESULT __stdcall raw_substringData (
        long offset,
        long count,
        BSTR * data ) = 0;
    virtual HRESULT __stdcall raw_appendData (
        BSTR data ) = 0;
    virtual HRESULT __stdcall raw_insertData (
        long offset,
        BSTR data ) = 0;
    virtual HRESULT __stdcall raw_deleteData (
        long offset,
        long count ) = 0;
    virtual HRESULT __stdcall raw_replaceData (
        long offset,
        long count,
        BSTR data ) = 0;
};

struct __declspec(uuid("2933bf87-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMText : IXMLDOMCharacterData
{
    //
    // Wrapper methods for error-handling
    //

    IXMLDOMTextPtr splitText (
        long offset );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_splitText (
        long offset,
        struct IXMLDOMText * * rightHandTextNode ) = 0;
};

struct __declspec(uuid("2933bf88-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMComment : IXMLDOMCharacterData
{};

struct __declspec(uuid("2933bf8a-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMCDATASection : IXMLDOMText
{};

struct __declspec(uuid("2933bf89-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMProcessingInstruction : IXMLDOMNode
{
    //
    // Property data
    //

    __declspec(property(get=Getdata,put=Putdata))
    _bstr_t data;
    __declspec(property(get=Gettarget))
    _bstr_t target;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Gettarget ( );
    _bstr_t Getdata ( );
    void Putdata (
        _bstr_t value );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_target (
        BSTR * name ) = 0;
    virtual HRESULT __stdcall get_data (
        BSTR * value ) = 0;
    virtual HRESULT __stdcall put_data (
        BSTR value ) = 0;
};

struct __declspec(uuid("2933bf8e-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMEntityReference : IXMLDOMNode
{};

struct __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782"))
IXMLDOMParseError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GeterrorCode))
    long errorCode;
    __declspec(property(get=Geturl))
    _bstr_t url;
    __declspec(property(get=Getreason))
    _bstr_t reason;
    __declspec(property(get=GetsrcText))
    _bstr_t srcText;
    __declspec(property(get=Getline))
    long line;
    __declspec(property(get=Getlinepos))
    long linepos;
    __declspec(property(get=Getfilepos))
    long filepos;

    //
    // Wrapper methods for error-handling
    //

    long GeterrorCode ( );
    _bstr_t Geturl ( );
    _bstr_t Getreason ( );
    _bstr_t GetsrcText ( );
    long Getline ( );
    long Getlinepos ( );
    long Getfilepos ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_errorCode (
        long * errorCode ) = 0;
    virtual HRESULT __stdcall get_url (
        BSTR * urlString ) = 0;
    virtual HRESULT __stdcall get_reason (
        BSTR * reasonString ) = 0;
    virtual HRESULT __stdcall get_srcText (
        BSTR * sourceString ) = 0;
    virtual HRESULT __stdcall get_line (
        long * lineNumber ) = 0;
    virtual HRESULT __stdcall get_linepos (
        long * linePosition ) = 0;
    virtual HRESULT __stdcall get_filepos (
        long * filePosition ) = 0;
};

struct __declspec(uuid("2933bf95-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMDocument2 : IXMLDOMDocument
{
    //
    // Property data
    //

    __declspec(property(get=Getnamespaces))
    IXMLDOMSchemaCollectionPtr namespaces;
    __declspec(property(get=Getschemas,put=PutRefschemas))
    _variant_t schemas;

    //
    // Wrapper methods for error-handling
    //

    IXMLDOMSchemaCollectionPtr Getnamespaces ( );
    _variant_t Getschemas ( );
    void PutRefschemas (
        const _variant_t & otherCollection );
    IXMLDOMParseErrorPtr validate ( );
    HRESULT setProperty (
        _bstr_t name,
        const _variant_t & value );
    _variant_t getProperty (
        _bstr_t name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_namespaces (
        struct IXMLDOMSchemaCollection * * namespaceCollection ) = 0;
    virtual HRESULT __stdcall get_schemas (
        VARIANT * otherCollection ) = 0;
    virtual HRESULT __stdcall putref_schemas (
        VARIANT otherCollection ) = 0;
    virtual HRESULT __stdcall raw_validate (
        struct IXMLDOMParseError * * errorObj ) = 0;
    virtual HRESULT __stdcall raw_setProperty (
        BSTR name,
        VARIANT value ) = 0;
    virtual HRESULT __stdcall raw_getProperty (
        BSTR name,
        VARIANT * value ) = 0;
};

struct __declspec(uuid("373984c8-b845-449b-91e7-45ac83036ade"))
IXMLDOMSchemaCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetnamespaceURI))
    _bstr_t namespaceURI[];
    __declspec(property(get=Getlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT add (
        _bstr_t namespaceURI,
        const _variant_t & var );
    IXMLDOMNodePtr get (
        _bstr_t namespaceURI );
    HRESULT remove (
        _bstr_t namespaceURI );
    long Getlength ( );
    _bstr_t GetnamespaceURI (
        long index );
    HRESULT addCollection (
        struct IXMLDOMSchemaCollection * otherCollection );
    IUnknownPtr Get_newEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_add (
        BSTR namespaceURI,
        VARIANT var ) = 0;
    virtual HRESULT __stdcall raw_get (
        BSTR namespaceURI,
        struct IXMLDOMNode * * schemaNode ) = 0;
    virtual HRESULT __stdcall raw_remove (
        BSTR namespaceURI ) = 0;
    virtual HRESULT __stdcall get_length (
        long * length ) = 0;
    virtual HRESULT __stdcall get_namespaceURI (
        long index,
        BSTR * length ) = 0;
    virtual HRESULT __stdcall raw_addCollection (
        struct IXMLDOMSchemaCollection * otherCollection ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("2933bf8c-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMNotation : IXMLDOMNode
{
    //
    // Property data
    //

    __declspec(property(get=GetpublicId))
    _variant_t publicId;
    __declspec(property(get=GetsystemId))
    _variant_t systemId;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetpublicId ( );
    _variant_t GetsystemId ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_publicId (
        VARIANT * publicId ) = 0;
    virtual HRESULT __stdcall get_systemId (
        VARIANT * systemId ) = 0;
};

struct __declspec(uuid("2933bf8d-7b36-11d2-b20e-00c04f983e60"))
IXMLDOMEntity : IXMLDOMNode
{
    //
    // Property data
    //

    __declspec(property(get=GetpublicId))
    _variant_t publicId;
    __declspec(property(get=GetsystemId))
    _variant_t systemId;
    __declspec(property(get=GetnotationName))
    _bstr_t notationName;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetpublicId ( );
    _variant_t GetsystemId ( );
    _bstr_t GetnotationName ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_publicId (
        VARIANT * publicId ) = 0;
    virtual HRESULT __stdcall get_systemId (
        VARIANT * systemId ) = 0;
    virtual HRESULT __stdcall get_notationName (
        BSTR * name ) = 0;
};

struct __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782"))
IXTLRuntime : IXMLDOMNode
{
    //
    // Wrapper methods for error-handling
    //

    long uniqueID (
        struct IXMLDOMNode * pNode );
    long depth (
        struct IXMLDOMNode * pNode );
    long childNumber (
        struct IXMLDOMNode * pNode );
    long ancestorChildNumber (
        _bstr_t bstrNodeName,
        struct IXMLDOMNode * pNode );
    long absoluteChildNumber (
        struct IXMLDOMNode * pNode );
    _bstr_t formatIndex (
        long lIndex,
        _bstr_t bstrFormat );
    _bstr_t formatNumber (
        double dblNumber,
        _bstr_t bstrFormat );
    _bstr_t formatDate (
        const _variant_t & varDate,
        _bstr_t bstrFormat,
        const _variant_t & varDestLocale = vtMissing );
    _bstr_t formatTime (
        const _variant_t & varTime,
        _bstr_t bstrFormat,
        const _variant_t & varDestLocale = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_uniqueID (
        struct IXMLDOMNode * pNode,
        long * pID ) = 0;
    virtual HRESULT __stdcall raw_depth (
        struct IXMLDOMNode * pNode,
        long * pDepth ) = 0;
    virtual HRESULT __stdcall raw_childNumber (
        struct IXMLDOMNode * pNode,
        long * pNumber ) = 0;
    virtual HRESULT __stdcall raw_ancestorChildNumber (
        BSTR bstrNodeName,
        struct IXMLDOMNode * pNode,
        long * pNumber ) = 0;
    virtual HRESULT __stdcall raw_absoluteChildNumber (
        struct IXMLDOMNode * pNode,
        long * pNumber ) = 0;
    virtual HRESULT __stdcall raw_formatIndex (
        long lIndex,
        BSTR bstrFormat,
        BSTR * pbstrFormattedString ) = 0;
    virtual HRESULT __stdcall raw_formatNumber (
        double dblNumber,
        BSTR bstrFormat,
        BSTR * pbstrFormattedString ) = 0;
    virtual HRESULT __stdcall raw_formatDate (
        VARIANT varDate,
        BSTR bstrFormat,
        VARIANT varDestLocale,
        BSTR * pbstrFormattedString ) = 0;
    virtual HRESULT __stdcall raw_formatTime (
        VARIANT varTime,
        BSTR bstrFormat,
        VARIANT varDestLocale,
        BSTR * pbstrFormattedString ) = 0;
};

struct __declspec(uuid("2933bf93-7b36-11d2-b20e-00c04f983e60"))
IXSLTemplate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstylesheet,put=PutRefstylesheet))
    IXMLDOMNodePtr stylesheet;

    //
    // Wrapper methods for error-handling
    //

    void PutRefstylesheet (
        struct IXMLDOMNode * stylesheet );
    IXMLDOMNodePtr Getstylesheet ( );
    IXSLProcessorPtr createProcessor ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall putref_stylesheet (
        struct IXMLDOMNode * stylesheet ) = 0;
    virtual HRESULT __stdcall get_stylesheet (
        struct IXMLDOMNode * * stylesheet ) = 0;
    virtual HRESULT __stdcall raw_createProcessor (
        struct IXSLProcessor * * ppProcessor ) = 0;
};

struct __declspec(uuid("2933bf92-7b36-11d2-b20e-00c04f983e60"))
IXSLProcessor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getinput,put=Putinput))
    _variant_t input;
    __declspec(property(get=GetownerTemplate))
    IXSLTemplatePtr ownerTemplate;
    __declspec(property(get=GetstartMode))
    _bstr_t startMode;
    __declspec(property(get=GetstartModeURI))
    _bstr_t startModeURI;
    __declspec(property(get=Getoutput,put=Putoutput))
    _variant_t output;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(get=Getstylesheet))
    IXMLDOMNodePtr stylesheet;

    //
    // Wrapper methods for error-handling
    //

    void Putinput (
        const _variant_t & pVar );
    _variant_t Getinput ( );
    IXSLTemplatePtr GetownerTemplate ( );
    HRESULT setStartMode (
        _bstr_t mode,
        _bstr_t namespaceURI );
    _bstr_t GetstartMode ( );
    _bstr_t GetstartModeURI ( );
    void Putoutput (
        const _variant_t & pOutput );
    _variant_t Getoutput ( );
    VARIANT_BOOL transform ( );
    HRESULT reset ( );
    long GetreadyState ( );
    HRESULT addParameter (
        _bstr_t baseName,
        const _variant_t & parameter,
        _bstr_t namespaceURI );
    HRESULT addObject (
        IDispatch * obj,
        _bstr_t namespaceURI );
    IXMLDOMNodePtr Getstylesheet ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_input (
        VARIANT pVar ) = 0;
    virtual HRESULT __stdcall get_input (
        VARIANT * pVar ) = 0;
    virtual HRESULT __stdcall get_ownerTemplate (
        struct IXSLTemplate * * ppTemplate ) = 0;
    virtual HRESULT __stdcall raw_setStartMode (
        BSTR mode,
        BSTR namespaceURI ) = 0;
    virtual HRESULT __stdcall get_startMode (
        BSTR * mode ) = 0;
    virtual HRESULT __stdcall get_startModeURI (
        BSTR * namespaceURI ) = 0;
    virtual HRESULT __stdcall put_output (
        VARIANT pOutput ) = 0;
    virtual HRESULT __stdcall get_output (
        VARIANT * pOutput ) = 0;
    virtual HRESULT __stdcall raw_transform (
        VARIANT_BOOL * pDone ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * pReadyState ) = 0;
    virtual HRESULT __stdcall raw_addParameter (
        BSTR baseName,
        VARIANT parameter,
        BSTR namespaceURI ) = 0;
    virtual HRESULT __stdcall raw_addObject (
        IDispatch * obj,
        BSTR namespaceURI ) = 0;
    virtual HRESULT __stdcall get_stylesheet (
        struct IXMLDOMNode * * stylesheet ) = 0;
};

struct __declspec(uuid("a4f96ed0-f829-476e-81c0-cdc7bd2a0802"))
ISAXXMLReader : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL getFeature (
        unsigned short * pwchName );
    HRESULT putFeature (
        unsigned short * pwchName,
        VARIANT_BOOL vfValue );
    _variant_t getProperty (
        unsigned short * pwchName );
    HRESULT putProperty (
        unsigned short * pwchName,
        const _variant_t & varValue );
    ISAXEntityResolverPtr getEntityResolver ( );
    HRESULT putEntityResolver (
        struct ISAXEntityResolver * pResolver );
    ISAXContentHandlerPtr getContentHandler ( );
    HRESULT putContentHandler (
        struct ISAXContentHandler * pHandler );
    ISAXDTDHandlerPtr getDTDHandler ( );
    HRESULT putDTDHandler (
        struct ISAXDTDHandler * pHandler );
    ISAXErrorHandlerPtr getErrorHandler ( );
    HRESULT putErrorHandler (
        struct ISAXErrorHandler * pHandler );
    unsigned short * getBaseURL ( );
    HRESULT putBaseURL (
        unsigned short * pwchBaseUrl );
    unsigned short * getSecureBaseURL ( );
    HRESULT putSecureBaseURL (
        unsigned short * pwchSecureBaseUrl );
    HRESULT parse (
        const _variant_t & varInput );
    HRESULT parseURL (
        unsigned short * pwchUrl );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_getFeature (
        unsigned short * pwchName,
        VARIANT_BOOL * pvfValue ) = 0;
    virtual HRESULT __stdcall raw_putFeature (
        unsigned short * pwchName,
        VARIANT_BOOL vfValue ) = 0;
    virtual HRESULT __stdcall raw_getProperty (
        unsigned short * pwchName,
        VARIANT * pvarValue ) = 0;
    virtual HRESULT __stdcall raw_putProperty (
        unsigned short * pwchName,
        VARIANT varValue ) = 0;
    virtual HRESULT __stdcall raw_getEntityResolver (
        struct ISAXEntityResolver * * ppResolver ) = 0;
    virtual HRESULT __stdcall raw_putEntityResolver (
        struct ISAXEntityResolver * pResolver ) = 0;
    virtual HRESULT __stdcall raw_getContentHandler (
        struct ISAXContentHandler * * ppHandler ) = 0;
    virtual HRESULT __stdcall raw_putContentHandler (
        struct ISAXContentHandler * pHandler ) = 0;
    virtual HRESULT __stdcall raw_getDTDHandler (
        struct ISAXDTDHandler * * ppHandler ) = 0;
    virtual HRESULT __stdcall raw_putDTDHandler (
        struct ISAXDTDHandler * pHandler ) = 0;
    virtual HRESULT __stdcall raw_getErrorHandler (
        struct ISAXErrorHandler * * ppHandler ) = 0;
    virtual HRESULT __stdcall raw_putErrorHandler (
        struct ISAXErrorHandler * pHandler ) = 0;
    virtual HRESULT __stdcall raw_getBaseURL (
        unsigned short * * ppwchBaseUrl ) = 0;
    virtual HRESULT __stdcall raw_putBaseURL (
        unsigned short * pwchBaseUrl ) = 0;
    virtual HRESULT __stdcall raw_getSecureBaseURL (
        unsigned short * * ppwchSecureBaseUrl ) = 0;
    virtual HRESULT __stdcall raw_putSecureBaseURL (
        unsigned short * pwchSecureBaseUrl ) = 0;
    virtual HRESULT __stdcall raw_parse (
        VARIANT varInput ) = 0;
    virtual HRESULT __stdcall raw_parseURL (
        unsigned short * pwchUrl ) = 0;
};

struct __declspec(uuid("99bca7bd-e8c4-4d5f-a0cf-6d907901ff07"))
ISAXEntityResolver : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    _variant_t resolveEntity (
        unsigned short * pwchPublicId,
        unsigned short * pwchSystemId );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_resolveEntity (
        unsigned short * pwchPublicId,
        unsigned short * pwchSystemId,
        VARIANT * pvarInput ) = 0;
};

struct __declspec(uuid("1545cdfa-9e4e-4497-a8a4-2bf7d0112c44"))
ISAXContentHandler : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT putDocumentLocator (
        struct ISAXLocator * pLocator );
    HRESULT startDocument ( );
    HRESULT endDocument ( );
    HRESULT startPrefixMapping (
        unsigned short * pwchPrefix,
        int cchPrefix,
        unsigned short * pwchUri,
        int cchUri );
    HRESULT endPrefixMapping (
        unsigned short * pwchPrefix,
        int cchPrefix );
    HRESULT startElement (
        unsigned short * pwchNamespaceUri,
        int cchNamespaceUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * pwchQName,
        int cchQName,
        struct ISAXAttributes * pAttributes );
    HRESULT endElement (
        unsigned short * pwchNamespaceUri,
        int cchNamespaceUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * pwchQName,
        int cchQName );
    HRESULT characters (
        unsigned short * pwchChars,
        int cchChars );
    HRESULT ignorableWhitespace (
        unsigned short * pwchChars,
        int cchChars );
    HRESULT processingInstruction (
        unsigned short * pwchTarget,
        int cchTarget,
        unsigned short * pwchData,
        int cchData );
    HRESULT skippedEntity (
        unsigned short * pwchName,
        int cchName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_putDocumentLocator (
        struct ISAXLocator * pLocator ) = 0;
    virtual HRESULT __stdcall raw_startDocument ( ) = 0;
    virtual HRESULT __stdcall raw_endDocument ( ) = 0;
    virtual HRESULT __stdcall raw_startPrefixMapping (
        unsigned short * pwchPrefix,
        int cchPrefix,
        unsigned short * pwchUri,
        int cchUri ) = 0;
    virtual HRESULT __stdcall raw_endPrefixMapping (
        unsigned short * pwchPrefix,
        int cchPrefix ) = 0;
    virtual HRESULT __stdcall raw_startElement (
        unsigned short * pwchNamespaceUri,
        int cchNamespaceUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * pwchQName,
        int cchQName,
        struct ISAXAttributes * pAttributes ) = 0;
    virtual HRESULT __stdcall raw_endElement (
        unsigned short * pwchNamespaceUri,
        int cchNamespaceUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * pwchQName,
        int cchQName ) = 0;
    virtual HRESULT __stdcall raw_characters (
        unsigned short * pwchChars,
        int cchChars ) = 0;
    virtual HRESULT __stdcall raw_ignorableWhitespace (
        unsigned short * pwchChars,
        int cchChars ) = 0;
    virtual HRESULT __stdcall raw_processingInstruction (
        unsigned short * pwchTarget,
        int cchTarget,
        unsigned short * pwchData,
        int cchData ) = 0;
    virtual HRESULT __stdcall raw_skippedEntity (
        unsigned short * pwchName,
        int cchName ) = 0;
};

struct __declspec(uuid("9b7e472a-0de4-4640-bff3-84d38a051c31"))
ISAXLocator : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    int getColumnNumber ( );
    int getLineNumber ( );
    unsigned short * getPublicId ( );
    unsigned short * getSystemId ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_getColumnNumber (
        int * pnColumn ) = 0;
    virtual HRESULT __stdcall raw_getLineNumber (
        int * pnLine ) = 0;
    virtual HRESULT __stdcall raw_getPublicId (
        unsigned short * * ppwchPublicId ) = 0;
    virtual HRESULT __stdcall raw_getSystemId (
        unsigned short * * ppwchSystemId ) = 0;
};

struct __declspec(uuid("f078abe1-45d2-4832-91ea-4466ce2f25c9"))
ISAXAttributes : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    int getLength ( );
    HRESULT getURI (
        int nIndex,
        unsigned short * * ppwchUri,
        int * pcchUri );
    HRESULT getLocalName (
        int nIndex,
        unsigned short * * ppwchLocalName,
        int * pcchLocalName );
    HRESULT getQName (
        int nIndex,
        unsigned short * * ppwchQName,
        int * pcchQName );
    HRESULT getName (
        int nIndex,
        unsigned short * * ppwchUri,
        int * pcchUri,
        unsigned short * * ppwchLocalName,
        int * pcchLocalName,
        unsigned short * * ppwchQName,
        int * pcchQName );
    int getIndexFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName );
    int getIndexFromQName (
        unsigned short * pwchQName,
        int cchQName );
    HRESULT getType (
        int nIndex,
        unsigned short * * ppwchType,
        int * pcchType );
    HRESULT getTypeFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * * ppwchType,
        int * pcchType );
    HRESULT getTypeFromQName (
        unsigned short * pwchQName,
        int cchQName,
        unsigned short * * ppwchType,
        int * pcchType );
    HRESULT getValue (
        int nIndex,
        unsigned short * * ppwchValue,
        int * pcchValue );
    HRESULT getValueFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * * ppwchValue,
        int * pcchValue );
    HRESULT getValueFromQName (
        unsigned short * pwchQName,
        int cchQName,
        unsigned short * * ppwchValue,
        int * pcchValue );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_getLength (
        int * pnLength ) = 0;
    virtual HRESULT __stdcall raw_getURI (
        int nIndex,
        unsigned short * * ppwchUri,
        int * pcchUri ) = 0;
    virtual HRESULT __stdcall raw_getLocalName (
        int nIndex,
        unsigned short * * ppwchLocalName,
        int * pcchLocalName ) = 0;
    virtual HRESULT __stdcall raw_getQName (
        int nIndex,
        unsigned short * * ppwchQName,
        int * pcchQName ) = 0;
    virtual HRESULT __stdcall raw_getName (
        int nIndex,
        unsigned short * * ppwchUri,
        int * pcchUri,
        unsigned short * * ppwchLocalName,
        int * pcchLocalName,
        unsigned short * * ppwchQName,
        int * pcchQName ) = 0;
    virtual HRESULT __stdcall raw_getIndexFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        int * pnIndex ) = 0;
    virtual HRESULT __stdcall raw_getIndexFromQName (
        unsigned short * pwchQName,
        int cchQName,
        int * pnIndex ) = 0;
    virtual HRESULT __stdcall raw_getType (
        int nIndex,
        unsigned short * * ppwchType,
        int * pcchType ) = 0;
    virtual HRESULT __stdcall raw_getTypeFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * * ppwchType,
        int * pcchType ) = 0;
    virtual HRESULT __stdcall raw_getTypeFromQName (
        unsigned short * pwchQName,
        int cchQName,
        unsigned short * * ppwchType,
        int * pcchType ) = 0;
    virtual HRESULT __stdcall raw_getValue (
        int nIndex,
        unsigned short * * ppwchValue,
        int * pcchValue ) = 0;
    virtual HRESULT __stdcall raw_getValueFromName (
        unsigned short * pwchUri,
        int cchUri,
        unsigned short * pwchLocalName,
        int cchLocalName,
        unsigned short * * ppwchValue,
        int * pcchValue ) = 0;
    virtual HRESULT __stdcall raw_getValueFromQName (
        unsigned short * pwchQName,
        int cchQName,
        unsigned short * * ppwchValue,
        int * pcchValue ) = 0;
};

struct __declspec(uuid("e15c1baf-afb3-4d60-8c36-19a8c45defed"))
ISAXDTDHandler : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT notationDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId );
    HRESULT unparsedEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId,
        unsigned short * pwchNotationName,
        int cchNotationName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_notationDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId ) = 0;
    virtual HRESULT __stdcall raw_unparsedEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId,
        unsigned short * pwchNotationName,
        int cchNotationName ) = 0;
};

struct __declspec(uuid("a60511c4-ccf5-479e-98a3-dc8dc545b7d0"))
ISAXErrorHandler : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT error (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode );
    HRESULT fatalError (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode );
    HRESULT ignorableWarning (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_error (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode ) = 0;
    virtual HRESULT __stdcall raw_fatalError (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode ) = 0;
    virtual HRESULT __stdcall raw_ignorableWarning (
        struct ISAXLocator * pLocator,
        unsigned short * pwchErrorMessage,
        HRESULT hrErrorCode ) = 0;
};

struct __declspec(uuid("70409222-ca09-4475-acb8-40312fe8d145"))
ISAXXMLFilter : ISAXXMLReader
{
    //
    // Wrapper methods for error-handling
    //

    ISAXXMLReaderPtr getParent ( );
    HRESULT putParent (
        struct ISAXXMLReader * pReader );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_getParent (
        struct ISAXXMLReader * * ppReader ) = 0;
    virtual HRESULT __stdcall raw_putParent (
        struct ISAXXMLReader * pReader ) = 0;
};

struct __declspec(uuid("7f85d5f5-47a8-4497-bda5-84ba04819ea6"))
ISAXLexicalHandler : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT startDTD (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId );
    HRESULT endDTD ( );
    HRESULT startEntity (
        unsigned short * pwchName,
        int cchName );
    HRESULT endEntity (
        unsigned short * pwchName,
        int cchName );
    HRESULT startCDATA ( );
    HRESULT endCDATA ( );
    HRESULT comment (
        unsigned short * pwchChars,
        int cchChars );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_startDTD (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId ) = 0;
    virtual HRESULT __stdcall raw_endDTD ( ) = 0;
    virtual HRESULT __stdcall raw_startEntity (
        unsigned short * pwchName,
        int cchName ) = 0;
    virtual HRESULT __stdcall raw_endEntity (
        unsigned short * pwchName,
        int cchName ) = 0;
    virtual HRESULT __stdcall raw_startCDATA ( ) = 0;
    virtual HRESULT __stdcall raw_endCDATA ( ) = 0;
    virtual HRESULT __stdcall raw_comment (
        unsigned short * pwchChars,
        int cchChars ) = 0;
};

struct __declspec(uuid("862629ac-771a-47b2-8337-4e6843c1be90"))
ISAXDeclHandler : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT elementDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchModel,
        int cchModel );
    HRESULT attributeDecl (
        unsigned short * pwchElementName,
        int cchElementName,
        unsigned short * pwchAttributeName,
        int cchAttributeName,
        unsigned short * pwchType,
        int cchType,
        unsigned short * pwchValueDefault,
        int cchValueDefault,
        unsigned short * pwchValue,
        int cchValue );
    HRESULT internalEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchValue,
        int cchValue );
    HRESULT externalEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_elementDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchModel,
        int cchModel ) = 0;
    virtual HRESULT __stdcall raw_attributeDecl (
        unsigned short * pwchElementName,
        int cchElementName,
        unsigned short * pwchAttributeName,
        int cchAttributeName,
        unsigned short * pwchType,
        int cchType,
        unsigned short * pwchValueDefault,
        int cchValueDefault,
        unsigned short * pwchValue,
        int cchValue ) = 0;
    virtual HRESULT __stdcall raw_internalEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchValue,
        int cchValue ) = 0;
    virtual HRESULT __stdcall raw_externalEntityDecl (
        unsigned short * pwchName,
        int cchName,
        unsigned short * pwchPublicId,
        int cchPublicId,
        unsigned short * pwchSystemId,
        int cchSystemId ) = 0;
};

struct __declspec(uuid("8c033caa-6cd6-4f73-b728-4531af74945f"))
IVBSAXXMLReader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetentityResolver,put=PutRefentityResolver))
    IVBSAXEntityResolverPtr entityResolver;
    __declspec(property(get=GetcontentHandler,put=PutRefcontentHandler))
    IVBSAXContentHandlerPtr contentHandler;
    __declspec(property(get=GetdtdHandler,put=PutRefdtdHandler))
    IVBSAXDTDHandlerPtr dtdHandler;
    __declspec(property(get=GeterrorHandler,put=PutReferrorHandler))
    IVBSAXErrorHandlerPtr errorHandler;
    __declspec(property(get=GetbaseURL,put=PutbaseURL))
    _bstr_t baseURL;
    __declspec(property(get=GetsecureBaseURL,put=PutsecureBaseURL))
    _bstr_t secureBaseURL;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL getFeature (
        _bstr_t strName );
    HRESULT putFeature (
        _bstr_t strName,
        VARIANT_BOOL fValue );
    _variant_t getProperty (
        _bstr_t strName );
    HRESULT putProperty (
        _bstr_t strName,
        const _variant_t & varValue );
    IVBSAXEntityResolverPtr GetentityResolver ( );
    void PutRefentityResolver (
        struct IVBSAXEntityResolver * oResolver );
    IVBSAXContentHandlerPtr GetcontentHandler ( );
    void PutRefcontentHandler (
        struct IVBSAXContentHandler * oHandler );
    IVBSAXDTDHandlerPtr GetdtdHandler ( );
    void PutRefdtdHandler (
        struct IVBSAXDTDHandler * oHandler );
    IVBSAXErrorHandlerPtr GeterrorHandler ( );
    void PutReferrorHandler (
        struct IVBSAXErrorHandler * oHandler );
    _bstr_t GetbaseURL ( );
    void PutbaseURL (
        _bstr_t strBaseURL );
    _bstr_t GetsecureBaseURL ( );
    void PutsecureBaseURL (
        _bstr_t strSecureBaseURL );
    HRESULT parse (
        const _variant_t & varInput );
    HRESULT parseURL (
        _bstr_t strURL );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_getFeature (
        BSTR strName,
        VARIANT_BOOL * fValue ) = 0;
    virtual HRESULT __stdcall raw_putFeature (
        BSTR strName,
        VARIANT_BOOL fValue ) = 0;
    virtual HRESULT __stdcall raw_getProperty (
        BSTR strName,
        VARIANT * varValue ) = 0;
    virtual HRESULT __stdcall raw_putProperty (
        BSTR strName,
        VARIANT varValue ) = 0;
    virtual HRESULT __stdcall get_entityResolver (
        struct IVBSAXEntityResolver * * oResolver ) = 0;
    virtual HRESULT __stdcall putref_entityResolver (
        struct IVBSAXEntityResolver * oResolver ) = 0;
    virtual HRESULT __stdcall get_contentHandler (
        struct IVBSAXContentHandler * * oHandler ) = 0;
    virtual HRESULT __stdcall putref_contentHandler (
        struct IVBSAXContentHandler * oHandler ) = 0;
    virtual HRESULT __stdcall get_dtdHandler (
        struct IVBSAXDTDHandler * * oHandler ) = 0;
    virtual HRESULT __stdcall putref_dtdHandler (
        struct IVBSAXDTDHandler * oHandler ) = 0;
    virtual HRESULT __stdcall get_errorHandler (
        struct IVBSAXErrorHandler * * oHandler ) = 0;
    virtual HRESULT __stdcall putref_errorHandler (
        struct IVBSAXErrorHandler * oHandler ) = 0;
    virtual HRESULT __stdcall get_baseURL (
        BSTR * strBaseURL ) = 0;
    virtual HRESULT __stdcall put_baseURL (
        BSTR strBaseURL ) = 0;
    virtual HRESULT __stdcall get_secureBaseURL (
        BSTR * strSecureBaseURL ) = 0;
    virtual HRESULT __stdcall put_secureBaseURL (
        BSTR strSecureBaseURL ) = 0;
    virtual HRESULT __stdcall raw_parse (
        VARIANT varInput ) = 0;
    virtual HRESULT __stdcall raw_parseURL (
        BSTR strURL ) = 0;
};

struct __declspec(uuid("0c05d096-f45b-4aca-ad1a-aa0bc25518dc"))
IVBSAXEntityResolver : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _variant_t resolveEntity (
        BSTR * strPublicId,
        BSTR * strSystemId );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_resolveEntity (
        BSTR * strPublicId,
        BSTR * strSystemId,
        VARIANT * varInput ) = 0;
};

struct __declspec(uuid("2ed7290a-4dd5-4b46-bb26-4e4155e77faa"))
IVBSAXContentHandler : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutRefdocumentLocator))
    IVBSAXLocatorPtr documentLocator;

    //
    // Wrapper methods for error-handling
    //

    void PutRefdocumentLocator (
        struct IVBSAXLocator * _arg1 );
    HRESULT startDocument ( );
    HRESULT endDocument ( );
    HRESULT startPrefixMapping (
        BSTR * strPrefix,
        BSTR * strURI );
    HRESULT endPrefixMapping (
        BSTR * strPrefix );
    HRESULT startElement (
        BSTR * strNamespaceURI,
        BSTR * strLocalName,
        BSTR * strQName,
        struct IVBSAXAttributes * oAttributes );
    HRESULT endElement (
        BSTR * strNamespaceURI,
        BSTR * strLocalName,
        BSTR * strQName );
    HRESULT characters (
        BSTR * strChars );
    HRESULT ignorableWhitespace (
        BSTR * strChars );
    HRESULT processingInstruction (
        BSTR * strTarget,
        BSTR * strData );
    HRESULT skippedEntity (
        BSTR * strName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall putref_documentLocator (
        struct IVBSAXLocator * _arg1 ) = 0;
    virtual HRESULT __stdcall raw_startDocument ( ) = 0;
    virtual HRESULT __stdcall raw_endDocument ( ) = 0;
    virtual HRESULT __stdcall raw_startPrefixMapping (
        BSTR * strPrefix,
        BSTR * strURI ) = 0;
    virtual HRESULT __stdcall raw_endPrefixMapping (
        BSTR * strPrefix ) = 0;
    virtual HRESULT __stdcall raw_startElement (
        BSTR * strNamespaceURI,
        BSTR * strLocalName,
        BSTR * strQName,
        struct IVBSAXAttributes * oAttributes ) = 0;
    virtual HRESULT __stdcall raw_endElement (
        BSTR * strNamespaceURI,
        BSTR * strLocalName,
        BSTR * strQName ) = 0;
    virtual HRESULT __stdcall raw_characters (
        BSTR * strChars ) = 0;
    virtual HRESULT __stdcall raw_ignorableWhitespace (
        BSTR * strChars ) = 0;
    virtual HRESULT __stdcall raw_processingInstruction (
        BSTR * strTarget,
        BSTR * strData ) = 0;
    virtual HRESULT __stdcall raw_skippedEntity (
        BSTR * strName ) = 0;
};

struct __declspec(uuid("796e7ac5-5aa2-4eff-acad-3faaf01a3288"))
IVBSAXLocator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcolumnNumber))
    int columnNumber;
    __declspec(property(get=GetlineNumber))
    int lineNumber;
    __declspec(property(get=GetpublicId))
    _bstr_t publicId;
    __declspec(property(get=GetsystemId))
    _bstr_t systemId;

    //
    // Wrapper methods for error-handling
    //

    int GetcolumnNumber ( );
    int GetlineNumber ( );
    _bstr_t GetpublicId ( );
    _bstr_t GetsystemId ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_columnNumber (
        int * nColumn ) = 0;
    virtual HRESULT __stdcall get_lineNumber (
        int * nLine ) = 0;
    virtual HRESULT __stdcall get_publicId (
        BSTR * strPublicId ) = 0;
    virtual HRESULT __stdcall get_systemId (
        BSTR * strSystemId ) = 0;
};

struct __declspec(uuid("10dc0586-132b-4cac-8bb3-db00ac8b7ee0"))
IVBSAXAttributes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getlength))
    int length;

    //
    // Wrapper methods for error-handling
    //

    int Getlength ( );
    _bstr_t getURI (
        int nIndex );
    _bstr_t getLocalName (
        int nIndex );
    _bstr_t getQName (
        int nIndex );
    int getIndexFromName (
        _bstr_t strURI,
        _bstr_t strLocalName );
    int getIndexFromQName (
        _bstr_t strQName );
    _bstr_t getType (
        int nIndex );
    _bstr_t getTypeFromName (
        _bstr_t strURI,
        _bstr_t strLocalName );
    _bstr_t getTypeFromQName (
        _bstr_t strQName );
    _bstr_t getValue (
        int nIndex );
    _bstr_t getValueFromName (
        _bstr_t strURI,
        _bstr_t strLocalName );
    _bstr_t getValueFromQName (
        _bstr_t strQName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_length (
        int * nLength ) = 0;
    virtual HRESULT __stdcall raw_getURI (
        int nIndex,
        BSTR * strURI ) = 0;
    virtual HRESULT __stdcall raw_getLocalName (
        int nIndex,
        BSTR * strLocalName ) = 0;
    virtual HRESULT __stdcall raw_getQName (
        int nIndex,
        BSTR * strQName ) = 0;
    virtual HRESULT __stdcall raw_getIndexFromName (
        BSTR strURI,
        BSTR strLocalName,
        int * nIndex ) = 0;
    virtual HRESULT __stdcall raw_getIndexFromQName (
        BSTR strQName,
        int * nIndex ) = 0;
    virtual HRESULT __stdcall raw_getType (
        int nIndex,
        BSTR * strType ) = 0;
    virtual HRESULT __stdcall raw_getTypeFromName (
        BSTR strURI,
        BSTR strLocalName,
        BSTR * strType ) = 0;
    virtual HRESULT __stdcall raw_getTypeFromQName (
        BSTR strQName,
        BSTR * strType ) = 0;
    virtual HRESULT __stdcall raw_getValue (
        int nIndex,
        BSTR * strValue ) = 0;
    virtual HRESULT __stdcall raw_getValueFromName (
        BSTR strURI,
        BSTR strLocalName,
        BSTR * strValue ) = 0;
    virtual HRESULT __stdcall raw_getValueFromQName (
        BSTR strQName,
        BSTR * strValue ) = 0;
};

struct __declspec(uuid("24fb3297-302d-4620-ba39-3a732d850558"))
IVBSAXDTDHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT notationDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId );
    HRESULT unparsedEntityDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId,
        BSTR * strNotationName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_notationDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId ) = 0;
    virtual HRESULT __stdcall raw_unparsedEntityDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId,
        BSTR * strNotationName ) = 0;
};

struct __declspec(uuid("d963d3fe-173c-4862-9095-b92f66995f52"))
IVBSAXErrorHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT error (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode );
    HRESULT fatalError (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode );
    HRESULT ignorableWarning (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_error (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode ) = 0;
    virtual HRESULT __stdcall raw_fatalError (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode ) = 0;
    virtual HRESULT __stdcall raw_ignorableWarning (
        struct IVBSAXLocator * oLocator,
        BSTR * strErrorMessage,
        long nErrorCode ) = 0;
};

struct __declspec(uuid("1299eb1b-5b88-433e-82de-82ca75ad4e04"))
IVBSAXXMLFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getparent,put=PutRefparent))
    IVBSAXXMLReaderPtr parent;

    //
    // Wrapper methods for error-handling
    //

    IVBSAXXMLReaderPtr Getparent ( );
    void PutRefparent (
        struct IVBSAXXMLReader * oReader );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_parent (
        struct IVBSAXXMLReader * * oReader ) = 0;
    virtual HRESULT __stdcall putref_parent (
        struct IVBSAXXMLReader * oReader ) = 0;
};

struct __declspec(uuid("032aac35-8c0e-4d9d-979f-e3b702935576"))
IVBSAXLexicalHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT startDTD (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId );
    HRESULT endDTD ( );
    HRESULT startEntity (
        BSTR * strName );
    HRESULT endEntity (
        BSTR * strName );
    HRESULT startCDATA ( );
    HRESULT endCDATA ( );
    HRESULT comment (
        BSTR * strChars );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_startDTD (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId ) = 0;
    virtual HRESULT __stdcall raw_endDTD ( ) = 0;
    virtual HRESULT __stdcall raw_startEntity (
        BSTR * strName ) = 0;
    virtual HRESULT __stdcall raw_endEntity (
        BSTR * strName ) = 0;
    virtual HRESULT __stdcall raw_startCDATA ( ) = 0;
    virtual HRESULT __stdcall raw_endCDATA ( ) = 0;
    virtual HRESULT __stdcall raw_comment (
        BSTR * strChars ) = 0;
};

struct __declspec(uuid("e8917260-7579-4be1-b5dd-7afbfa6f077b"))
IVBSAXDeclHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT elementDecl (
        BSTR * strName,
        BSTR * strModel );
    HRESULT attributeDecl (
        BSTR * strElementName,
        BSTR * strAttributeName,
        BSTR * strType,
        BSTR * strValueDefault,
        BSTR * strValue );
    HRESULT internalEntityDecl (
        BSTR * strName,
        BSTR * strValue );
    HRESULT externalEntityDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_elementDecl (
        BSTR * strName,
        BSTR * strModel ) = 0;
    virtual HRESULT __stdcall raw_attributeDecl (
        BSTR * strElementName,
        BSTR * strAttributeName,
        BSTR * strType,
        BSTR * strValueDefault,
        BSTR * strValue ) = 0;
    virtual HRESULT __stdcall raw_internalEntityDecl (
        BSTR * strName,
        BSTR * strValue ) = 0;
    virtual HRESULT __stdcall raw_externalEntityDecl (
        BSTR * strName,
        BSTR * strPublicId,
        BSTR * strSystemId ) = 0;
};

struct __declspec(uuid("4d7ff4ba-1565-4ea8-94e1-6e724a46f98d"))
IMXWriter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getoutput,put=Putoutput))
    _variant_t output;
    __declspec(property(get=Getencoding,put=Putencoding))
    _bstr_t encoding;
    __declspec(property(get=GetbyteOrderMark,put=PutbyteOrderMark))
    VARIANT_BOOL byteOrderMark;
    __declspec(property(get=Getindent,put=Putindent))
    VARIANT_BOOL indent;
    __declspec(property(get=Getstandalone,put=Putstandalone))
    VARIANT_BOOL standalone;
    __declspec(property(get=GetomitXMLDeclaration,put=PutomitXMLDeclaration))
    VARIANT_BOOL omitXMLDeclaration;
    __declspec(property(get=Getversion,put=Putversion))
    _bstr_t version;
    __declspec(property(get=GetdisableOutputEscaping,put=PutdisableOutputEscaping))
    VARIANT_BOOL disableOutputEscaping;

    //
    // Wrapper methods for error-handling
    //

    void Putoutput (
        const _variant_t & varDestination );
    _variant_t Getoutput ( );
    void Putencoding (
        _bstr_t strEncoding );
    _bstr_t Getencoding ( );
    void PutbyteOrderMark (
        VARIANT_BOOL fWriteByteOrderMark );
    VARIANT_BOOL GetbyteOrderMark ( );
    void Putindent (
        VARIANT_BOOL fIndentMode );
    VARIANT_BOOL Getindent ( );
    void Putstandalone (
        VARIANT_BOOL fValue );
    VARIANT_BOOL Getstandalone ( );
    void PutomitXMLDeclaration (
        VARIANT_BOOL fValue );
    VARIANT_BOOL GetomitXMLDeclaration ( );
    void Putversion (
        _bstr_t strVersion );
    _bstr_t Getversion ( );
    void PutdisableOutputEscaping (
        VARIANT_BOOL fValue );
    VARIANT_BOOL GetdisableOutputEscaping ( );
    HRESULT flush ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_output (
        VARIANT varDestination ) = 0;
    virtual HRESULT __stdcall get_output (
        VARIANT * varDestination ) = 0;
    virtual HRESULT __stdcall put_encoding (
        BSTR strEncoding ) = 0;
    virtual HRESULT __stdcall get_encoding (
        BSTR * strEncoding ) = 0;
    virtual HRESULT __stdcall put_byteOrderMark (
        VARIANT_BOOL fWriteByteOrderMark ) = 0;
    virtual HRESULT __stdcall get_byteOrderMark (
        VARIANT_BOOL * fWriteByteOrderMark ) = 0;
    virtual HRESULT __stdcall put_indent (
        VARIANT_BOOL fIndentMode ) = 0;
    virtual HRESULT __stdcall get_indent (
        VARIANT_BOOL * fIndentMode ) = 0;
    virtual HRESULT __stdcall put_standalone (
        VARIANT_BOOL fValue ) = 0;
    virtual HRESULT __stdcall get_standalone (
        VARIANT_BOOL * fValue ) = 0;
    virtual HRESULT __stdcall put_omitXMLDeclaration (
        VARIANT_BOOL fValue ) = 0;
    virtual HRESULT __stdcall get_omitXMLDeclaration (
        VARIANT_BOOL * fValue ) = 0;
    virtual HRESULT __stdcall put_version (
        BSTR strVersion ) = 0;
    virtual HRESULT __stdcall get_version (
        BSTR * strVersion ) = 0;
    virtual HRESULT __stdcall put_disableOutputEscaping (
        VARIANT_BOOL fValue ) = 0;
    virtual HRESULT __stdcall get_disableOutputEscaping (
        VARIANT_BOOL * fValue ) = 0;
    virtual HRESULT __stdcall raw_flush ( ) = 0;
};

struct __declspec(uuid("f10d27cc-3ec0-415c-8ed8-77ab1c5e7262"))
IMXAttributes : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT addAttribute (
        _bstr_t strURI,
        _bstr_t strLocalName,
        _bstr_t strQName,
        _bstr_t strType,
        _bstr_t strValue );
    HRESULT addAttributeFromIndex (
        const _variant_t & varAtts,
        int nIndex );
    HRESULT clear ( );
    HRESULT removeAttribute (
        int nIndex );
    HRESULT setAttribute (
        int nIndex,
        _bstr_t strURI,
        _bstr_t strLocalName,
        _bstr_t strQName,
        _bstr_t strType,
        _bstr_t strValue );
    HRESULT setAttributes (
        const _variant_t & varAtts );
    HRESULT setLocalName (
        int nIndex,
        _bstr_t strLocalName );
    HRESULT setQName (
        int nIndex,
        _bstr_t strQName );
    HRESULT setType (
        int nIndex,
        _bstr_t strType );
    HRESULT setURI (
        int nIndex,
        _bstr_t strURI );
    HRESULT setValue (
        int nIndex,
        _bstr_t strValue );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_addAttribute (
        BSTR strURI,
        BSTR strLocalName,
        BSTR strQName,
        BSTR strType,
        BSTR strValue ) = 0;
    virtual HRESULT __stdcall raw_addAttributeFromIndex (
        VARIANT varAtts,
        int nIndex ) = 0;
    virtual HRESULT __stdcall raw_clear ( ) = 0;
    virtual HRESULT __stdcall raw_removeAttribute (
        int nIndex ) = 0;
    virtual HRESULT __stdcall raw_setAttribute (
        int nIndex,
        BSTR strURI,
        BSTR strLocalName,
        BSTR strQName,
        BSTR strType,
        BSTR strValue ) = 0;
    virtual HRESULT __stdcall raw_setAttributes (
        VARIANT varAtts ) = 0;
    virtual HRESULT __stdcall raw_setLocalName (
        int nIndex,
        BSTR strLocalName ) = 0;
    virtual HRESULT __stdcall raw_setQName (
        int nIndex,
        BSTR strQName ) = 0;
    virtual HRESULT __stdcall raw_setType (
        int nIndex,
        BSTR strType ) = 0;
    virtual HRESULT __stdcall raw_setURI (
        int nIndex,
        BSTR strURI ) = 0;
    virtual HRESULT __stdcall raw_setValue (
        int nIndex,
        BSTR strValue ) = 0;
};

struct __declspec(uuid("808f4e35-8d5a-4fbe-8466-33a41279ed30"))
IMXReaderControl : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT abort ( );
    HRESULT resume ( );
    HRESULT suspend ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_abort ( ) = 0;
    virtual HRESULT __stdcall raw_resume ( ) = 0;
    virtual HRESULT __stdcall raw_suspend ( ) = 0;
};

struct __declspec(uuid("fa4bb38c-faf9-4cca-9302-d1dd0fe520db"))
IMXSchemaDeclHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT schemaElementDecl (
        struct ISchemaElement * oSchemaElement );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_schemaElementDecl (
        struct ISchemaElement * oSchemaElement ) = 0;
};

struct __declspec(uuid("50ea08b3-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getid))
    _bstr_t id;
    __declspec(property(get=GetitemType))
    SOMITEMTYPE itemType;
    __declspec(property(get=GetunhandledAttributes))
    IVBSAXAttributesPtr unhandledAttributes;
    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=GetnamespaceURI))
    _bstr_t namespaceURI;
    __declspec(property(get=Getschema))
    ISchemaPtr schema;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getname ( );
    _bstr_t GetnamespaceURI ( );
    ISchemaPtr Getschema ( );
    _bstr_t Getid ( );
    SOMITEMTYPE GetitemType ( );
    IVBSAXAttributesPtr GetunhandledAttributes ( );
    VARIANT_BOOL writeAnnotation (
        IUnknown * annotationSink );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_name (
        BSTR * name ) = 0;
    virtual HRESULT __stdcall get_namespaceURI (
        BSTR * namespaceURI ) = 0;
    virtual HRESULT __stdcall get_schema (
        struct ISchema * * schema ) = 0;
    virtual HRESULT __stdcall get_id (
        BSTR * id ) = 0;
    virtual HRESULT __stdcall get_itemType (
        SOMITEMTYPE * itemType ) = 0;
    virtual HRESULT __stdcall get_unhandledAttributes (
        struct IVBSAXAttributes * * attributes ) = 0;
    virtual HRESULT __stdcall raw_writeAnnotation (
        IUnknown * annotationSink,
        VARIANT_BOOL * isWritten ) = 0;
};

struct __declspec(uuid("50ea08b5-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaParticle : ISchemaItem
{
    //
    // Property data
    //

    __declspec(property(get=GetmaxOccurs))
    _variant_t maxOccurs;
    __declspec(property(get=GetminOccurs))
    _variant_t minOccurs;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetminOccurs ( );
    _variant_t GetmaxOccurs ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_minOccurs (
        VARIANT * minOccurs ) = 0;
    virtual HRESULT __stdcall get_maxOccurs (
        VARIANT * maxOccurs ) = 0;
};

struct __declspec(uuid("50ea08b7-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaElement : ISchemaParticle
{
    //
    // Property data
    //

    __declspec(property(get=GetsubstitutionGroupExclusions))
    SCHEMADERIVATIONMETHOD substitutionGroupExclusions;
    __declspec(property(get=GetidentityConstraints))
    ISchemaItemCollectionPtr identityConstraints;
    __declspec(property(get=GetisAbstract))
    VARIANT_BOOL isAbstract;
    __declspec(property(get=GetisNillable))
    VARIANT_BOOL isNillable;
    __declspec(property(get=Gettype))
    ISchemaTypePtr type;
    __declspec(property(get=GetisReference))
    VARIANT_BOOL isReference;
    __declspec(property(get=GetdefaultValue))
    _bstr_t defaultValue;
    __declspec(property(get=GetdisallowedSubstitutions))
    SCHEMADERIVATIONMETHOD disallowedSubstitutions;
    __declspec(property(get=Getscope))
    ISchemaComplexTypePtr scope;
    __declspec(property(get=GetfixedValue))
    _bstr_t fixedValue;
    __declspec(property(get=GetsubstitutionGroup))
    ISchemaElementPtr substitutionGroup;

    //
    // Wrapper methods for error-handling
    //

    ISchemaTypePtr Gettype ( );
    ISchemaComplexTypePtr Getscope ( );
    _bstr_t GetdefaultValue ( );
    _bstr_t GetfixedValue ( );
    VARIANT_BOOL GetisNillable ( );
    ISchemaItemCollectionPtr GetidentityConstraints ( );
    ISchemaElementPtr GetsubstitutionGroup ( );
    SCHEMADERIVATIONMETHOD GetsubstitutionGroupExclusions ( );
    SCHEMADERIVATIONMETHOD GetdisallowedSubstitutions ( );
    VARIANT_BOOL GetisAbstract ( );
    VARIANT_BOOL GetisReference ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_type (
        struct ISchemaType * * type ) = 0;
    virtual HRESULT __stdcall get_scope (
        struct ISchemaComplexType * * scope ) = 0;
    virtual HRESULT __stdcall get_defaultValue (
        BSTR * defaultValue ) = 0;
    virtual HRESULT __stdcall get_fixedValue (
        BSTR * fixedValue ) = 0;
    virtual HRESULT __stdcall get_isNillable (
        VARIANT_BOOL * nillable ) = 0;
    virtual HRESULT __stdcall get_identityConstraints (
        struct ISchemaItemCollection * * constraints ) = 0;
    virtual HRESULT __stdcall get_substitutionGroup (
        struct ISchemaElement * * element ) = 0;
    virtual HRESULT __stdcall get_substitutionGroupExclusions (
        SCHEMADERIVATIONMETHOD * exclusions ) = 0;
    virtual HRESULT __stdcall get_disallowedSubstitutions (
        SCHEMADERIVATIONMETHOD * disallowed ) = 0;
    virtual HRESULT __stdcall get_isAbstract (
        VARIANT_BOOL * abstract ) = 0;
    virtual HRESULT __stdcall get_isReference (
        VARIANT_BOOL * reference ) = 0;
};

struct __declspec(uuid("50ea08b4-dd1b-4664-9a50-c2f40f4bd79a"))
ISchema : ISchemaItem
{
    //
    // Property data
    //

    __declspec(property(get=GettargetNamespace))
    _bstr_t targetNamespace;
    __declspec(property(get=Gettypes))
    ISchemaItemCollectionPtr types;
    __declspec(property(get=Getversion))
    _bstr_t version;
    __declspec(property(get=GetmodelGroups))
    ISchemaItemCollectionPtr modelGroups;
    __declspec(property(get=GetattributeGroups))
    ISchemaItemCollectionPtr attributeGroups;
    __declspec(property(get=Getattributes))
    ISchemaItemCollectionPtr attributes;
    __declspec(property(get=Getnotations))
    ISchemaItemCollectionPtr notations;
    __declspec(property(get=Getelements))
    ISchemaItemCollectionPtr elements;
    __declspec(property(get=GetschemaLocations))
    ISchemaStringCollectionPtr schemaLocations;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GettargetNamespace ( );
    _bstr_t Getversion ( );
    ISchemaItemCollectionPtr Gettypes ( );
    ISchemaItemCollectionPtr Getelements ( );
    ISchemaItemCollectionPtr Getattributes ( );
    ISchemaItemCollectionPtr GetattributeGroups ( );
    ISchemaItemCollectionPtr GetmodelGroups ( );
    ISchemaItemCollectionPtr Getnotations ( );
    ISchemaStringCollectionPtr GetschemaLocations ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_targetNamespace (
        BSTR * targetNamespace ) = 0;
    virtual HRESULT __stdcall get_version (
        BSTR * version ) = 0;
    virtual HRESULT __stdcall get_types (
        struct ISchemaItemCollection * * types ) = 0;
    virtual HRESULT __stdcall get_elements (
        struct ISchemaItemCollection * * elements ) = 0;
    virtual HRESULT __stdcall get_attributes (
        struct ISchemaItemCollection * * attributes ) = 0;
    virtual HRESULT __stdcall get_attributeGroups (
        struct ISchemaItemCollection * * attributeGroups ) = 0;
    virtual HRESULT __stdcall get_modelGroups (
        struct ISchemaItemCollection * * modelGroups ) = 0;
    virtual HRESULT __stdcall get_notations (
        struct ISchemaItemCollection * * notations ) = 0;
    virtual HRESULT __stdcall get_schemaLocations (
        struct ISchemaStringCollection * * schemaLocations ) = 0;
};

struct __declspec(uuid("50ea08b2-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaItemCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getitem))
    ISchemaItemPtr item[];
    __declspec(property(get=Getlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    //
    // Wrapper methods for error-handling
    //

    ISchemaItemPtr Getitem (
        long index );
    ISchemaItemPtr itemByName (
        _bstr_t name );
    ISchemaItemPtr itemByQName (
        _bstr_t name,
        _bstr_t namespaceURI );
    long Getlength ( );
    IUnknownPtr Get_newEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_item (
        long index,
        struct ISchemaItem * * item ) = 0;
    virtual HRESULT __stdcall raw_itemByName (
        BSTR name,
        struct ISchemaItem * * item ) = 0;
    virtual HRESULT __stdcall raw_itemByQName (
        BSTR name,
        BSTR namespaceURI,
        struct ISchemaItem * * item ) = 0;
    virtual HRESULT __stdcall get_length (
        long * length ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("50ea08b1-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaStringCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getitem))
    _bstr_t item[];
    __declspec(property(get=Getlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getitem (
        long index );
    long Getlength ( );
    IUnknownPtr Get_newEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_item (
        long index,
        BSTR * bstr ) = 0;
    virtual HRESULT __stdcall get_length (
        long * length ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
};

enum _SOMITEMTYPE
{
    SOMITEM_SCHEMA = 4096,
    SOMITEM_ATTRIBUTE = 4097,
    SOMITEM_ATTRIBUTEGROUP = 4098,
    SOMITEM_NOTATION = 4099,
    SOMITEM_IDENTITYCONSTRAINT = 4352,
    SOMITEM_KEY = 4353,
    SOMITEM_KEYREF = 4354,
    SOMITEM_UNIQUE = 4355,
    SOMITEM_ANYTYPE = 8192,
    SOMITEM_DATATYPE = 8448,
    SOMITEM_DATATYPE_ANYTYPE = 8449,
    SOMITEM_DATATYPE_ANYURI = 8450,
    SOMITEM_DATATYPE_BASE64BINARY = 8451,
    SOMITEM_DATATYPE_BOOLEAN = 8452,
    SOMITEM_DATATYPE_BYTE = 8453,
    SOMITEM_DATATYPE_DATE = 8454,
    SOMITEM_DATATYPE_DATETIME = 8455,
    SOMITEM_DATATYPE_DAY = 8456,
    SOMITEM_DATATYPE_DECIMAL = 8457,
    SOMITEM_DATATYPE_DOUBLE = 8458,
    SOMITEM_DATATYPE_DURATION = 8459,
    SOMITEM_DATATYPE_ENTITIES = 8460,
    SOMITEM_DATATYPE_ENTITY = 8461,
    SOMITEM_DATATYPE_FLOAT = 8462,
    SOMITEM_DATATYPE_HEXBINARY = 8463,
    SOMITEM_DATATYPE_ID = 8464,
    SOMITEM_DATATYPE_IDREF = 8465,
    SOMITEM_DATATYPE_IDREFS = 8466,
    SOMITEM_DATATYPE_INT = 8467,
    SOMITEM_DATATYPE_INTEGER = 8468,
    SOMITEM_DATATYPE_LANGUAGE = 8469,
    SOMITEM_DATATYPE_LONG = 8470,
    SOMITEM_DATATYPE_MONTH = 8471,
    SOMITEM_DATATYPE_MONTHDAY = 8472,
    SOMITEM_DATATYPE_NAME = 8473,
    SOMITEM_DATATYPE_NCNAME = 8474,
    SOMITEM_DATATYPE_NEGATIVEINTEGER = 8475,
    SOMITEM_DATATYPE_NMTOKEN = 8476,
    SOMITEM_DATATYPE_NMTOKENS = 8477,
    SOMITEM_DATATYPE_NONNEGATIVEINTEGER = 8478,
    SOMITEM_DATATYPE_NONPOSITIVEINTEGER = 8479,
    SOMITEM_DATATYPE_NORMALIZEDSTRING = 8480,
    SOMITEM_DATATYPE_NOTATION = 8481,
    SOMITEM_DATATYPE_POSITIVEINTEGER = 8482,
    SOMITEM_DATATYPE_QNAME = 8483,
    SOMITEM_DATATYPE_SHORT = 8484,
    SOMITEM_DATATYPE_STRING = 8485,
    SOMITEM_DATATYPE_TIME = 8486,
    SOMITEM_DATATYPE_TOKEN = 8487,
    SOMITEM_DATATYPE_UNSIGNEDBYTE = 8488,
    SOMITEM_DATATYPE_UNSIGNEDINT = 8489,
    SOMITEM_DATATYPE_UNSIGNEDLONG = 8490,
    SOMITEM_DATATYPE_UNSIGNEDSHORT = 8491,
    SOMITEM_DATATYPE_YEAR = 8492,
    SOMITEM_DATATYPE_YEARMONTH = 8493,
    SOMITEM_DATATYPE_ANYSIMPLETYPE = 8703,
    SOMITEM_SIMPLETYPE = 8704,
    SOMITEM_COMPLEXTYPE = 9216,
    SOMITEM_PARTICLE = 16384,
    SOMITEM_ANY = 16385,
    SOMITEM_ANYATTRIBUTE = 16386,
    SOMITEM_ELEMENT = 16387,
    SOMITEM_GROUP = 16640,
    SOMITEM_ALL = 16641,
    SOMITEM_CHOICE = 16642,
    SOMITEM_SEQUENCE = 16643,
    SOMITEM_EMPTYPARTICLE = 16644,
    SOMITEM_NULL = 2048,
    SOMITEM_NULL_TYPE = 10240,
    SOMITEM_NULL_ANY = 18433,
    SOMITEM_NULL_ANYATTRIBUTE = 18434,
    SOMITEM_NULL_ELEMENT = 18435
};

struct __declspec(uuid("50ea08b8-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaType : ISchemaItem
{
    //
    // Property data
    //

    __declspec(property(get=GettotalDigits))
    _variant_t totalDigits;
    __declspec(property(get=Getlength))
    _variant_t length;
    __declspec(property(get=Getvariety))
    SCHEMATYPEVARIETY variety;
    __declspec(property(get=GetmaxExclusive))
    _bstr_t maxExclusive;
    __declspec(property(get=GetmaxInclusive))
    _bstr_t maxInclusive;
    __declspec(property(get=GetmaxLength))
    _variant_t maxLength;
    __declspec(property(get=GetminExclusive))
    _bstr_t minExclusive;
    __declspec(property(get=GetminInclusive))
    _bstr_t minInclusive;
    __declspec(property(get=GetminLength))
    _variant_t minLength;
    __declspec(property(get=Getwhitespace))
    SCHEMAWHITESPACE whitespace;
    __declspec(property(get=GetbaseTypes))
    ISchemaItemCollectionPtr baseTypes;
    __declspec(property(get=Getpatterns))
    ISchemaStringCollectionPtr patterns;
    __declspec(property(get=GetderivedBy))
    SCHEMADERIVATIONMETHOD derivedBy;
    __declspec(property(get=Getenumeration))
    ISchemaStringCollectionPtr enumeration;
    __declspec(property(get=Getfinal))
    SCHEMADERIVATIONMETHOD final;
    __declspec(property(get=GetfractionDigits))
    _variant_t fractionDigits;

    //
    // Wrapper methods for error-handling
    //

    ISchemaItemCollectionPtr GetbaseTypes ( );
    SCHEMADERIVATIONMETHOD Getfinal ( );
    SCHEMATYPEVARIETY Getvariety ( );
    SCHEMADERIVATIONMETHOD GetderivedBy ( );
    VARIANT_BOOL isValid (
        _bstr_t data );
    _bstr_t GetminExclusive ( );
    _bstr_t GetminInclusive ( );
    _bstr_t GetmaxExclusive ( );
    _bstr_t GetmaxInclusive ( );
    _variant_t GettotalDigits ( );
    _variant_t GetfractionDigits ( );
    _variant_t Getlength ( );
    _variant_t GetminLength ( );
    _variant_t GetmaxLength ( );
    ISchemaStringCollectionPtr Getenumeration ( );
    SCHEMAWHITESPACE Getwhitespace ( );
    ISchemaStringCollectionPtr Getpatterns ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_baseTypes (
        struct ISchemaItemCollection * * baseTypes ) = 0;
    virtual HRESULT __stdcall get_final (
        SCHEMADERIVATIONMETHOD * final ) = 0;
    virtual HRESULT __stdcall get_variety (
        SCHEMATYPEVARIETY * variety ) = 0;
    virtual HRESULT __stdcall get_derivedBy (
        SCHEMADERIVATIONMETHOD * derivedBy ) = 0;
    virtual HRESULT __stdcall raw_isValid (
        BSTR data,
        VARIANT_BOOL * valid ) = 0;
    virtual HRESULT __stdcall get_minExclusive (
        BSTR * minExclusive ) = 0;
    virtual HRESULT __stdcall get_minInclusive (
        BSTR * minInclusive ) = 0;
    virtual HRESULT __stdcall get_maxExclusive (
        BSTR * maxExclusive ) = 0;
    virtual HRESULT __stdcall get_maxInclusive (
        BSTR * maxInclusive ) = 0;
    virtual HRESULT __stdcall get_totalDigits (
        VARIANT * totalDigits ) = 0;
    virtual HRESULT __stdcall get_fractionDigits (
        VARIANT * fractionDigits ) = 0;
    virtual HRESULT __stdcall get_length (
        VARIANT * length ) = 0;
    virtual HRESULT __stdcall get_minLength (
        VARIANT * minLength ) = 0;
    virtual HRESULT __stdcall get_maxLength (
        VARIANT * maxLength ) = 0;
    virtual HRESULT __stdcall get_enumeration (
        struct ISchemaStringCollection * * enumeration ) = 0;
    virtual HRESULT __stdcall get_whitespace (
        SCHEMAWHITESPACE * whitespace ) = 0;
    virtual HRESULT __stdcall get_patterns (
        struct ISchemaStringCollection * * patterns ) = 0;
};

enum _SCHEMADERIVATIONMETHOD
{
    SCHEMADERIVATIONMETHOD_EMPTY = 0,
    SCHEMADERIVATIONMETHOD_SUBSTITUTION = 1,
    SCHEMADERIVATIONMETHOD_EXTENSION = 2,
    SCHEMADERIVATIONMETHOD_RESTRICTION = 4,
    SCHEMADERIVATIONMETHOD_LIST = 8,
    SCHEMADERIVATIONMETHOD_UNION = 16,
    SCHEMADERIVATIONMETHOD_ALL = 255,
    SCHEMADERIVATIONMETHOD_NONE = 256
};

enum _SCHEMATYPEVARIETY
{
    SCHEMATYPEVARIETY_NONE = -1,
    SCHEMATYPEVARIETY_ATOMIC = 0,
    SCHEMATYPEVARIETY_LIST = 1,
    SCHEMATYPEVARIETY_UNION = 2
};

enum _SCHEMAWHITESPACE
{
    SCHEMAWHITESPACE_NONE = -1,
    SCHEMAWHITESPACE_PRESERVE = 0,
    SCHEMAWHITESPACE_REPLACE = 1,
    SCHEMAWHITESPACE_COLLAPSE = 2
};

struct __declspec(uuid("50ea08b9-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaComplexType : ISchemaType
{
    //
    // Property data
    //

    __declspec(property(get=GetisAbstract))
    VARIANT_BOOL isAbstract;
    __declspec(property(get=GetanyAttribute))
    ISchemaAnyPtr anyAttribute;
    __declspec(property(get=Getattributes))
    ISchemaItemCollectionPtr attributes;
    __declspec(property(get=GetcontentModel))
    ISchemaModelGroupPtr contentModel;
    __declspec(property(get=GetcontentType))
    SCHEMACONTENTTYPE contentType;
    __declspec(property(get=GetprohibitedSubstitutions))
    SCHEMADERIVATIONMETHOD prohibitedSubstitutions;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetisAbstract ( );
    ISchemaAnyPtr GetanyAttribute ( );
    ISchemaItemCollectionPtr Getattributes ( );
    SCHEMACONTENTTYPE GetcontentType ( );
    ISchemaModelGroupPtr GetcontentModel ( );
    SCHEMADERIVATIONMETHOD GetprohibitedSubstitutions ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_isAbstract (
        VARIANT_BOOL * abstract ) = 0;
    virtual HRESULT __stdcall get_anyAttribute (
        struct ISchemaAny * * anyAttribute ) = 0;
    virtual HRESULT __stdcall get_attributes (
        struct ISchemaItemCollection * * attributes ) = 0;
    virtual HRESULT __stdcall get_contentType (
        SCHEMACONTENTTYPE * contentType ) = 0;
    virtual HRESULT __stdcall get_contentModel (
        struct ISchemaModelGroup * * contentModel ) = 0;
    virtual HRESULT __stdcall get_prohibitedSubstitutions (
        SCHEMADERIVATIONMETHOD * prohibited ) = 0;
};

struct __declspec(uuid("50ea08bc-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaAny : ISchemaParticle
{
    //
    // Property data
    //

    __declspec(property(get=Getnamespaces))
    ISchemaStringCollectionPtr namespaces;
    __declspec(property(get=GetprocessContents))
    SCHEMAPROCESSCONTENTS processContents;

    //
    // Wrapper methods for error-handling
    //

    ISchemaStringCollectionPtr Getnamespaces ( );
    SCHEMAPROCESSCONTENTS GetprocessContents ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_namespaces (
        struct ISchemaStringCollection * * namespaces ) = 0;
    virtual HRESULT __stdcall get_processContents (
        SCHEMAPROCESSCONTENTS * processContents ) = 0;
};

enum _SCHEMAPROCESSCONTENTS
{
    SCHEMAPROCESSCONTENTS_NONE = 0,
    SCHEMAPROCESSCONTENTS_SKIP = 1,
    SCHEMAPROCESSCONTENTS_LAX = 2,
    SCHEMAPROCESSCONTENTS_STRICT = 3
};

enum _SCHEMACONTENTTYPE
{
    SCHEMACONTENTTYPE_EMPTY = 0,
    SCHEMACONTENTTYPE_TEXTONLY = 1,
    SCHEMACONTENTTYPE_ELEMENTONLY = 2,
    SCHEMACONTENTTYPE_MIXED = 3
};

struct __declspec(uuid("50ea08bb-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaModelGroup : ISchemaParticle
{
    //
    // Property data
    //

    __declspec(property(get=Getparticles))
    ISchemaItemCollectionPtr particles;

    //
    // Wrapper methods for error-handling
    //

    ISchemaItemCollectionPtr Getparticles ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_particles (
        struct ISchemaItemCollection * * particles ) = 0;
};

struct __declspec(uuid("50ea08b0-dd1b-4664-9a50-c2f40f4bd79a"))
IXMLDOMSchemaCollection2 : IXMLDOMSchemaCollection
{
    //
    // Property data
    //

    __declspec(property(get=GetvalidateOnLoad,put=PutvalidateOnLoad))
    VARIANT_BOOL validateOnLoad;

    //
    // Wrapper methods for error-handling
    //

    HRESULT validate ( );
    void PutvalidateOnLoad (
        VARIANT_BOOL validateOnLoad );
    VARIANT_BOOL GetvalidateOnLoad ( );
    ISchemaPtr getSchema (
        _bstr_t namespaceURI );
    ISchemaItemPtr getDeclaration (
        struct IXMLDOMNode * node );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_validate ( ) = 0;
    virtual HRESULT __stdcall put_validateOnLoad (
        VARIANT_BOOL validateOnLoad ) = 0;
    virtual HRESULT __stdcall get_validateOnLoad (
        VARIANT_BOOL * validateOnLoad ) = 0;
    virtual HRESULT __stdcall raw_getSchema (
        BSTR namespaceURI,
        struct ISchema * * schema ) = 0;
    virtual HRESULT __stdcall raw_getDeclaration (
        struct IXMLDOMNode * node,
        struct ISchemaItem * * item ) = 0;
};

struct __declspec(uuid("50ea08b6-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaAttribute : ISchemaItem
{
    //
    // Property data
    //

    __declspec(property(get=Gettype))
    ISchemaTypePtr type;
    __declspec(property(get=GetisReference))
    VARIANT_BOOL isReference;
    __declspec(property(get=Getuse))
    SCHEMAUSE use;
    __declspec(property(get=GetdefaultValue))
    _bstr_t defaultValue;
    __declspec(property(get=Getscope))
    ISchemaComplexTypePtr scope;
    __declspec(property(get=GetfixedValue))
    _bstr_t fixedValue;

    //
    // Wrapper methods for error-handling
    //

    ISchemaTypePtr Gettype ( );
    ISchemaComplexTypePtr Getscope ( );
    _bstr_t GetdefaultValue ( );
    _bstr_t GetfixedValue ( );
    SCHEMAUSE Getuse ( );
    VARIANT_BOOL GetisReference ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_type (
        struct ISchemaType * * type ) = 0;
    virtual HRESULT __stdcall get_scope (
        struct ISchemaComplexType * * scope ) = 0;
    virtual HRESULT __stdcall get_defaultValue (
        BSTR * defaultValue ) = 0;
    virtual HRESULT __stdcall get_fixedValue (
        BSTR * fixedValue ) = 0;
    virtual HRESULT __stdcall get_use (
        SCHEMAUSE * use ) = 0;
    virtual HRESULT __stdcall get_isReference (
        VARIANT_BOOL * reference ) = 0;
};

enum _SCHEMAUSE
{
    SCHEMAUSE_OPTIONAL = 0,
    SCHEMAUSE_PROHIBITED = 1,
    SCHEMAUSE_REQUIRED = 2
};

struct __declspec(uuid("50ea08ba-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaAttributeGroup : ISchemaItem
{
    //
    // Property data
    //

    __declspec(property(get=GetanyAttribute))
    ISchemaAnyPtr anyAttribute;
    __declspec(property(get=Getattributes))
    ISchemaItemCollectionPtr attributes;

    //
    // Wrapper methods for error-handling
    //

    ISchemaAnyPtr GetanyAttribute ( );
    ISchemaItemCollectionPtr Getattributes ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_anyAttribute (
        struct ISchemaAny * * anyAttribute ) = 0;
    virtual HRESULT __stdcall get_attributes (
        struct ISchemaItemCollection * * attributes ) = 0;
};

struct __declspec(uuid("50ea08bd-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaIdentityConstraint : ISchemaItem
{
    //
    // Property data
    //

    __declspec(property(get=GetreferencedKey))
    ISchemaIdentityConstraintPtr referencedKey;
    __declspec(property(get=Getfields))
    ISchemaStringCollectionPtr fields;
    __declspec(property(get=Getselector))
    _bstr_t selector;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getselector ( );
    ISchemaStringCollectionPtr Getfields ( );
    ISchemaIdentityConstraintPtr GetreferencedKey ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_selector (
        BSTR * selector ) = 0;
    virtual HRESULT __stdcall get_fields (
        struct ISchemaStringCollection * * fields ) = 0;
    virtual HRESULT __stdcall get_referencedKey (
        struct ISchemaIdentityConstraint * * key ) = 0;
};

struct __declspec(uuid("50ea08be-dd1b-4664-9a50-c2f40f4bd79a"))
ISchemaNotation : ISchemaItem
{
    //
    // Property data
    //

    __declspec(property(get=GetsystemIdentifier))
    _bstr_t systemIdentifier;
    __declspec(property(get=GetpublicIdentifier))
    _bstr_t publicIdentifier;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetsystemIdentifier ( );
    _bstr_t GetpublicIdentifier ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_systemIdentifier (
        BSTR * uri ) = 0;
    virtual HRESULT __stdcall get_publicIdentifier (
        BSTR * uri ) = 0;
};

struct __declspec(uuid("65725580-9b5d-11d0-9bfe-00c04fc99c8e"))
IXMLElementCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getlength,put=Putlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    //
    // Wrapper methods for error-handling
    //

    void Putlength (
        long p );
    long Getlength ( );
    IUnknownPtr Get_newEnum ( );
    IDispatchPtr item (
        const _variant_t & var1 = vtMissing,
        const _variant_t & var2 = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_length (
        long p ) = 0;
    virtual HRESULT __stdcall get_length (
        long * p ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
    virtual HRESULT __stdcall raw_item (
        VARIANT var1,
        VARIANT var2,
        IDispatch * * ppDisp ) = 0;
};

struct __declspec(uuid("f52e2b61-18a1-11d1-b105-00805f49916b"))
IXMLDocument : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getroot))
    IXMLElementPtr root;
    __declspec(property(get=GetfileSize))
    _bstr_t fileSize;
    __declspec(property(get=GetfileModifiedDate))
    _bstr_t fileModifiedDate;
    __declspec(property(get=GetfileUpdatedDate))
    _bstr_t fileUpdatedDate;
    __declspec(property(get=Geturl,put=Puturl))
    _bstr_t url;
    __declspec(property(get=GetmimeType))
    _bstr_t mimeType;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(get=Getcharset,put=Putcharset))
    _bstr_t charset;
    __declspec(property(get=Getversion))
    _bstr_t version;
    __declspec(property(get=Getdoctype))
    _bstr_t doctype;
    __declspec(property(get=GetdtdURL))
    _bstr_t dtdURL;

    //
    // Wrapper methods for error-handling
    //

    IXMLElementPtr Getroot ( );
    _bstr_t GetfileSize ( );
    _bstr_t GetfileModifiedDate ( );
    _bstr_t GetfileUpdatedDate ( );
    _bstr_t Geturl ( );
    void Puturl (
        _bstr_t p );
    _bstr_t GetmimeType ( );
    long GetreadyState ( );
    _bstr_t Getcharset ( );
    void Putcharset (
        _bstr_t p );
    _bstr_t Getversion ( );
    _bstr_t Getdoctype ( );
    _bstr_t GetdtdURL ( );
    IXMLElementPtr createElement (
        const _variant_t & vType,
        const _variant_t & var1 = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_root (
        struct IXMLElement * * p ) = 0;
    virtual HRESULT __stdcall get_fileSize (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_fileModifiedDate (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_fileUpdatedDate (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_url (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_url (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_mimeType (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * pl ) = 0;
    virtual HRESULT __stdcall get_charset (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_charset (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_version (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_doctype (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_dtdURL (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall raw_createElement (
        VARIANT vType,
        VARIANT var1,
        struct IXMLElement * * ppElem ) = 0;
};

struct __declspec(uuid("3f7f31ac-e15f-11d0-9c25-00c04fc99c8e"))
IXMLElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GettagName,put=PuttagName))
    _bstr_t tagName;
    __declspec(property(get=Getparent))
    IXMLElementPtr parent;
    __declspec(property(get=Getchildren))
    IXMLElementCollectionPtr children;
    __declspec(property(get=Gettype))
    long type;
    __declspec(property(get=Gettext,put=Puttext))
    _bstr_t text;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GettagName ( );
    void PuttagName (
        _bstr_t p );
    IXMLElementPtr Getparent ( );
    HRESULT setAttribute (
        _bstr_t strPropertyName,
        const _variant_t & PropertyValue );
    _variant_t getAttribute (
        _bstr_t strPropertyName );
    HRESULT removeAttribute (
        _bstr_t strPropertyName );
    IXMLElementCollectionPtr Getchildren ( );
    long Gettype ( );
    _bstr_t Gettext ( );
    void Puttext (
        _bstr_t p );
    HRESULT addChild (
        struct IXMLElement * pChildElem,
        long lIndex,
        long lReserved );
    HRESULT removeChild (
        struct IXMLElement * pChildElem );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_tagName (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_tagName (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_parent (
        struct IXMLElement * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_setAttribute (
        BSTR strPropertyName,
        VARIANT PropertyValue ) = 0;
    virtual HRESULT __stdcall raw_getAttribute (
        BSTR strPropertyName,
        VARIANT * PropertyValue ) = 0;
    virtual HRESULT __stdcall raw_removeAttribute (
        BSTR strPropertyName ) = 0;
    virtual HRESULT __stdcall get_children (
        struct IXMLElementCollection * * pp ) = 0;
    virtual HRESULT __stdcall get_type (
        long * plType ) = 0;
    virtual HRESULT __stdcall get_text (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_text (
        BSTR p ) = 0;
    virtual HRESULT __stdcall raw_addChild (
        struct IXMLElement * pChildElem,
        long lIndex,
        long lReserved ) = 0;
    virtual HRESULT __stdcall raw_removeChild (
        struct IXMLElement * pChildElem ) = 0;
};

struct __declspec(uuid("2b8de2fe-8d2d-11d1-b2fc-00c04fd915a9"))
IXMLDocument2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getroot))
    IXMLElement2Ptr root;
    __declspec(property(get=GetfileSize))
    _bstr_t fileSize;
    __declspec(property(get=GetfileModifiedDate))
    _bstr_t fileModifiedDate;
    __declspec(property(get=GetfileUpdatedDate))
    _bstr_t fileUpdatedDate;
    __declspec(property(get=Geturl,put=Puturl))
    _bstr_t url;
    __declspec(property(get=GetmimeType))
    _bstr_t mimeType;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(get=Getcharset,put=Putcharset))
    _bstr_t charset;
    __declspec(property(get=Getversion))
    _bstr_t version;
    __declspec(property(get=Getdoctype))
    _bstr_t doctype;
    __declspec(property(get=GetdtdURL))
    _bstr_t dtdURL;
    __declspec(property(get=Getasync,put=Putasync))
    VARIANT_BOOL async;

    //
    // Wrapper methods for error-handling
    //

    IXMLElement2Ptr Getroot ( );
    _bstr_t GetfileSize ( );
    _bstr_t GetfileModifiedDate ( );
    _bstr_t GetfileUpdatedDate ( );
    _bstr_t Geturl ( );
    void Puturl (
        _bstr_t p );
    _bstr_t GetmimeType ( );
    long GetreadyState ( );
    _bstr_t Getcharset ( );
    void Putcharset (
        _bstr_t p );
    _bstr_t Getversion ( );
    _bstr_t Getdoctype ( );
    _bstr_t GetdtdURL ( );
    IXMLElement2Ptr createElement (
        const _variant_t & vType,
        const _variant_t & var1 = vtMissing );
    VARIANT_BOOL Getasync ( );
    void Putasync (
        VARIANT_BOOL pf );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_root (
        struct IXMLElement2 * * p ) = 0;
    virtual HRESULT __stdcall get_fileSize (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_fileModifiedDate (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_fileUpdatedDate (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_url (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_url (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_mimeType (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * pl ) = 0;
    virtual HRESULT __stdcall get_charset (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_charset (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_version (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_doctype (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall get_dtdURL (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall raw_createElement (
        VARIANT vType,
        VARIANT var1,
        struct IXMLElement2 * * ppElem ) = 0;
    virtual HRESULT __stdcall get_async (
        VARIANT_BOOL * pf ) = 0;
    virtual HRESULT __stdcall put_async (
        VARIANT_BOOL pf ) = 0;
};

struct __declspec(uuid("2b8de2ff-8d2d-11d1-b2fc-00c04fd915a9"))
IXMLElement2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GettagName,put=PuttagName))
    _bstr_t tagName;
    __declspec(property(get=Getparent))
    IXMLElement2Ptr parent;
    __declspec(property(get=Getchildren))
    IXMLElementCollectionPtr children;
    __declspec(property(get=Gettype))
    long type;
    __declspec(property(get=Gettext,put=Puttext))
    _bstr_t text;
    __declspec(property(get=Getattributes))
    IXMLElementCollectionPtr attributes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GettagName ( );
    void PuttagName (
        _bstr_t p );
    IXMLElement2Ptr Getparent ( );
    HRESULT setAttribute (
        _bstr_t strPropertyName,
        const _variant_t & PropertyValue );
    _variant_t getAttribute (
        _bstr_t strPropertyName );
    HRESULT removeAttribute (
        _bstr_t strPropertyName );
    IXMLElementCollectionPtr Getchildren ( );
    long Gettype ( );
    _bstr_t Gettext ( );
    void Puttext (
        _bstr_t p );
    HRESULT addChild (
        struct IXMLElement2 * pChildElem,
        long lIndex,
        long lReserved );
    HRESULT removeChild (
        struct IXMLElement2 * pChildElem );
    IXMLElementCollectionPtr Getattributes ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_tagName (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_tagName (
        BSTR p ) = 0;
    virtual HRESULT __stdcall get_parent (
        struct IXMLElement2 * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_setAttribute (
        BSTR strPropertyName,
        VARIANT PropertyValue ) = 0;
    virtual HRESULT __stdcall raw_getAttribute (
        BSTR strPropertyName,
        VARIANT * PropertyValue ) = 0;
    virtual HRESULT __stdcall raw_removeAttribute (
        BSTR strPropertyName ) = 0;
    virtual HRESULT __stdcall get_children (
        struct IXMLElementCollection * * pp ) = 0;
    virtual HRESULT __stdcall get_type (
        long * plType ) = 0;
    virtual HRESULT __stdcall get_text (
        BSTR * p ) = 0;
    virtual HRESULT __stdcall put_text (
        BSTR p ) = 0;
    virtual HRESULT __stdcall raw_addChild (
        struct IXMLElement2 * pChildElem,
        long lIndex,
        long lReserved ) = 0;
    virtual HRESULT __stdcall raw_removeChild (
        struct IXMLElement2 * pChildElem ) = 0;
    virtual HRESULT __stdcall get_attributes (
        struct IXMLElementCollection * * pp ) = 0;
};

struct __declspec(uuid("d4d4a0fc-3b73-11d1-b2b4-00c04fb92596"))
IXMLAttribute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=Getvalue))
    _bstr_t value;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getname ( );
    _bstr_t Getvalue ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_name (
        BSTR * n ) = 0;
    virtual HRESULT __stdcall get_value (
        BSTR * v ) = 0;
};

struct __declspec(uuid("948c5ad3-c58d-11d0-9c0b-00c04fc99c8e"))
IXMLError : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetErrorInfo (
        struct _xml_error * pErrorReturn );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GetErrorInfo (
        struct _xml_error * pErrorReturn ) = 0;
};

struct _xml_error
{
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    unsigned long _reserved1;
    unsigned long _reserved2;
};

enum tagXMLEMEM_TYPE
{
    XMLELEMTYPE_ELEMENT = 0,
    XMLELEMTYPE_TEXT = 1,
    XMLELEMTYPE_COMMENT = 2,
    XMLELEMTYPE_DOCUMENT = 3,
    XMLELEMTYPE_DTD = 4,
    XMLELEMTYPE_PI = 5,
    XMLELEMTYPE_OTHER = 6
};

struct __declspec(uuid("aa634fc7-5888-44a7-a257-3a47150d3a0e"))
IXMLDOMSelection : IXMLDOMNodeList
{
    //
    // Property data
    //

    __declspec(property(get=Getexpr,put=Putexpr))
    _bstr_t expr;
    __declspec(property(get=Getcontext,put=PutRefcontext))
    IXMLDOMNodePtr context;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getexpr ( );
    void Putexpr (
        _bstr_t expression );
    IXMLDOMNodePtr Getcontext ( );
    void PutRefcontext (
        struct IXMLDOMNode * ppNode );
    IXMLDOMNodePtr peekNode ( );
    IXMLDOMNodePtr matches (
        struct IXMLDOMNode * pNode );
    IXMLDOMNodePtr removeNext ( );
    HRESULT removeAll ( );
    IXMLDOMSelectionPtr clone ( );
    _variant_t getProperty (
        _bstr_t name );
    HRESULT setProperty (
        _bstr_t name,
        const _variant_t & value );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_expr (
        BSTR * expression ) = 0;
    virtual HRESULT __stdcall put_expr (
        BSTR expression ) = 0;
    virtual HRESULT __stdcall get_context (
        struct IXMLDOMNode * * ppNode ) = 0;
    virtual HRESULT __stdcall putref_context (
        struct IXMLDOMNode * ppNode ) = 0;
    virtual HRESULT __stdcall raw_peekNode (
        struct IXMLDOMNode * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_matches (
        struct IXMLDOMNode * pNode,
        struct IXMLDOMNode * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_removeNext (
        struct IXMLDOMNode * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_removeAll ( ) = 0;
    virtual HRESULT __stdcall raw_clone (
        struct IXMLDOMSelection * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_getProperty (
        BSTR name,
        VARIANT * value ) = 0;
    virtual HRESULT __stdcall raw_setProperty (
        BSTR name,
        VARIANT value ) = 0;
};

struct __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782"))
XMLDOMDocumentEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT ondataavailable ( );
    HRESULT onreadystatechange ( );
};

struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39"))
IDSOControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXMLDocument,put=PutXMLDocument))
    IXMLDOMDocumentPtr XMLDocument;
    __declspec(property(get=GetJavaDSOCompatible,put=PutJavaDSOCompatible))
    long JavaDSOCompatible;
    __declspec(property(get=GetreadyState))
    long readyState;

    //
    // Wrapper methods for error-handling
    //

    IXMLDOMDocumentPtr GetXMLDocument ( );
    void PutXMLDocument (
        struct IXMLDOMDocument * ppDoc );
    long GetJavaDSOCompatible ( );
    void PutJavaDSOCompatible (
        long fJavaDSOCompatible );
    long GetreadyState ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_XMLDocument (
        struct IXMLDOMDocument * * ppDoc ) = 0;
    virtual HRESULT __stdcall put_XMLDocument (
        struct IXMLDOMDocument * ppDoc ) = 0;
    virtual HRESULT __stdcall get_JavaDSOCompatible (
        long * fJavaDSOCompatible ) = 0;
    virtual HRESULT __stdcall put_JavaDSOCompatible (
        long fJavaDSOCompatible ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * state ) = 0;
};

struct __declspec(uuid("ed8c108d-4349-11d2-91a4-00c04f7969e8"))
IXMLHTTPRequest : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getstatus))
    long status;
    __declspec(property(get=GetstatusText))
    _bstr_t statusText;
    __declspec(property(get=GetresponseXML))
    IDispatchPtr responseXML;
    __declspec(property(get=GetresponseText))
    _bstr_t responseText;
    __declspec(property(get=GetresponseBody))
    _variant_t responseBody;
    __declspec(property(get=GetresponseStream))
    _variant_t responseStream;
    __declspec(property(get=GetreadyState))
    long readyState;
    __declspec(property(put=Putonreadystatechange))
    IDispatchPtr onreadystatechange;

    //
    // Wrapper methods for error-handling
    //

    HRESULT open (
        _bstr_t bstrMethod,
        _bstr_t bstrUrl,
        const _variant_t & varAsync = vtMissing,
        const _variant_t & bstrUser = vtMissing,
        const _variant_t & bstrPassword = vtMissing );
    HRESULT setRequestHeader (
        _bstr_t bstrHeader,
        _bstr_t bstrValue );
    _bstr_t getResponseHeader (
        _bstr_t bstrHeader );
    _bstr_t getAllResponseHeaders ( );
    HRESULT send (
        const _variant_t & varBody = vtMissing );
    HRESULT abort ( );
    long Getstatus ( );
    _bstr_t GetstatusText ( );
    IDispatchPtr GetresponseXML ( );
    _bstr_t GetresponseText ( );
    _variant_t GetresponseBody ( );
    _variant_t GetresponseStream ( );
    long GetreadyState ( );
    void Putonreadystatechange (
        IDispatch * _arg1 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_open (
        BSTR bstrMethod,
        BSTR bstrUrl,
        VARIANT varAsync = vtMissing,
        VARIANT bstrUser = vtMissing,
        VARIANT bstrPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_setRequestHeader (
        BSTR bstrHeader,
        BSTR bstrValue ) = 0;
    virtual HRESULT __stdcall raw_getResponseHeader (
        BSTR bstrHeader,
        BSTR * pbstrValue ) = 0;
    virtual HRESULT __stdcall raw_getAllResponseHeaders (
        BSTR * pbstrHeaders ) = 0;
    virtual HRESULT __stdcall raw_send (
        VARIANT varBody = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_abort ( ) = 0;
    virtual HRESULT __stdcall get_status (
        long * plStatus ) = 0;
    virtual HRESULT __stdcall get_statusText (
        BSTR * pbstrStatus ) = 0;
    virtual HRESULT __stdcall get_responseXML (
        IDispatch * * ppBody ) = 0;
    virtual HRESULT __stdcall get_responseText (
        BSTR * pbstrBody ) = 0;
    virtual HRESULT __stdcall get_responseBody (
        VARIANT * pvarBody ) = 0;
    virtual HRESULT __stdcall get_responseStream (
        VARIANT * pvarBody ) = 0;
    virtual HRESULT __stdcall get_readyState (
        long * plState ) = 0;
    virtual HRESULT __stdcall put_onreadystatechange (
        IDispatch * _arg1 ) = 0;
};

enum _SERVERXMLHTTP_OPTION
{
    SXH_OPTION_URL = -1,
    SXH_OPTION_URL_CODEPAGE = 0,
    SXH_OPTION_ESCAPE_PERCENT_IN_URL = 1,
    SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2,
    SXH_OPTION_SELECT_CLIENT_SSL_CERT = 3
};

enum _SXH_SERVER_CERT_OPTION
{
    SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 256,
    SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 512,
    SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 4096,
    SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 8192,
    SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 13056
};

struct __declspec(uuid("2e9196bf-13ba-4dd4-91ca-6c571f281495"))
IServerXMLHTTPRequest : IXMLHTTPRequest
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setTimeouts (
        long resolveTimeout,
        long connectTimeout,
        long sendTimeout,
        long receiveTimeout );
    VARIANT_BOOL waitForResponse (
        const _variant_t & timeoutInSeconds = vtMissing );
    _variant_t getOption (
        SERVERXMLHTTP_OPTION option );
    HRESULT setOption (
        SERVERXMLHTTP_OPTION option,
        const _variant_t & value );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_setTimeouts (
        long resolveTimeout,
        long connectTimeout,
        long sendTimeout,
        long receiveTimeout ) = 0;
    virtual HRESULT __stdcall raw_waitForResponse (
        VARIANT timeoutInSeconds,
        VARIANT_BOOL * isSuccessful ) = 0;
    virtual HRESULT __stdcall raw_getOption (
        SERVERXMLHTTP_OPTION option,
        VARIANT * value ) = 0;
    virtual HRESULT __stdcall raw_setOption (
        SERVERXMLHTTP_OPTION option,
        VARIANT value ) = 0;
};

enum _SXH_PROXY_SETTING
{
    SXH_PROXY_SET_DEFAULT = 0,
    SXH_PROXY_SET_PRECONFIG = 0,
    SXH_PROXY_SET_DIRECT = 1,
    SXH_PROXY_SET_PROXY = 2
};

struct __declspec(uuid("2e01311b-c322-4b0a-bd77-b90cfdc8dce7"))
IServerXMLHTTPRequest2 : IServerXMLHTTPRequest
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setProxy (
        SXH_PROXY_SETTING proxySetting,
        const _variant_t & varProxyServer = vtMissing,
        const _variant_t & varBypassList = vtMissing );
    HRESULT setProxyCredentials (
        _bstr_t bstrUserName,
        _bstr_t bstrPassword );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_setProxy (
        SXH_PROXY_SETTING proxySetting,
        VARIANT varProxyServer = vtMissing,
        VARIANT varBypassList = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_setProxyCredentials (
        BSTR bstrUserName,
        BSTR bstrPassword ) = 0;
};

struct __declspec(uuid("c90352f4-643c-4fbc-bb23-e996eb2d51fd"))
IMXNamespacePrefixes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getitem))
    _bstr_t item[];
    __declspec(property(get=Getlength))
    long length;
    __declspec(property(get=Get_newEnum))
    IUnknownPtr _newEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getitem (
        long index );
    long Getlength ( );
    IUnknownPtr Get_newEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_item (
        long index,
        BSTR * prefix ) = 0;
    virtual HRESULT __stdcall get_length (
        long * length ) = 0;
    virtual HRESULT __stdcall get__newEnum (
        IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("c90352f5-643c-4fbc-bb23-e996eb2d51fd"))
IVBMXNamespaceManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetallowOverride,put=PutallowOverride))
    VARIANT_BOOL allowOverride;

    //
    // Wrapper methods for error-handling
    //

    void PutallowOverride (
        VARIANT_BOOL fOverride );
    VARIANT_BOOL GetallowOverride ( );
    HRESULT reset ( );
    HRESULT pushContext ( );
    HRESULT pushNodeContext (
        struct IXMLDOMNode * contextNode,
        VARIANT_BOOL fDeep );
    HRESULT popContext ( );
    HRESULT declarePrefix (
        _bstr_t prefix,
        _bstr_t namespaceURI );
    IMXNamespacePrefixesPtr getDeclaredPrefixes ( );
    IMXNamespacePrefixesPtr getPrefixes (
        _bstr_t namespaceURI );
    _variant_t getURI (
        _bstr_t prefix );
    _variant_t getURIFromNode (
        _bstr_t strPrefix,
        struct IXMLDOMNode * contextNode );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_allowOverride (
        VARIANT_BOOL fOverride ) = 0;
    virtual HRESULT __stdcall get_allowOverride (
        VARIANT_BOOL * fOverride ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall raw_pushContext ( ) = 0;
    virtual HRESULT __stdcall raw_pushNodeContext (
        struct IXMLDOMNode * contextNode,
        VARIANT_BOOL fDeep ) = 0;
    virtual HRESULT __stdcall raw_popContext ( ) = 0;
    virtual HRESULT __stdcall raw_declarePrefix (
        BSTR prefix,
        BSTR namespaceURI ) = 0;
    virtual HRESULT __stdcall raw_getDeclaredPrefixes (
        struct IMXNamespacePrefixes * * prefixes ) = 0;
    virtual HRESULT __stdcall raw_getPrefixes (
        BSTR namespaceURI,
        struct IMXNamespacePrefixes * * prefixes ) = 0;
    virtual HRESULT __stdcall raw_getURI (
        BSTR prefix,
        VARIANT * uri ) = 0;
    virtual HRESULT __stdcall raw_getURIFromNode (
        BSTR strPrefix,
        struct IXMLDOMNode * contextNode,
        VARIANT * uri ) = 0;
};

struct __declspec(uuid("c90352f6-643c-4fbc-bb23-e996eb2d51fd"))
IMXNamespaceManager : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT putAllowOverride (
        VARIANT_BOOL fOverride );
    VARIANT_BOOL getAllowOverride ( );
    HRESULT reset ( );
    HRESULT pushContext ( );
    HRESULT pushNodeContext (
        struct IXMLDOMNode * contextNode,
        VARIANT_BOOL fDeep );
    HRESULT popContext ( );
    HRESULT declarePrefix (
        unsigned short * prefix,
        unsigned short * namespaceURI );
    HRESULT getDeclaredPrefix (
        long nIndex,
        unsigned short * pwchPrefix,
        int * pcchPrefix );
    HRESULT getPrefix (
        unsigned short * pwszNamespaceURI,
        long nIndex,
        unsigned short * pwchPrefix,
        int * pcchPrefix );
    HRESULT getURI (
        unsigned short * pwchPrefix,
        struct IXMLDOMNode * pContextNode,
        unsigned short * pwchUri,
        int * pcchUri );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_putAllowOverride (
        VARIANT_BOOL fOverride ) = 0;
    virtual HRESULT __stdcall raw_getAllowOverride (
        VARIANT_BOOL * fOverride ) = 0;
    virtual HRESULT __stdcall raw_reset ( ) = 0;
    virtual HRESULT __stdcall raw_pushContext ( ) = 0;
    virtual HRESULT __stdcall raw_pushNodeContext (
        struct IXMLDOMNode * contextNode,
        VARIANT_BOOL fDeep ) = 0;
    virtual HRESULT __stdcall raw_popContext ( ) = 0;
    virtual HRESULT __stdcall raw_declarePrefix (
        unsigned short * prefix,
        unsigned short * namespaceURI ) = 0;
    virtual HRESULT __stdcall raw_getDeclaredPrefix (
        long nIndex,
        unsigned short * pwchPrefix,
        int * pcchPrefix ) = 0;
    virtual HRESULT __stdcall raw_getPrefix (
        unsigned short * pwszNamespaceURI,
        long nIndex,
        unsigned short * pwchPrefix,
        int * pcchPrefix ) = 0;
    virtual HRESULT __stdcall raw_getURI (
        unsigned short * pwchPrefix,
        struct IXMLDOMNode * pContextNode,
        unsigned short * pwchUri,
        int * pcchUri ) = 0;
};

struct __declspec(uuid("f6d90f11-9c73-11d3-b32e-00c04f990bb4"))
DOMDocument;
    // [ default ] interface IXMLDOMDocument2
    // [ default, source ] dispinterface XMLDOMDocumentEvents

struct __declspec(uuid("f5078f1b-c551-11d3-89b9-0000f81fe221"))
DOMDocument26;
    // [ default ] interface IXMLDOMDocument2
    // [ default, source ] dispinterface XMLDOMDocumentEvents

struct __declspec(uuid("f5078f32-c551-11d3-89b9-0000f81fe221"))
DOMDocument30;
    // [ default ] interface IXMLDOMDocument2
    // [ default, source ] dispinterface XMLDOMDocumentEvents

struct __declspec(uuid("88d969c0-f192-11d4-a65f-0040963251e5"))
DOMDocument40;
    // [ default ] interface IXMLDOMDocument2
    // [ default, source ] dispinterface XMLDOMDocumentEvents

struct __declspec(uuid("f6d90f12-9c73-11d3-b32e-00c04f990bb4"))
FreeThreadedDOMDocument;
    // [ default ] interface IXMLDOMDocument2
    // [ default, source ] dispinterface XMLDOMDocumentEvents

struct __declspec(uuid("f5078f1c-c551-11d3-89b9-0000f81fe221"))
FreeThreadedDOMDocument26;
    // [ default ] interface IXMLDOMDocument2
    // [ default, source ] dispinterface XMLDOMDocumentEvents

struct __declspec(uuid("f5078f33-c551-11d3-89b9-0000f81fe221"))
FreeThreadedDOMDocument30;
    // [ default ] interface IXMLDOMDocument2
    // [ default, source ] dispinterface XMLDOMDocumentEvents

struct __declspec(uuid("88d969c1-f192-11d4-a65f-0040963251e5"))
FreeThreadedDOMDocument40;
    // [ default ] interface IXMLDOMDocument2
    // [ default, source ] dispinterface XMLDOMDocumentEvents

struct __declspec(uuid("373984c9-b845-449b-91e7-45ac83036ade"))
XMLSchemaCache;
    // [ default ] interface IXMLDOMSchemaCollection

struct __declspec(uuid("f5078f1d-c551-11d3-89b9-0000f81fe221"))
XMLSchemaCache26;
    // [ default ] interface IXMLDOMSchemaCollection

struct __declspec(uuid("f5078f34-c551-11d3-89b9-0000f81fe221"))
XMLSchemaCache30;
    // [ default ] interface IXMLDOMSchemaCollection

struct __declspec(uuid("88d969c2-f192-11d4-a65f-0040963251e5"))
XMLSchemaCache40;
    // [ default ] interface IXMLDOMSchemaCollection2

struct __declspec(uuid("2933bf94-7b36-11d2-b20e-00c04f983e60"))
XSLTemplate;
    // [ default ] interface IXSLTemplate

struct __declspec(uuid("f5078f21-c551-11d3-89b9-0000f81fe221"))
XSLTemplate26;
    // [ default ] interface IXSLTemplate

struct __declspec(uuid("f5078f36-c551-11d3-89b9-0000f81fe221"))
XSLTemplate30;
    // [ default ] interface IXSLTemplate

struct __declspec(uuid("88d969c3-f192-11d4-a65f-0040963251e5"))
XSLTemplate40;
    // [ default ] interface IXSLTemplate

struct __declspec(uuid("f6d90f14-9c73-11d3-b32e-00c04f990bb4"))
DSOControl;
    // [ default ] interface IDSOControl

struct __declspec(uuid("f5078f1f-c551-11d3-89b9-0000f81fe221"))
DSOControl26;
    // [ default ] interface IDSOControl

struct __declspec(uuid("f5078f39-c551-11d3-89b9-0000f81fe221"))
DSOControl30;
    // [ default ] interface IDSOControl

struct __declspec(uuid("88d969c4-f192-11d4-a65f-0040963251e5"))
DSOControl40;
    // [ default ] interface IDSOControl

struct __declspec(uuid("f6d90f16-9c73-11d3-b32e-00c04f990bb4"))
XMLHTTP;
    // [ default ] interface IXMLHTTPRequest

struct __declspec(uuid("f5078f1e-c551-11d3-89b9-0000f81fe221"))
XMLHTTP26;
    // [ default ] interface IXMLHTTPRequest

struct __declspec(uuid("f5078f35-c551-11d3-89b9-0000f81fe221"))
XMLHTTP30;
    // [ default ] interface IXMLHTTPRequest

struct __declspec(uuid("88d969c5-f192-11d4-a65f-0040963251e5"))
XMLHTTP40;
    // [ default ] interface IXMLHTTPRequest

struct __declspec(uuid("afba6b42-5692-48ea-8141-dc517dcf0ef1"))
ServerXMLHTTP;
    // [ default ] interface IServerXMLHTTPRequest2

struct __declspec(uuid("afb40ffd-b609-40a3-9828-f88bbe11e4e3"))
ServerXMLHTTP30;
    // [ default ] interface IServerXMLHTTPRequest2

struct __declspec(uuid("88d969c6-f192-11d4-a65f-0040963251e5"))
ServerXMLHTTP40;
    // [ default ] interface IServerXMLHTTPRequest2

struct __declspec(uuid("079aa557-4a18-424a-8eee-e39f0a8d41b9"))
SAXXMLReader;
    // [ default ] interface IVBSAXXMLReader
    // interface ISAXXMLReader
    // interface IMXReaderControl

struct __declspec(uuid("3124c396-fb13-4836-a6ad-1317f1713688"))
SAXXMLReader30;
    // [ default ] interface IVBSAXXMLReader
    // interface ISAXXMLReader
    // interface IMXReaderControl

struct __declspec(uuid("7c6e29bc-8b8b-4c3d-859e-af6cd158be0f"))
SAXXMLReader40;
    // [ default ] interface IVBSAXXMLReader
    // interface ISAXXMLReader

struct __declspec(uuid("fc220ad8-a72a-4ee8-926e-0b7ad152a020"))
MXXMLWriter;
    // [ default ] interface IMXWriter
    // interface ISAXContentHandler
    // interface ISAXErrorHandler
    // interface ISAXDTDHandler
    // interface ISAXLexicalHandler
    // interface ISAXDeclHandler
    // interface IVBSAXContentHandler
    // interface IVBSAXDeclHandler
    // interface IVBSAXDTDHandler
    // interface IVBSAXErrorHandler
    // interface IVBSAXLexicalHandler

struct __declspec(uuid("3d813dfe-6c91-4a4e-8f41-04346a841d9c"))
MXXMLWriter30;
    // [ default ] interface IMXWriter
    // interface ISAXContentHandler
    // interface ISAXDeclHandler
    // interface ISAXDTDHandler
    // interface ISAXErrorHandler
    // interface ISAXLexicalHandler
    // interface IVBSAXContentHandler
    // interface IVBSAXDeclHandler
    // interface IVBSAXDTDHandler
    // interface IVBSAXErrorHandler
    // interface IVBSAXLexicalHandler

struct __declspec(uuid("88d969c8-f192-11d4-a65f-0040963251e5"))
MXXMLWriter40;
    // [ default ] interface IMXWriter
    // interface ISAXContentHandler
    // interface ISAXDeclHandler
    // interface ISAXDTDHandler
    // interface ISAXErrorHandler
    // interface ISAXLexicalHandler
    // interface IVBSAXContentHandler
    // interface IVBSAXDeclHandler
    // interface IVBSAXDTDHandler
    // interface IVBSAXErrorHandler
    // interface IVBSAXLexicalHandler

struct __declspec(uuid("a4c23ec3-6b70-4466-9127-550077239978"))
MXHTMLWriter;
    // [ default ] interface IMXWriter
    // interface ISAXContentHandler
    // interface ISAXErrorHandler
    // interface ISAXDTDHandler
    // interface ISAXLexicalHandler
    // interface ISAXDeclHandler
    // interface IVBSAXContentHandler
    // interface IVBSAXDeclHandler
    // interface IVBSAXDTDHandler
    // interface IVBSAXErrorHandler
    // interface IVBSAXLexicalHandler

struct __declspec(uuid("853d1540-c1a7-4aa9-a226-4d3bd301146d"))
MXHTMLWriter30;
    // [ default ] interface IMXWriter
    // interface ISAXContentHandler
    // interface ISAXDeclHandler
    // interface ISAXDTDHandler
    // interface ISAXErrorHandler
    // interface ISAXLexicalHandler
    // interface IVBSAXContentHandler
    // interface IVBSAXDeclHandler
    // interface IVBSAXDTDHandler
    // interface IVBSAXErrorHandler
    // interface IVBSAXLexicalHandler

struct __declspec(uuid("88d969c9-f192-11d4-a65f-0040963251e5"))
MXHTMLWriter40;
    // [ default ] interface IMXWriter
    // interface ISAXContentHandler
    // interface ISAXDeclHandler
    // interface ISAXDTDHandler
    // interface ISAXErrorHandler
    // interface ISAXLexicalHandler
    // interface IVBSAXContentHandler
    // interface IVBSAXDeclHandler
    // interface IVBSAXDTDHandler
    // interface IVBSAXErrorHandler
    // interface IVBSAXLexicalHandler

struct __declspec(uuid("4dd441ad-526d-4a77-9f1b-9841ed802fb0"))
SAXAttributes;
    // [ default ] interface IMXAttributes
    // interface IVBSAXAttributes
    // interface ISAXAttributes

struct __declspec(uuid("3e784a01-f3ae-4dc0-9354-9526b9370eba"))
SAXAttributes30;
    // [ default ] interface IMXAttributes
    // interface IVBSAXAttributes
    // interface ISAXAttributes

struct __declspec(uuid("88d969ca-f192-11d4-a65f-0040963251e5"))
SAXAttributes40;
    // [ default ] interface IMXAttributes
    // interface IVBSAXAttributes
    // interface ISAXAttributes

struct __declspec(uuid("88d969d5-f192-11d4-a65f-0040963251e5"))
MXNamespaceManager;
    // [ default ] interface IVBMXNamespaceManager
    // interface IMXNamespaceManager

struct __declspec(uuid("88d969d6-f192-11d4-a65f-0040963251e5"))
MXNamespaceManager40;
    // [ default ] interface IVBMXNamespaceManager
    // interface IMXNamespaceManager

struct __declspec(uuid("cfc399af-d876-11d0-9c10-00c04fc99c8e"))
XMLDocument;
    // [ default ] interface IXMLDocument2

//
// Function implementation mapping
//

#pragma start_map_region("msxml4.tli")
__declspec(implementation_key(1)) VARIANT_BOOL IXMLDOMImplementation::hasFeature ( _bstr_t feature, _bstr_t version );
__declspec(implementation_key(2)) _bstr_t IXMLDOMNode::GetnodeName ( );
__declspec(implementation_key(3)) _variant_t IXMLDOMNode::GetnodeValue ( );
__declspec(implementation_key(4)) void IXMLDOMNode::PutnodeValue ( const _variant_t & value );
__declspec(implementation_key(5)) DOMNodeType IXMLDOMNode::GetnodeType ( );
__declspec(implementation_key(6)) IXMLDOMNodePtr IXMLDOMNode::GetparentNode ( );
__declspec(implementation_key(7)) IXMLDOMNodeListPtr IXMLDOMNode::GetchildNodes ( );
__declspec(implementation_key(8)) IXMLDOMNodePtr IXMLDOMNode::GetfirstChild ( );
__declspec(implementation_key(9)) IXMLDOMNodePtr IXMLDOMNode::GetlastChild ( );
__declspec(implementation_key(10)) IXMLDOMNodePtr IXMLDOMNode::GetpreviousSibling ( );
__declspec(implementation_key(11)) IXMLDOMNodePtr IXMLDOMNode::GetnextSibling ( );
__declspec(implementation_key(12)) IXMLDOMNamedNodeMapPtr IXMLDOMNode::Getattributes ( );
__declspec(implementation_key(13)) IXMLDOMNodePtr IXMLDOMNode::insertBefore ( struct IXMLDOMNode * newChild, const _variant_t & refChild );
__declspec(implementation_key(14)) IXMLDOMNodePtr IXMLDOMNode::replaceChild ( struct IXMLDOMNode * newChild, struct IXMLDOMNode * oldChild );
__declspec(implementation_key(15)) IXMLDOMNodePtr IXMLDOMNode::removeChild ( struct IXMLDOMNode * childNode );
__declspec(implementation_key(16)) IXMLDOMNodePtr IXMLDOMNode::appendChild ( struct IXMLDOMNode * newChild );
__declspec(implementation_key(17)) VARIANT_BOOL IXMLDOMNode::hasChildNodes ( );
__declspec(implementation_key(18)) IXMLDOMDocumentPtr IXMLDOMNode::GetownerDocument ( );
__declspec(implementation_key(19)) IXMLDOMNodePtr IXMLDOMNode::cloneNode ( VARIANT_BOOL deep );
__declspec(implementation_key(20)) _bstr_t IXMLDOMNode::GetnodeTypeString ( );
__declspec(implementation_key(21)) _bstr_t IXMLDOMNode::Gettext ( );
__declspec(implementation_key(22)) void IXMLDOMNode::Puttext ( _bstr_t text );
__declspec(implementation_key(23)) VARIANT_BOOL IXMLDOMNode::Getspecified ( );
__declspec(implementation_key(24)) IXMLDOMNodePtr IXMLDOMNode::Getdefinition ( );
__declspec(implementation_key(25)) _variant_t IXMLDOMNode::GetnodeTypedValue ( );
__declspec(implementation_key(26)) void IXMLDOMNode::PutnodeTypedValue ( const _variant_t & typedValue );
__declspec(implementation_key(27)) _variant_t IXMLDOMNode::GetdataType ( );
__declspec(implementation_key(28)) void IXMLDOMNode::PutdataType ( _bstr_t dataTypeName );
__declspec(implementation_key(29)) _bstr_t IXMLDOMNode::Getxml ( );
__declspec(implementation_key(30)) _bstr_t IXMLDOMNode::transformNode ( struct IXMLDOMNode * stylesheet );
__declspec(implementation_key(31)) IXMLDOMNodeListPtr IXMLDOMNode::selectNodes ( _bstr_t queryString );
__declspec(implementation_key(32)) IXMLDOMNodePtr IXMLDOMNode::selectSingleNode ( _bstr_t queryString );
__declspec(implementation_key(33)) VARIANT_BOOL IXMLDOMNode::Getparsed ( );
__declspec(implementation_key(34)) _bstr_t IXMLDOMNode::GetnamespaceURI ( );
__declspec(implementation_key(35)) _bstr_t IXMLDOMNode::Getprefix ( );
__declspec(implementation_key(36)) _bstr_t IXMLDOMNode::GetbaseName ( );
__declspec(implementation_key(37)) HRESULT IXMLDOMNode::transformNodeToObject ( struct IXMLDOMNode * stylesheet, const _variant_t & outputObject );
__declspec(implementation_key(38)) IXMLDOMNodePtr IXMLDOMNodeList::Getitem ( long index );
__declspec(implementation_key(39)) long IXMLDOMNodeList::Getlength ( );
__declspec(implementation_key(40)) IXMLDOMNodePtr IXMLDOMNodeList::nextNode ( );
__declspec(implementation_key(41)) HRESULT IXMLDOMNodeList::reset ( );
__declspec(implementation_key(42)) IUnknownPtr IXMLDOMNodeList::Get_newEnum ( );
__declspec(implementation_key(43)) IXMLDOMNodePtr IXMLDOMNamedNodeMap::getNamedItem ( _bstr_t name );
__declspec(implementation_key(44)) IXMLDOMNodePtr IXMLDOMNamedNodeMap::setNamedItem ( struct IXMLDOMNode * newItem );
__declspec(implementation_key(45)) IXMLDOMNodePtr IXMLDOMNamedNodeMap::removeNamedItem ( _bstr_t name );
__declspec(implementation_key(46)) IXMLDOMNodePtr IXMLDOMNamedNodeMap::Getitem ( long index );
__declspec(implementation_key(47)) long IXMLDOMNamedNodeMap::Getlength ( );
__declspec(implementation_key(48)) IXMLDOMNodePtr IXMLDOMNamedNodeMap::getQualifiedItem ( _bstr_t baseName, _bstr_t namespaceURI );
__declspec(implementation_key(49)) IXMLDOMNodePtr IXMLDOMNamedNodeMap::removeQualifiedItem ( _bstr_t baseName, _bstr_t namespaceURI );
__declspec(implementation_key(50)) IXMLDOMNodePtr IXMLDOMNamedNodeMap::nextNode ( );
__declspec(implementation_key(51)) HRESULT IXMLDOMNamedNodeMap::reset ( );
__declspec(implementation_key(52)) IUnknownPtr IXMLDOMNamedNodeMap::Get_newEnum ( );
__declspec(implementation_key(53)) IXMLDOMDocumentTypePtr IXMLDOMDocument::Getdoctype ( );
__declspec(implementation_key(54)) IXMLDOMImplementationPtr IXMLDOMDocument::Getimplementation ( );
__declspec(implementation_key(55)) IXMLDOMElementPtr IXMLDOMDocument::GetdocumentElement ( );
__declspec(implementation_key(56)) void IXMLDOMDocument::PutRefdocumentElement ( struct IXMLDOMElement * DOMElement );
__declspec(implementation_key(57)) IXMLDOMElementPtr IXMLDOMDocument::createElement ( _bstr_t tagName );
__declspec(implementation_key(58)) IXMLDOMDocumentFragmentPtr IXMLDOMDocument::createDocumentFragment ( );
__declspec(implementation_key(59)) IXMLDOMTextPtr IXMLDOMDocument::createTextNode ( _bstr_t data );
__declspec(implementation_key(60)) IXMLDOMCommentPtr IXMLDOMDocument::createComment ( _bstr_t data );
__declspec(implementation_key(61)) IXMLDOMCDATASectionPtr IXMLDOMDocument::createCDATASection ( _bstr_t data );
__declspec(implementation_key(62)) IXMLDOMProcessingInstructionPtr IXMLDOMDocument::createProcessingInstruction ( _bstr_t target, _bstr_t data );
__declspec(implementation_key(63)) IXMLDOMAttributePtr IXMLDOMDocument::createAttribute ( _bstr_t name );
__declspec(implementation_key(64)) IXMLDOMEntityReferencePtr IXMLDOMDocument::createEntityReference ( _bstr_t name );
__declspec(implementation_key(65)) IXMLDOMNodeListPtr IXMLDOMDocument::getElementsByTagName ( _bstr_t tagName );
__declspec(implementation_key(66)) IXMLDOMNodePtr IXMLDOMDocument::createNode ( const _variant_t & type, _bstr_t name, _bstr_t namespaceURI );
__declspec(implementation_key(67)) IXMLDOMNodePtr IXMLDOMDocument::nodeFromID ( _bstr_t idString );
__declspec(implementation_key(68)) VARIANT_BOOL IXMLDOMDocument::load ( const _variant_t & xmlSource );
__declspec(implementation_key(69)) long IXMLDOMDocument::GetreadyState ( );
__declspec(implementation_key(70)) IXMLDOMParseErrorPtr IXMLDOMDocument::GetparseError ( );
__declspec(implementation_key(71)) _bstr_t IXMLDOMDocument::Geturl ( );
__declspec(implementation_key(72)) VARIANT_BOOL IXMLDOMDocument::Getasync ( );
__declspec(implementation_key(73)) void IXMLDOMDocument::Putasync ( VARIANT_BOOL isAsync );
__declspec(implementation_key(74)) HRESULT IXMLDOMDocument::abort ( );
__declspec(implementation_key(75)) VARIANT_BOOL IXMLDOMDocument::loadXML ( _bstr_t bstrXML );
__declspec(implementation_key(76)) HRESULT IXMLDOMDocument::save ( const _variant_t & destination );
__declspec(implementation_key(77)) VARIANT_BOOL IXMLDOMDocument::GetvalidateOnParse ( );
__declspec(implementation_key(78)) void IXMLDOMDocument::PutvalidateOnParse ( VARIANT_BOOL isValidating );
__declspec(implementation_key(79)) VARIANT_BOOL IXMLDOMDocument::GetresolveExternals ( );
__declspec(implementation_key(80)) void IXMLDOMDocument::PutresolveExternals ( VARIANT_BOOL isResolving );
__declspec(implementation_key(81)) VARIANT_BOOL IXMLDOMDocument::GetpreserveWhiteSpace ( );
__declspec(implementation_key(82)) void IXMLDOMDocument::PutpreserveWhiteSpace ( VARIANT_BOOL isPreserving );
__declspec(implementation_key(83)) void IXMLDOMDocument::Putonreadystatechange ( const _variant_t & _arg1 );
__declspec(implementation_key(84)) void IXMLDOMDocument::Putondataavailable ( const _variant_t & _arg1 );
__declspec(implementation_key(85)) void IXMLDOMDocument::Putontransformnode ( const _variant_t & _arg1 );
__declspec(implementation_key(86)) _bstr_t IXMLDOMDocumentType::Getname ( );
__declspec(implementation_key(87)) IXMLDOMNamedNodeMapPtr IXMLDOMDocumentType::Getentities ( );
__declspec(implementation_key(88)) IXMLDOMNamedNodeMapPtr IXMLDOMDocumentType::Getnotations ( );
__declspec(implementation_key(89)) _bstr_t IXMLDOMElement::GettagName ( );
__declspec(implementation_key(90)) _variant_t IXMLDOMElement::getAttribute ( _bstr_t name );
__declspec(implementation_key(91)) HRESULT IXMLDOMElement::setAttribute ( _bstr_t name, const _variant_t & value );
__declspec(implementation_key(92)) HRESULT IXMLDOMElement::removeAttribute ( _bstr_t name );
__declspec(implementation_key(93)) IXMLDOMAttributePtr IXMLDOMElement::getAttributeNode ( _bstr_t name );
__declspec(implementation_key(94)) IXMLDOMAttributePtr IXMLDOMElement::setAttributeNode ( struct IXMLDOMAttribute * DOMAttribute );
__declspec(implementation_key(95)) IXMLDOMAttributePtr IXMLDOMElement::removeAttributeNode ( struct IXMLDOMAttribute * DOMAttribute );
__declspec(implementation_key(96)) IXMLDOMNodeListPtr IXMLDOMElement::getElementsByTagName ( _bstr_t tagName );
__declspec(implementation_key(97)) HRESULT IXMLDOMElement::normalize ( );
__declspec(implementation_key(98)) _bstr_t IXMLDOMAttribute::Getname ( );
__declspec(implementation_key(99)) _variant_t IXMLDOMAttribute::Getvalue ( );
__declspec(implementation_key(100)) void IXMLDOMAttribute::Putvalue ( const _variant_t & attributeValue );
__declspec(implementation_key(101)) _bstr_t IXMLDOMCharacterData::Getdata ( );
__declspec(implementation_key(102)) void IXMLDOMCharacterData::Putdata ( _bstr_t data );
__declspec(implementation_key(103)) long IXMLDOMCharacterData::Getlength ( );
__declspec(implementation_key(104)) _bstr_t IXMLDOMCharacterData::substringData ( long offset, long count );
__declspec(implementation_key(105)) HRESULT IXMLDOMCharacterData::appendData ( _bstr_t data );
__declspec(implementation_key(106)) HRESULT IXMLDOMCharacterData::insertData ( long offset, _bstr_t data );
__declspec(implementation_key(107)) HRESULT IXMLDOMCharacterData::deleteData ( long offset, long count );
__declspec(implementation_key(108)) HRESULT IXMLDOMCharacterData::replaceData ( long offset, long count, _bstr_t data );
__declspec(implementation_key(109)) IXMLDOMTextPtr IXMLDOMText::splitText ( long offset );
__declspec(implementation_key(110)) _bstr_t IXMLDOMProcessingInstruction::Gettarget ( );
__declspec(implementation_key(111)) _bstr_t IXMLDOMProcessingInstruction::Getdata ( );
__declspec(implementation_key(112)) void IXMLDOMProcessingInstruction::Putdata ( _bstr_t value );
__declspec(implementation_key(113)) long IXMLDOMParseError::GeterrorCode ( );
__declspec(implementation_key(114)) _bstr_t IXMLDOMParseError::Geturl ( );
__declspec(implementation_key(115)) _bstr_t IXMLDOMParseError::Getreason ( );
__declspec(implementation_key(116)) _bstr_t IXMLDOMParseError::GetsrcText ( );
__declspec(implementation_key(117)) long IXMLDOMParseError::Getline ( );
__declspec(implementation_key(118)) long IXMLDOMParseError::Getlinepos ( );
__declspec(implementation_key(119)) long IXMLDOMParseError::Getfilepos ( );
__declspec(implementation_key(120)) IXMLDOMSchemaCollectionPtr IXMLDOMDocument2::Getnamespaces ( );
__declspec(implementation_key(121)) _variant_t IXMLDOMDocument2::Getschemas ( );
__declspec(implementation_key(122)) void IXMLDOMDocument2::PutRefschemas ( const _variant_t & otherCollection );
__declspec(implementation_key(123)) IXMLDOMParseErrorPtr IXMLDOMDocument2::validate ( );
__declspec(implementation_key(124)) HRESULT IXMLDOMDocument2::setProperty ( _bstr_t name, const _variant_t & value );
__declspec(implementation_key(125)) _variant_t IXMLDOMDocument2::getProperty ( _bstr_t name );
__declspec(implementation_key(126)) HRESULT IXMLDOMSchemaCollection::add ( _bstr_t namespaceURI, const _variant_t & var );
__declspec(implementation_key(127)) IXMLDOMNodePtr IXMLDOMSchemaCollection::get ( _bstr_t namespaceURI );
__declspec(implementation_key(128)) HRESULT IXMLDOMSchemaCollection::remove ( _bstr_t namespaceURI );
__declspec(implementation_key(129)) long IXMLDOMSchemaCollection::Getlength ( );
__declspec(implementation_key(130)) _bstr_t IXMLDOMSchemaCollection::GetnamespaceURI ( long index );
__declspec(implementation_key(131)) HRESULT IXMLDOMSchemaCollection::addCollection ( struct IXMLDOMSchemaCollection * otherCollection );
__declspec(implementation_key(132)) IUnknownPtr IXMLDOMSchemaCollection::Get_newEnum ( );
__declspec(implementation_key(133)) _variant_t IXMLDOMNotation::GetpublicId ( );
__declspec(implementation_key(134)) _variant_t IXMLDOMNotation::GetsystemId ( );
__declspec(implementation_key(135)) _variant_t IXMLDOMEntity::GetpublicId ( );
__declspec(implementation_key(136)) _variant_t IXMLDOMEntity::GetsystemId ( );
__declspec(implementation_key(137)) _bstr_t IXMLDOMEntity::GetnotationName ( );
__declspec(implementation_key(138)) long IXTLRuntime::uniqueID ( struct IXMLDOMNode * pNode );
__declspec(implementation_key(139)) long IXTLRuntime::depth ( struct IXMLDOMNode * pNode );
__declspec(implementation_key(140)) long IXTLRuntime::childNumber ( struct IXMLDOMNode * pNode );
__declspec(implementation_key(141)) long IXTLRuntime::ancestorChildNumber ( _bstr_t bstrNodeName, struct IXMLDOMNode * pNode );
__declspec(implementation_key(142)) long IXTLRuntime::absoluteChildNumber ( struct IXMLDOMNode * pNode );
__declspec(implementation_key(143)) _bstr_t IXTLRuntime::formatIndex ( long lIndex, _bstr_t bstrFormat );
__declspec(implementation_key(144)) _bstr_t IXTLRuntime::formatNumber ( double dblNumber, _bstr_t bstrFormat );
__declspec(implementation_key(145)) _bstr_t IXTLRuntime::formatDate ( const _variant_t & varDate, _bstr_t bstrFormat, const _variant_t & varDestLocale );
__declspec(implementation_key(146)) _bstr_t IXTLRuntime::formatTime ( const _variant_t & varTime, _bstr_t bstrFormat, const _variant_t & varDestLocale );
__declspec(implementation_key(147)) void IXSLTemplate::PutRefstylesheet ( struct IXMLDOMNode * stylesheet );
__declspec(implementation_key(148)) IXMLDOMNodePtr IXSLTemplate::Getstylesheet ( );
__declspec(implementation_key(149)) IXSLProcessorPtr IXSLTemplate::createProcessor ( );
__declspec(implementation_key(150)) void IXSLProcessor::Putinput ( const _variant_t & pVar );
__declspec(implementation_key(151)) _variant_t IXSLProcessor::Getinput ( );
__declspec(implementation_key(152)) IXSLTemplatePtr IXSLProcessor::GetownerTemplate ( );
__declspec(implementation_key(153)) HRESULT IXSLProcessor::setStartMode ( _bstr_t mode, _bstr_t namespaceURI );
__declspec(implementation_key(154)) _bstr_t IXSLProcessor::GetstartMode ( );
__declspec(implementation_key(155)) _bstr_t IXSLProcessor::GetstartModeURI ( );
__declspec(implementation_key(156)) void IXSLProcessor::Putoutput ( const _variant_t & pOutput );
__declspec(implementation_key(157)) _variant_t IXSLProcessor::Getoutput ( );
__declspec(implementation_key(158)) VARIANT_BOOL IXSLProcessor::transform ( );
__declspec(implementation_key(159)) HRESULT IXSLProcessor::reset ( );
__declspec(implementation_key(160)) long IXSLProcessor::GetreadyState ( );
__declspec(implementation_key(161)) HRESULT IXSLProcessor::addParameter ( _bstr_t baseName, const _variant_t & parameter, _bstr_t namespaceURI );
__declspec(implementation_key(162)) HRESULT IXSLProcessor::addObject ( IDispatch * obj, _bstr_t namespaceURI );
__declspec(implementation_key(163)) IXMLDOMNodePtr IXSLProcessor::Getstylesheet ( );
__declspec(implementation_key(164)) VARIANT_BOOL ISAXXMLReader::getFeature ( unsigned short * pwchName );
__declspec(implementation_key(165)) HRESULT ISAXXMLReader::putFeature ( unsigned short * pwchName, VARIANT_BOOL vfValue );
__declspec(implementation_key(166)) _variant_t ISAXXMLReader::getProperty ( unsigned short * pwchName );
__declspec(implementation_key(167)) HRESULT ISAXXMLReader::putProperty ( unsigned short * pwchName, const _variant_t & varValue );
__declspec(implementation_key(168)) ISAXEntityResolverPtr ISAXXMLReader::getEntityResolver ( );
__declspec(implementation_key(169)) HRESULT ISAXXMLReader::putEntityResolver ( struct ISAXEntityResolver * pResolver );
__declspec(implementation_key(170)) ISAXContentHandlerPtr ISAXXMLReader::getContentHandler ( );
__declspec(implementation_key(171)) HRESULT ISAXXMLReader::putContentHandler ( struct ISAXContentHandler * pHandler );
__declspec(implementation_key(172)) ISAXDTDHandlerPtr ISAXXMLReader::getDTDHandler ( );
__declspec(implementation_key(173)) HRESULT ISAXXMLReader::putDTDHandler ( struct ISAXDTDHandler * pHandler );
__declspec(implementation_key(174)) ISAXErrorHandlerPtr ISAXXMLReader::getErrorHandler ( );
__declspec(implementation_key(175)) HRESULT ISAXXMLReader::putErrorHandler ( struct ISAXErrorHandler * pHandler );
__declspec(implementation_key(176)) unsigned short * ISAXXMLReader::getBaseURL ( );
__declspec(implementation_key(177)) HRESULT ISAXXMLReader::putBaseURL ( unsigned short * pwchBaseUrl );
__declspec(implementation_key(178)) unsigned short * ISAXXMLReader::getSecureBaseURL ( );
__declspec(implementation_key(179)) HRESULT ISAXXMLReader::putSecureBaseURL ( unsigned short * pwchSecureBaseUrl );
__declspec(implementation_key(180)) HRESULT ISAXXMLReader::parse ( const _variant_t & varInput );
__declspec(implementation_key(181)) HRESULT ISAXXMLReader::parseURL ( unsigned short * pwchUrl );
__declspec(implementation_key(182)) _variant_t ISAXEntityResolver::resolveEntity ( unsigned short * pwchPublicId, unsigned short * pwchSystemId );
__declspec(implementation_key(183)) HRESULT ISAXContentHandler::putDocumentLocator ( struct ISAXLocator * pLocator );
__declspec(implementation_key(184)) HRESULT ISAXContentHandler::startDocument ( );
__declspec(implementation_key(185)) HRESULT ISAXContentHandler::endDocument ( );
__declspec(implementation_key(186)) HRESULT ISAXContentHandler::startPrefixMapping ( unsigned short * pwchPrefix, int cchPrefix, unsigned short * pwchUri, int cchUri );
__declspec(implementation_key(187)) HRESULT ISAXContentHandler::endPrefixMapping ( unsigned short * pwchPrefix, int cchPrefix );
__declspec(implementation_key(188)) HRESULT ISAXContentHandler::startElement ( unsigned short * pwchNamespaceUri, int cchNamespaceUri, unsigned short * pwchLocalName, int cchLocalName, unsigned short * pwchQName, int cchQName, struct ISAXAttributes * pAttributes );
__declspec(implementation_key(189)) HRESULT ISAXContentHandler::endElement ( unsigned short * pwchNamespaceUri, int cchNamespaceUri, unsigned short * pwchLocalName, int cchLocalName, unsigned short * pwchQName, int cchQName );
__declspec(implementation_key(190)) HRESULT ISAXContentHandler::characters ( unsigned short * pwchChars, int cchChars );
__declspec(implementation_key(191)) HRESULT ISAXContentHandler::ignorableWhitespace ( unsigned short * pwchChars, int cchChars );
__declspec(implementation_key(192)) HRESULT ISAXContentHandler::processingInstruction ( unsigned short * pwchTarget, int cchTarget, unsigned short * pwchData, int cchData );
__declspec(implementation_key(193)) HRESULT ISAXContentHandler::skippedEntity ( unsigned short * pwchName, int cchName );
__declspec(implementation_key(194)) int ISAXLocator::getColumnNumber ( );
__declspec(implementation_key(195)) int ISAXLocator::getLineNumber ( );
__declspec(implementation_key(196)) unsigned short * ISAXLocator::getPublicId ( );
__declspec(implementation_key(197)) unsigned short * ISAXLocator::getSystemId ( );
__declspec(implementation_key(198)) int ISAXAttributes::getLength ( );
__declspec(implementation_key(199)) HRESULT ISAXAttributes::getURI ( int nIndex, unsigned short * * ppwchUri, int * pcchUri );
__declspec(implementation_key(200)) HRESULT ISAXAttributes::getLocalName ( int nIndex, unsigned short * * ppwchLocalName, int * pcchLocalName );
__declspec(implementation_key(201)) HRESULT ISAXAttributes::getQName ( int nIndex, unsigned short * * ppwchQName, int * pcchQName );
__declspec(implementation_key(202)) HRESULT ISAXAttributes::getName ( int nIndex, unsigned short * * ppwchUri, int * pcchUri, unsigned short * * ppwchLocalName, int * pcchLocalName, unsigned short * * ppwchQName, int * pcchQName );
__declspec(implementation_key(203)) int ISAXAttributes::getIndexFromName ( unsigned short * pwchUri, int cchUri, unsigned short * pwchLocalName, int cchLocalName );
__declspec(implementation_key(204)) int ISAXAttributes::getIndexFromQName ( unsigned short * pwchQName, int cchQName );
__declspec(implementation_key(205)) HRESULT ISAXAttributes::getType ( int nIndex, unsigned short * * ppwchType, int * pcchType );
__declspec(implementation_key(206)) HRESULT ISAXAttributes::getTypeFromName ( unsigned short * pwchUri, int cchUri, unsigned short * pwchLocalName, int cchLocalName, unsigned short * * ppwchType, int * pcchType );
__declspec(implementation_key(207)) HRESULT ISAXAttributes::getTypeFromQName ( unsigned short * pwchQName, int cchQName, unsigned short * * ppwchType, int * pcchType );
__declspec(implementation_key(208)) HRESULT ISAXAttributes::getValue ( int nIndex, unsigned short * * ppwchValue, int * pcchValue );
__declspec(implementation_key(209)) HRESULT ISAXAttributes::getValueFromName ( unsigned short * pwchUri, int cchUri, unsigned short * pwchLocalName, int cchLocalName, unsigned short * * ppwchValue, int * pcchValue );
__declspec(implementation_key(210)) HRESULT ISAXAttributes::getValueFromQName ( unsigned short * pwchQName, int cchQName, unsigned short * * ppwchValue, int * pcchValue );
__declspec(implementation_key(211)) HRESULT ISAXDTDHandler::notationDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchPublicId, int cchPublicId, unsigned short * pwchSystemId, int cchSystemId );
__declspec(implementation_key(212)) HRESULT ISAXDTDHandler::unparsedEntityDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchPublicId, int cchPublicId, unsigned short * pwchSystemId, int cchSystemId, unsigned short * pwchNotationName, int cchNotationName );
__declspec(implementation_key(213)) HRESULT ISAXErrorHandler::error ( struct ISAXLocator * pLocator, unsigned short * pwchErrorMessage, HRESULT hrErrorCode );
__declspec(implementation_key(214)) HRESULT ISAXErrorHandler::fatalError ( struct ISAXLocator * pLocator, unsigned short * pwchErrorMessage, HRESULT hrErrorCode );
__declspec(implementation_key(215)) HRESULT ISAXErrorHandler::ignorableWarning ( struct ISAXLocator * pLocator, unsigned short * pwchErrorMessage, HRESULT hrErrorCode );
__declspec(implementation_key(216)) ISAXXMLReaderPtr ISAXXMLFilter::getParent ( );
__declspec(implementation_key(217)) HRESULT ISAXXMLFilter::putParent ( struct ISAXXMLReader * pReader );
__declspec(implementation_key(218)) HRESULT ISAXLexicalHandler::startDTD ( unsigned short * pwchName, int cchName, unsigned short * pwchPublicId, int cchPublicId, unsigned short * pwchSystemId, int cchSystemId );
__declspec(implementation_key(219)) HRESULT ISAXLexicalHandler::endDTD ( );
__declspec(implementation_key(220)) HRESULT ISAXLexicalHandler::startEntity ( unsigned short * pwchName, int cchName );
__declspec(implementation_key(221)) HRESULT ISAXLexicalHandler::endEntity ( unsigned short * pwchName, int cchName );
__declspec(implementation_key(222)) HRESULT ISAXLexicalHandler::startCDATA ( );
__declspec(implementation_key(223)) HRESULT ISAXLexicalHandler::endCDATA ( );
__declspec(implementation_key(224)) HRESULT ISAXLexicalHandler::comment ( unsigned short * pwchChars, int cchChars );
__declspec(implementation_key(225)) HRESULT ISAXDeclHandler::elementDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchModel, int cchModel );
__declspec(implementation_key(226)) HRESULT ISAXDeclHandler::attributeDecl ( unsigned short * pwchElementName, int cchElementName, unsigned short * pwchAttributeName, int cchAttributeName, unsigned short * pwchType, int cchType, unsigned short * pwchValueDefault, int cchValueDefault, unsigned short * pwchValue, int cchValue );
__declspec(implementation_key(227)) HRESULT ISAXDeclHandler::internalEntityDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchValue, int cchValue );
__declspec(implementation_key(228)) HRESULT ISAXDeclHandler::externalEntityDecl ( unsigned short * pwchName, int cchName, unsigned short * pwchPublicId, int cchPublicId, unsigned short * pwchSystemId, int cchSystemId );
__declspec(implementation_key(229)) VARIANT_BOOL IVBSAXXMLReader::getFeature ( _bstr_t strName );
__declspec(implementation_key(230)) HRESULT IVBSAXXMLReader::putFeature ( _bstr_t strName, VARIANT_BOOL fValue );
__declspec(implementation_key(231)) _variant_t IVBSAXXMLReader::getProperty ( _bstr_t strName );
__declspec(implementation_key(232)) HRESULT IVBSAXXMLReader::putProperty ( _bstr_t strName, const _variant_t & varValue );
__declspec(implementation_key(233)) IVBSAXEntityResolverPtr IVBSAXXMLReader::GetentityResolver ( );
__declspec(implementation_key(234)) void IVBSAXXMLReader::PutRefentityResolver ( struct IVBSAXEntityResolver * oResolver );
__declspec(implementation_key(235)) IVBSAXContentHandlerPtr IVBSAXXMLReader::GetcontentHandler ( );
__declspec(implementation_key(236)) void IVBSAXXMLReader::PutRefcontentHandler ( struct IVBSAXContentHandler * oHandler );
__declspec(implementation_key(237)) IVBSAXDTDHandlerPtr IVBSAXXMLReader::GetdtdHandler ( );
__declspec(implementation_key(238)) void IVBSAXXMLReader::PutRefdtdHandler ( struct IVBSAXDTDHandler * oHandler );
__declspec(implementation_key(239)) IVBSAXErrorHandlerPtr IVBSAXXMLReader::GeterrorHandler ( );
__declspec(implementation_key(240)) void IVBSAXXMLReader::PutReferrorHandler ( struct IVBSAXErrorHandler * oHandler );
__declspec(implementation_key(241)) _bstr_t IVBSAXXMLReader::GetbaseURL ( );
__declspec(implementation_key(242)) void IVBSAXXMLReader::PutbaseURL ( _bstr_t strBaseURL );
__declspec(implementation_key(243)) _bstr_t IVBSAXXMLReader::GetsecureBaseURL ( );
__declspec(implementation_key(244)) void IVBSAXXMLReader::PutsecureBaseURL ( _bstr_t strSecureBaseURL );
__declspec(implementation_key(245)) HRESULT IVBSAXXMLReader::parse ( const _variant_t & varInput );
__declspec(implementation_key(246)) HRESULT IVBSAXXMLReader::parseURL ( _bstr_t strURL );
__declspec(implementation_key(247)) _variant_t IVBSAXEntityResolver::resolveEntity ( BSTR * strPublicId, BSTR * strSystemId );
__declspec(implementation_key(248)) void IVBSAXContentHandler::PutRefdocumentLocator ( struct IVBSAXLocator * _arg1 );
__declspec(implementation_key(249)) HRESULT IVBSAXContentHandler::startDocument ( );
__declspec(implementation_key(250)) HRESULT IVBSAXContentHandler::endDocument ( );
__declspec(implementation_key(251)) HRESULT IVBSAXContentHandler::startPrefixMapping ( BSTR * strPrefix, BSTR * strURI );
__declspec(implementation_key(252)) HRESULT IVBSAXContentHandler::endPrefixMapping ( BSTR * strPrefix );
__declspec(implementation_key(253)) HRESULT IVBSAXContentHandler::startElement ( BSTR * strNamespaceURI, BSTR * strLocalName, BSTR * strQName, struct IVBSAXAttributes * oAttributes );
__declspec(implementation_key(254)) HRESULT IVBSAXContentHandler::endElement ( BSTR * strNamespaceURI, BSTR * strLocalName, BSTR * strQName );
__declspec(implementation_key(255)) HRESULT IVBSAXContentHandler::characters ( BSTR * strChars );
__declspec(implementation_key(256)) HRESULT IVBSAXContentHandler::ignorableWhitespace ( BSTR * strChars );
__declspec(implementation_key(257)) HRESULT IVBSAXContentHandler::processingInstruction ( BSTR * strTarget, BSTR * strData );
__declspec(implementation_key(258)) HRESULT IVBSAXContentHandler::skippedEntity ( BSTR * strName );
__declspec(implementation_key(259)) int IVBSAXLocator::GetcolumnNumber ( );
__declspec(implementation_key(260)) int IVBSAXLocator::GetlineNumber ( );
__declspec(implementation_key(261)) _bstr_t IVBSAXLocator::GetpublicId ( );
__declspec(implementation_key(262)) _bstr_t IVBSAXLocator::GetsystemId ( );
__declspec(implementation_key(263)) int IVBSAXAttributes::Getlength ( );
__declspec(implementation_key(264)) _bstr_t IVBSAXAttributes::getURI ( int nIndex );
__declspec(implementation_key(265)) _bstr_t IVBSAXAttributes::getLocalName ( int nIndex );
__declspec(implementation_key(266)) _bstr_t IVBSAXAttributes::getQName ( int nIndex );
__declspec(implementation_key(267)) int IVBSAXAttributes::getIndexFromName ( _bstr_t strURI, _bstr_t strLocalName );
__declspec(implementation_key(268)) int IVBSAXAttributes::getIndexFromQName ( _bstr_t strQName );
__declspec(implementation_key(269)) _bstr_t IVBSAXAttributes::getType ( int nIndex );
__declspec(implementation_key(270)) _bstr_t IVBSAXAttributes::getTypeFromName ( _bstr_t strURI, _bstr_t strLocalName );
__declspec(implementation_key(271)) _bstr_t IVBSAXAttributes::getTypeFromQName ( _bstr_t strQName );
__declspec(implementation_key(272)) _bstr_t IVBSAXAttributes::getValue ( int nIndex );
__declspec(implementation_key(273)) _bstr_t IVBSAXAttributes::getValueFromName ( _bstr_t strURI, _bstr_t strLocalName );
__declspec(implementation_key(274)) _bstr_t IVBSAXAttributes::getValueFromQName ( _bstr_t strQName );
__declspec(implementation_key(275)) HRESULT IVBSAXDTDHandler::notationDecl ( BSTR * strName, BSTR * strPublicId, BSTR * strSystemId );
__declspec(implementation_key(276)) HRESULT IVBSAXDTDHandler::unparsedEntityDecl ( BSTR * strName, BSTR * strPublicId, BSTR * strSystemId, BSTR * strNotationName );
__declspec(implementation_key(277)) HRESULT IVBSAXErrorHandler::error ( struct IVBSAXLocator * oLocator, BSTR * strErrorMessage, long nErrorCode );
__declspec(implementation_key(278)) HRESULT IVBSAXErrorHandler::fatalError ( struct IVBSAXLocator * oLocator, BSTR * strErrorMessage, long nErrorCode );
__declspec(implementation_key(279)) HRESULT IVBSAXErrorHandler::ignorableWarning ( struct IVBSAXLocator * oLocator, BSTR * strErrorMessage, long nErrorCode );
__declspec(implementation_key(280)) IVBSAXXMLReaderPtr IVBSAXXMLFilter::Getparent ( );
__declspec(implementation_key(281)) void IVBSAXXMLFilter::PutRefparent ( struct IVBSAXXMLReader * oReader );
__declspec(implementation_key(282)) HRESULT IVBSAXLexicalHandler::startDTD ( BSTR * strName, BSTR * strPublicId, BSTR * strSystemId );
__declspec(implementation_key(283)) HRESULT IVBSAXLexicalHandler::endDTD ( );
__declspec(implementation_key(284)) HRESULT IVBSAXLexicalHandler::startEntity ( BSTR * strName );
__declspec(implementation_key(285)) HRESULT IVBSAXLexicalHandler::endEntity ( BSTR * strName );
__declspec(implementation_key(286)) HRESULT IVBSAXLexicalHandler::startCDATA ( );
__declspec(implementation_key(287)) HRESULT IVBSAXLexicalHandler::endCDATA ( );
__declspec(implementation_key(288)) HRESULT IVBSAXLexicalHandler::comment ( BSTR * strChars );
__declspec(implementation_key(289)) HRESULT IVBSAXDeclHandler::elementDecl ( BSTR * strName, BSTR * strModel );
__declspec(implementation_key(290)) HRESULT IVBSAXDeclHandler::attributeDecl ( BSTR * strElementName, BSTR * strAttributeName, BSTR * strType, BSTR * strValueDefault, BSTR * strValue );
__declspec(implementation_key(291)) HRESULT IVBSAXDeclHandler::internalEntityDecl ( BSTR * strName, BSTR * strValue );
__declspec(implementation_key(292)) HRESULT IVBSAXDeclHandler::externalEntityDecl ( BSTR * strName, BSTR * strPublicId, BSTR * strSystemId );
__declspec(implementation_key(293)) void IMXWriter::Putoutput ( const _variant_t & varDestination );
__declspec(implementation_key(294)) _variant_t IMXWriter::Getoutput ( );
__declspec(implementation_key(295)) void IMXWriter::Putencoding ( _bstr_t strEncoding );
__declspec(implementation_key(296)) _bstr_t IMXWriter::Getencoding ( );
__declspec(implementation_key(297)) void IMXWriter::PutbyteOrderMark ( VARIANT_BOOL fWriteByteOrderMark );
__declspec(implementation_key(298)) VARIANT_BOOL IMXWriter::GetbyteOrderMark ( );
__declspec(implementation_key(299)) void IMXWriter::Putindent ( VARIANT_BOOL fIndentMode );
__declspec(implementation_key(300)) VARIANT_BOOL IMXWriter::Getindent ( );
__declspec(implementation_key(301)) void IMXWriter::Putstandalone ( VARIANT_BOOL fValue );
__declspec(implementation_key(302)) VARIANT_BOOL IMXWriter::Getstandalone ( );
__declspec(implementation_key(303)) void IMXWriter::PutomitXMLDeclaration ( VARIANT_BOOL fValue );
__declspec(implementation_key(304)) VARIANT_BOOL IMXWriter::GetomitXMLDeclaration ( );
__declspec(implementation_key(305)) void IMXWriter::Putversion ( _bstr_t strVersion );
__declspec(implementation_key(306)) _bstr_t IMXWriter::Getversion ( );
__declspec(implementation_key(307)) void IMXWriter::PutdisableOutputEscaping ( VARIANT_BOOL fValue );
__declspec(implementation_key(308)) VARIANT_BOOL IMXWriter::GetdisableOutputEscaping ( );
__declspec(implementation_key(309)) HRESULT IMXWriter::flush ( );
__declspec(implementation_key(310)) HRESULT IMXAttributes::addAttribute ( _bstr_t strURI, _bstr_t strLocalName, _bstr_t strQName, _bstr_t strType, _bstr_t strValue );
__declspec(implementation_key(311)) HRESULT IMXAttributes::addAttributeFromIndex ( const _variant_t & varAtts, int nIndex );
__declspec(implementation_key(312)) HRESULT IMXAttributes::clear ( );
__declspec(implementation_key(313)) HRESULT IMXAttributes::removeAttribute ( int nIndex );
__declspec(implementation_key(314)) HRESULT IMXAttributes::setAttribute ( int nIndex, _bstr_t strURI, _bstr_t strLocalName, _bstr_t strQName, _bstr_t strType, _bstr_t strValue );
__declspec(implementation_key(315)) HRESULT IMXAttributes::setAttributes ( const _variant_t & varAtts );
__declspec(implementation_key(316)) HRESULT IMXAttributes::setLocalName ( int nIndex, _bstr_t strLocalName );
__declspec(implementation_key(317)) HRESULT IMXAttributes::setQName ( int nIndex, _bstr_t strQName );
__declspec(implementation_key(318)) HRESULT IMXAttributes::setType ( int nIndex, _bstr_t strType );
__declspec(implementation_key(319)) HRESULT IMXAttributes::setURI ( int nIndex, _bstr_t strURI );
__declspec(implementation_key(320)) HRESULT IMXAttributes::setValue ( int nIndex, _bstr_t strValue );
__declspec(implementation_key(321)) HRESULT IMXReaderControl::abort ( );
__declspec(implementation_key(322)) HRESULT IMXReaderControl::resume ( );
__declspec(implementation_key(323)) HRESULT IMXReaderControl::suspend ( );
__declspec(implementation_key(324)) HRESULT IMXSchemaDeclHandler::schemaElementDecl ( struct ISchemaElement * oSchemaElement );
__declspec(implementation_key(325)) _bstr_t ISchemaItem::Getname ( );
__declspec(implementation_key(326)) _bstr_t ISchemaItem::GetnamespaceURI ( );
__declspec(implementation_key(327)) ISchemaPtr ISchemaItem::Getschema ( );
__declspec(implementation_key(328)) _bstr_t ISchemaItem::Getid ( );
__declspec(implementation_key(329)) SOMITEMTYPE ISchemaItem::GetitemType ( );
__declspec(implementation_key(330)) IVBSAXAttributesPtr ISchemaItem::GetunhandledAttributes ( );
__declspec(implementation_key(331)) VARIANT_BOOL ISchemaItem::writeAnnotation ( IUnknown * annotationSink );
__declspec(implementation_key(332)) _variant_t ISchemaParticle::GetminOccurs ( );
__declspec(implementation_key(333)) _variant_t ISchemaParticle::GetmaxOccurs ( );
__declspec(implementation_key(334)) ISchemaTypePtr ISchemaElement::Gettype ( );
__declspec(implementation_key(335)) ISchemaComplexTypePtr ISchemaElement::Getscope ( );
__declspec(implementation_key(336)) _bstr_t ISchemaElement::GetdefaultValue ( );
__declspec(implementation_key(337)) _bstr_t ISchemaElement::GetfixedValue ( );
__declspec(implementation_key(338)) VARIANT_BOOL ISchemaElement::GetisNillable ( );
__declspec(implementation_key(339)) ISchemaItemCollectionPtr ISchemaElement::GetidentityConstraints ( );
__declspec(implementation_key(340)) ISchemaElementPtr ISchemaElement::GetsubstitutionGroup ( );
__declspec(implementation_key(341)) SCHEMADERIVATIONMETHOD ISchemaElement::GetsubstitutionGroupExclusions ( );
__declspec(implementation_key(342)) SCHEMADERIVATIONMETHOD ISchemaElement::GetdisallowedSubstitutions ( );
__declspec(implementation_key(343)) VARIANT_BOOL ISchemaElement::GetisAbstract ( );
__declspec(implementation_key(344)) VARIANT_BOOL ISchemaElement::GetisReference ( );
__declspec(implementation_key(345)) _bstr_t ISchema::GettargetNamespace ( );
__declspec(implementation_key(346)) _bstr_t ISchema::Getversion ( );
__declspec(implementation_key(347)) ISchemaItemCollectionPtr ISchema::Gettypes ( );
__declspec(implementation_key(348)) ISchemaItemCollectionPtr ISchema::Getelements ( );
__declspec(implementation_key(349)) ISchemaItemCollectionPtr ISchema::Getattributes ( );
__declspec(implementation_key(350)) ISchemaItemCollectionPtr ISchema::GetattributeGroups ( );
__declspec(implementation_key(351)) ISchemaItemCollectionPtr ISchema::GetmodelGroups ( );
__declspec(implementation_key(352)) ISchemaItemCollectionPtr ISchema::Getnotations ( );
__declspec(implementation_key(353)) ISchemaStringCollectionPtr ISchema::GetschemaLocations ( );
__declspec(implementation_key(354)) ISchemaItemPtr ISchemaItemCollection::Getitem ( long index );
__declspec(implementation_key(355)) ISchemaItemPtr ISchemaItemCollection::itemByName ( _bstr_t name );
__declspec(implementation_key(356)) ISchemaItemPtr ISchemaItemCollection::itemByQName ( _bstr_t name, _bstr_t namespaceURI );
__declspec(implementation_key(357)) long ISchemaItemCollection::Getlength ( );
__declspec(implementation_key(358)) IUnknownPtr ISchemaItemCollection::Get_newEnum ( );
__declspec(implementation_key(359)) _bstr_t ISchemaStringCollection::Getitem ( long index );
__declspec(implementation_key(360)) long ISchemaStringCollection::Getlength ( );
__declspec(implementation_key(361)) IUnknownPtr ISchemaStringCollection::Get_newEnum ( );
__declspec(implementation_key(362)) ISchemaItemCollectionPtr ISchemaType::GetbaseTypes ( );
__declspec(implementation_key(363)) SCHEMADERIVATIONMETHOD ISchemaType::Getfinal ( );
__declspec(implementation_key(364)) SCHEMATYPEVARIETY ISchemaType::Getvariety ( );
__declspec(implementation_key(365)) SCHEMADERIVATIONMETHOD ISchemaType::GetderivedBy ( );
__declspec(implementation_key(366)) VARIANT_BOOL ISchemaType::isValid ( _bstr_t data );
__declspec(implementation_key(367)) _bstr_t ISchemaType::GetminExclusive ( );
__declspec(implementation_key(368)) _bstr_t ISchemaType::GetminInclusive ( );
__declspec(implementation_key(369)) _bstr_t ISchemaType::GetmaxExclusive ( );
__declspec(implementation_key(370)) _bstr_t ISchemaType::GetmaxInclusive ( );
__declspec(implementation_key(371)) _variant_t ISchemaType::GettotalDigits ( );
__declspec(implementation_key(372)) _variant_t ISchemaType::GetfractionDigits ( );
__declspec(implementation_key(373)) _variant_t ISchemaType::Getlength ( );
__declspec(implementation_key(374)) _variant_t ISchemaType::GetminLength ( );
__declspec(implementation_key(375)) _variant_t ISchemaType::GetmaxLength ( );
__declspec(implementation_key(376)) ISchemaStringCollectionPtr ISchemaType::Getenumeration ( );
__declspec(implementation_key(377)) SCHEMAWHITESPACE ISchemaType::Getwhitespace ( );
__declspec(implementation_key(378)) ISchemaStringCollectionPtr ISchemaType::Getpatterns ( );
__declspec(implementation_key(379)) VARIANT_BOOL ISchemaComplexType::GetisAbstract ( );
__declspec(implementation_key(380)) ISchemaAnyPtr ISchemaComplexType::GetanyAttribute ( );
__declspec(implementation_key(381)) ISchemaItemCollectionPtr ISchemaComplexType::Getattributes ( );
__declspec(implementation_key(382)) SCHEMACONTENTTYPE ISchemaComplexType::GetcontentType ( );
__declspec(implementation_key(383)) ISchemaModelGroupPtr ISchemaComplexType::GetcontentModel ( );
__declspec(implementation_key(384)) SCHEMADERIVATIONMETHOD ISchemaComplexType::GetprohibitedSubstitutions ( );
__declspec(implementation_key(385)) ISchemaStringCollectionPtr ISchemaAny::Getnamespaces ( );
__declspec(implementation_key(386)) SCHEMAPROCESSCONTENTS ISchemaAny::GetprocessContents ( );
__declspec(implementation_key(387)) ISchemaItemCollectionPtr ISchemaModelGroup::Getparticles ( );
__declspec(implementation_key(388)) HRESULT IXMLDOMSchemaCollection2::validate ( );
__declspec(implementation_key(389)) void IXMLDOMSchemaCollection2::PutvalidateOnLoad ( VARIANT_BOOL validateOnLoad );
__declspec(implementation_key(390)) VARIANT_BOOL IXMLDOMSchemaCollection2::GetvalidateOnLoad ( );
__declspec(implementation_key(391)) ISchemaPtr IXMLDOMSchemaCollection2::getSchema ( _bstr_t namespaceURI );
__declspec(implementation_key(392)) ISchemaItemPtr IXMLDOMSchemaCollection2::getDeclaration ( struct IXMLDOMNode * node );
__declspec(implementation_key(393)) ISchemaTypePtr ISchemaAttribute::Gettype ( );
__declspec(implementation_key(394)) ISchemaComplexTypePtr ISchemaAttribute::Getscope ( );
__declspec(implementation_key(395)) _bstr_t ISchemaAttribute::GetdefaultValue ( );
__declspec(implementation_key(396)) _bstr_t ISchemaAttribute::GetfixedValue ( );
__declspec(implementation_key(397)) SCHEMAUSE ISchemaAttribute::Getuse ( );
__declspec(implementation_key(398)) VARIANT_BOOL ISchemaAttribute::GetisReference ( );
__declspec(implementation_key(399)) ISchemaAnyPtr ISchemaAttributeGroup::GetanyAttribute ( );
__declspec(implementation_key(400)) ISchemaItemCollectionPtr ISchemaAttributeGroup::Getattributes ( );
__declspec(implementation_key(401)) _bstr_t ISchemaIdentityConstraint::Getselector ( );
__declspec(implementation_key(402)) ISchemaStringCollectionPtr ISchemaIdentityConstraint::Getfields ( );
__declspec(implementation_key(403)) ISchemaIdentityConstraintPtr ISchemaIdentityConstraint::GetreferencedKey ( );
__declspec(implementation_key(404)) _bstr_t ISchemaNotation::GetsystemIdentifier ( );
__declspec(implementation_key(405)) _bstr_t ISchemaNotation::GetpublicIdentifier ( );
__declspec(implementation_key(406)) void IXMLElementCollection::Putlength ( long p );
__declspec(implementation_key(407)) long IXMLElementCollection::Getlength ( );
__declspec(implementation_key(408)) IUnknownPtr IXMLElementCollection::Get_newEnum ( );
__declspec(implementation_key(409)) IDispatchPtr IXMLElementCollection::item ( const _variant_t & var1, const _variant_t & var2 );
__declspec(implementation_key(410)) IXMLElementPtr IXMLDocument::Getroot ( );
__declspec(implementation_key(411)) _bstr_t IXMLDocument::GetfileSize ( );
__declspec(implementation_key(412)) _bstr_t IXMLDocument::GetfileModifiedDate ( );
__declspec(implementation_key(413)) _bstr_t IXMLDocument::GetfileUpdatedDate ( );
__declspec(implementation_key(414)) _bstr_t IXMLDocument::Geturl ( );
__declspec(implementation_key(415)) void IXMLDocument::Puturl ( _bstr_t p );
__declspec(implementation_key(416)) _bstr_t IXMLDocument::GetmimeType ( );
__declspec(implementation_key(417)) long IXMLDocument::GetreadyState ( );
__declspec(implementation_key(418)) _bstr_t IXMLDocument::Getcharset ( );
__declspec(implementation_key(419)) void IXMLDocument::Putcharset ( _bstr_t p );
__declspec(implementation_key(420)) _bstr_t IXMLDocument::Getversion ( );
__declspec(implementation_key(421)) _bstr_t IXMLDocument::Getdoctype ( );
__declspec(implementation_key(422)) _bstr_t IXMLDocument::GetdtdURL ( );
__declspec(implementation_key(423)) IXMLElementPtr IXMLDocument::createElement ( const _variant_t & vType, const _variant_t & var1 );
__declspec(implementation_key(424)) _bstr_t IXMLElement::GettagName ( );
__declspec(implementation_key(425)) void IXMLElement::PuttagName ( _bstr_t p );
__declspec(implementation_key(426)) IXMLElementPtr IXMLElement::Getparent ( );
__declspec(implementation_key(427)) HRESULT IXMLElement::setAttribute ( _bstr_t strPropertyName, const _variant_t & PropertyValue );
__declspec(implementation_key(428)) _variant_t IXMLElement::getAttribute ( _bstr_t strPropertyName );
__declspec(implementation_key(429)) HRESULT IXMLElement::removeAttribute ( _bstr_t strPropertyName );
__declspec(implementation_key(430)) IXMLElementCollectionPtr IXMLElement::Getchildren ( );
__declspec(implementation_key(431)) long IXMLElement::Gettype ( );
__declspec(implementation_key(432)) _bstr_t IXMLElement::Gettext ( );
__declspec(implementation_key(433)) void IXMLElement::Puttext ( _bstr_t p );
__declspec(implementation_key(434)) HRESULT IXMLElement::addChild ( struct IXMLElement * pChildElem, long lIndex, long lReserved );
__declspec(implementation_key(435)) HRESULT IXMLElement::removeChild ( struct IXMLElement * pChildElem );
__declspec(implementation_key(436)) IXMLElement2Ptr IXMLDocument2::Getroot ( );
__declspec(implementation_key(437)) _bstr_t IXMLDocument2::GetfileSize ( );
__declspec(implementation_key(438)) _bstr_t IXMLDocument2::GetfileModifiedDate ( );
__declspec(implementation_key(439)) _bstr_t IXMLDocument2::GetfileUpdatedDate ( );
__declspec(implementation_key(440)) _bstr_t IXMLDocument2::Geturl ( );
__declspec(implementation_key(441)) void IXMLDocument2::Puturl ( _bstr_t p );
__declspec(implementation_key(442)) _bstr_t IXMLDocument2::GetmimeType ( );
__declspec(implementation_key(443)) long IXMLDocument2::GetreadyState ( );
__declspec(implementation_key(444)) _bstr_t IXMLDocument2::Getcharset ( );
__declspec(implementation_key(445)) void IXMLDocument2::Putcharset ( _bstr_t p );
__declspec(implementation_key(446)) _bstr_t IXMLDocument2::Getversion ( );
__declspec(implementation_key(447)) _bstr_t IXMLDocument2::Getdoctype ( );
__declspec(implementation_key(448)) _bstr_t IXMLDocument2::GetdtdURL ( );
__declspec(implementation_key(449)) IXMLElement2Ptr IXMLDocument2::createElement ( const _variant_t & vType, const _variant_t & var1 );
__declspec(implementation_key(450)) VARIANT_BOOL IXMLDocument2::Getasync ( );
__declspec(implementation_key(451)) void IXMLDocument2::Putasync ( VARIANT_BOOL pf );
__declspec(implementation_key(452)) _bstr_t IXMLElement2::GettagName ( );
__declspec(implementation_key(453)) void IXMLElement2::PuttagName ( _bstr_t p );
__declspec(implementation_key(454)) IXMLElement2Ptr IXMLElement2::Getparent ( );
__declspec(implementation_key(455)) HRESULT IXMLElement2::setAttribute ( _bstr_t strPropertyName, const _variant_t & PropertyValue );
__declspec(implementation_key(456)) _variant_t IXMLElement2::getAttribute ( _bstr_t strPropertyName );
__declspec(implementation_key(457)) HRESULT IXMLElement2::removeAttribute ( _bstr_t strPropertyName );
__declspec(implementation_key(458)) IXMLElementCollectionPtr IXMLElement2::Getchildren ( );
__declspec(implementation_key(459)) long IXMLElement2::Gettype ( );
__declspec(implementation_key(460)) _bstr_t IXMLElement2::Gettext ( );
__declspec(implementation_key(461)) void IXMLElement2::Puttext ( _bstr_t p );
__declspec(implementation_key(462)) HRESULT IXMLElement2::addChild ( struct IXMLElement2 * pChildElem, long lIndex, long lReserved );
__declspec(implementation_key(463)) HRESULT IXMLElement2::removeChild ( struct IXMLElement2 * pChildElem );
__declspec(implementation_key(464)) IXMLElementCollectionPtr IXMLElement2::Getattributes ( );
__declspec(implementation_key(465)) _bstr_t IXMLAttribute::Getname ( );
__declspec(implementation_key(466)) _bstr_t IXMLAttribute::Getvalue ( );
__declspec(implementation_key(467)) HRESULT IXMLError::GetErrorInfo ( struct _xml_error * pErrorReturn );
__declspec(implementation_key(468)) _bstr_t IXMLDOMSelection::Getexpr ( );
__declspec(implementation_key(469)) void IXMLDOMSelection::Putexpr ( _bstr_t expression );
__declspec(implementation_key(470)) IXMLDOMNodePtr IXMLDOMSelection::Getcontext ( );
__declspec(implementation_key(471)) void IXMLDOMSelection::PutRefcontext ( struct IXMLDOMNode * ppNode );
__declspec(implementation_key(472)) IXMLDOMNodePtr IXMLDOMSelection::peekNode ( );
__declspec(implementation_key(473)) IXMLDOMNodePtr IXMLDOMSelection::matches ( struct IXMLDOMNode * pNode );
__declspec(implementation_key(474)) IXMLDOMNodePtr IXMLDOMSelection::removeNext ( );
__declspec(implementation_key(475)) HRESULT IXMLDOMSelection::removeAll ( );
__declspec(implementation_key(476)) IXMLDOMSelectionPtr IXMLDOMSelection::clone ( );
__declspec(implementation_key(477)) _variant_t IXMLDOMSelection::getProperty ( _bstr_t name );
__declspec(implementation_key(478)) HRESULT IXMLDOMSelection::setProperty ( _bstr_t name, const _variant_t & value );
__declspec(implementation_key(479)) HRESULT XMLDOMDocumentEvents::ondataavailable ( );
__declspec(implementation_key(480)) HRESULT XMLDOMDocumentEvents::onreadystatechange ( );
__declspec(implementation_key(481)) IXMLDOMDocumentPtr IDSOControl::GetXMLDocument ( );
__declspec(implementation_key(482)) void IDSOControl::PutXMLDocument ( struct IXMLDOMDocument * ppDoc );
__declspec(implementation_key(483)) long IDSOControl::GetJavaDSOCompatible ( );
__declspec(implementation_key(484)) void IDSOControl::PutJavaDSOCompatible ( long fJavaDSOCompatible );
__declspec(implementation_key(485)) long IDSOControl::GetreadyState ( );
__declspec(implementation_key(486)) HRESULT IXMLHTTPRequest::open ( _bstr_t bstrMethod, _bstr_t bstrUrl, const _variant_t & varAsync, const _variant_t & bstrUser, const _variant_t & bstrPassword );
__declspec(implementation_key(487)) HRESULT IXMLHTTPRequest::setRequestHeader ( _bstr_t bstrHeader, _bstr_t bstrValue );
__declspec(implementation_key(488)) _bstr_t IXMLHTTPRequest::getResponseHeader ( _bstr_t bstrHeader );
__declspec(implementation_key(489)) _bstr_t IXMLHTTPRequest::getAllResponseHeaders ( );
__declspec(implementation_key(490)) HRESULT IXMLHTTPRequest::send ( const _variant_t & varBody );
__declspec(implementation_key(491)) HRESULT IXMLHTTPRequest::abort ( );
__declspec(implementation_key(492)) long IXMLHTTPRequest::Getstatus ( );
__declspec(implementation_key(493)) _bstr_t IXMLHTTPRequest::GetstatusText ( );
__declspec(implementation_key(494)) IDispatchPtr IXMLHTTPRequest::GetresponseXML ( );
__declspec(implementation_key(495)) _bstr_t IXMLHTTPRequest::GetresponseText ( );
__declspec(implementation_key(496)) _variant_t IXMLHTTPRequest::GetresponseBody ( );
__declspec(implementation_key(497)) _variant_t IXMLHTTPRequest::GetresponseStream ( );
__declspec(implementation_key(498)) long IXMLHTTPRequest::GetreadyState ( );
__declspec(implementation_key(499)) void IXMLHTTPRequest::Putonreadystatechange ( IDispatch * _arg1 );
__declspec(implementation_key(500)) HRESULT IServerXMLHTTPRequest::setTimeouts ( long resolveTimeout, long connectTimeout, long sendTimeout, long receiveTimeout );
__declspec(implementation_key(501)) VARIANT_BOOL IServerXMLHTTPRequest::waitForResponse ( const _variant_t & timeoutInSeconds );
__declspec(implementation_key(502)) _variant_t IServerXMLHTTPRequest::getOption ( SERVERXMLHTTP_OPTION option );
__declspec(implementation_key(503)) HRESULT IServerXMLHTTPRequest::setOption ( SERVERXMLHTTP_OPTION option, const _variant_t & value );
__declspec(implementation_key(504)) HRESULT IServerXMLHTTPRequest2::setProxy ( SXH_PROXY_SETTING proxySetting, const _variant_t & varProxyServer, const _variant_t & varBypassList );
__declspec(implementation_key(505)) HRESULT IServerXMLHTTPRequest2::setProxyCredentials ( _bstr_t bstrUserName, _bstr_t bstrPassword );
__declspec(implementation_key(506)) _bstr_t IMXNamespacePrefixes::Getitem ( long index );
__declspec(implementation_key(507)) long IMXNamespacePrefixes::Getlength ( );
__declspec(implementation_key(508)) IUnknownPtr IMXNamespacePrefixes::Get_newEnum ( );
__declspec(implementation_key(509)) void IVBMXNamespaceManager::PutallowOverride ( VARIANT_BOOL fOverride );
__declspec(implementation_key(510)) VARIANT_BOOL IVBMXNamespaceManager::GetallowOverride ( );
__declspec(implementation_key(511)) HRESULT IVBMXNamespaceManager::reset ( );
__declspec(implementation_key(512)) HRESULT IVBMXNamespaceManager::pushContext ( );
__declspec(implementation_key(513)) HRESULT IVBMXNamespaceManager::pushNodeContext ( struct IXMLDOMNode * contextNode, VARIANT_BOOL fDeep );
__declspec(implementation_key(514)) HRESULT IVBMXNamespaceManager::popContext ( );
__declspec(implementation_key(515)) HRESULT IVBMXNamespaceManager::declarePrefix ( _bstr_t prefix, _bstr_t namespaceURI );
__declspec(implementation_key(516)) IMXNamespacePrefixesPtr IVBMXNamespaceManager::getDeclaredPrefixes ( );
__declspec(implementation_key(517)) IMXNamespacePrefixesPtr IVBMXNamespaceManager::getPrefixes ( _bstr_t namespaceURI );
__declspec(implementation_key(518)) _variant_t IVBMXNamespaceManager::getURI ( _bstr_t prefix );
__declspec(implementation_key(519)) _variant_t IVBMXNamespaceManager::getURIFromNode ( _bstr_t strPrefix, struct IXMLDOMNode * contextNode );
__declspec(implementation_key(520)) HRESULT IMXNamespaceManager::putAllowOverride ( VARIANT_BOOL fOverride );
__declspec(implementation_key(521)) VARIANT_BOOL IMXNamespaceManager::getAllowOverride ( );
__declspec(implementation_key(522)) HRESULT IMXNamespaceManager::reset ( );
__declspec(implementation_key(523)) HRESULT IMXNamespaceManager::pushContext ( );
__declspec(implementation_key(524)) HRESULT IMXNamespaceManager::pushNodeContext ( struct IXMLDOMNode * contextNode, VARIANT_BOOL fDeep );
__declspec(implementation_key(525)) HRESULT IMXNamespaceManager::popContext ( );
__declspec(implementation_key(526)) HRESULT IMXNamespaceManager::declarePrefix ( unsigned short * prefix, unsigned short * namespaceURI );
__declspec(implementation_key(527)) HRESULT IMXNamespaceManager::getDeclaredPrefix ( long nIndex, unsigned short * pwchPrefix, int * pcchPrefix );
__declspec(implementation_key(528)) HRESULT IMXNamespaceManager::getPrefix ( unsigned short * pwszNamespaceURI, long nIndex, unsigned short * pwchPrefix, int * pcchPrefix );
__declspec(implementation_key(529)) HRESULT IMXNamespaceManager::getURI ( unsigned short * pwchPrefix, struct IXMLDOMNode * pContextNode, unsigned short * pwchUri, int * pcchUri );
#pragma stop_map_region

} // namespace MSXML2

#pragma pack(pop)
