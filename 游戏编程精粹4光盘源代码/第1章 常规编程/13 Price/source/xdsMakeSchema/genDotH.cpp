// ----------------------------------------------------------------------------
// 
// This file is part of the XDS Toolkit, Copyright (C) 2003 Mark T. Price
// For conditions of distribution and use, see XdsLicense.h
//
// ----------------------------------------------------------------------------

#include "XDSinternal.h"
#include "xdsMakeSchema.h"
//#include "IOBuffer.h"
#include "Trie.h"
#include <string>

using namespace std;

CxdsBuffer xdsIoBuffer;


#define VALSPERLINE 16

bool GenData(const u8 *lpBuffer, int iBuflen, string &sOut)
{
	static char *hexdigits = "0123456789abcdef";

	sOut = "";

	int ii, jj;
	for(ii=0, jj=0; ii < iBuflen; ++ii, ++jj)
	{
		string sValue = "";

		// output number separator if past first
		if(ii)
			sValue += ", ";
		if(jj >= VALSPERLINE)
		{
			sValue += '\n';
			jj = 0;
		}
		if(!jj && iBuflen != 1)
		{
			sValue += "\t";
		}

		// convert number to output
		sValue += "0x";
		u8 dwVal = *lpBuffer++;
		for(u8 dwDiv = 0x10; dwDiv > 0; dwDiv /= 16)
		{
			sValue += hexdigits[dwVal/dwDiv];
			dwVal %= dwDiv;
		}

		sOut += sValue;
	}
	if(jj && iBuflen != 1)
	{
		sOut += '\n';
	}

	return true;
}

void writeDsdDotH(FILE *fp, xdsHandle *hXds)
{
	const char *szStreamName = makeStreamName(hXds);

	// write file intro
	fprintf(fp, "#ifndef XDSDSD_%s_INCL\n"
	            "#define XDSDSD_%s_INCL\n\n"
	            "// XDS DSD for '%s'\n"
	            "//\n"
				"// This file was generated by the XDS toolkit utility 'xdsMakeSchema'\n"
				"// For more information about the XDS toolkit, see the XDS Resources\n"
				"// web page at \"http://www.suddenpresence.com/xds\"\n"
				"//\n\n"
				, szStreamName, szStreamName, szStreamName);

	// write DSD (with #ifdef DEFINE_DSD) -- name is XDSDSD_<docname>
	fprintf(fp, "// XDS DSD literal -- use this in calls to xdsInit()\n"
	            "//\n"
				"#ifdef DEFINE_DSD\n\n");

	fprintf(fp, "const unsigned char XDSDSD_%s[%d] = {\n", szStreamName, xdsIoBuffer.Size());

	string sData;
	if(GenData(xdsIoBuffer.Data(), xdsIoBuffer.Size(), sData))
	{
		fputs(sData.c_str(), fp);
	}

	fprintf(fp, "};\n\n#else\n\n"
	            "extern const unsigned char XDSDSD_%s[%d];\n\n"
                "#endif\n\n\n"
				, szStreamName, xdsIoBuffer.Size());

	// write element IDs -- names are XDS_<docname>_<tagname>
	fprintf(fp, "// XDS DSD IDs -- use these in implementation of XDS_PROCESSNODE()\n"
	            "//\n");

	CTrieIterator it(*hXds->pTypeDb);

	for(; !it.AtEnd(); ++it)
	{
		void *data = it.GetData();
		switch(*(u16*)data)
		{
		case XDS_RECORD_RECORDDEF:
		{
			struct xdsRecord_t *pRec = (struct xdsRecord_t*)data;
			fprintf(fp, "#define XDS_%s_%s\t0x%04x\t// Record\n", szStreamName, pRec->szName, pRec->iRecordId);
			break;
		}
		case XDS_RECORD_ELEMDEF:
		{
			struct xdsElement_t*pElem = (struct xdsElement_t*)data;
			fprintf(fp, "#define XDS_%s_%s\t0x%04x\t// Element\n", szStreamName, pElem->szName, pElem->iTypeId);
			break;
		}
		case XDS_RECORD_TYPEDEF:
		{
			struct xdsType_t *pType = (struct xdsType_t*)data;
			fprintf(fp, "#define XDS_%s_%s\t0x%04x\t// Type\n", szStreamName, pType->szName, pType->iTypeId);
			break;
		}
		}
	}

	// write file closing
	fprintf(fp, "\n\n#endif // XDSDSD_%s_INCL\n", szStreamName);
}
