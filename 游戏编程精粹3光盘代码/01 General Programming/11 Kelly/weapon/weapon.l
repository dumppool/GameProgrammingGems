/*
 *  FILE       : weapon.l
 *
 *  PROGRAMMER : Paul Kelly 
 *               paul_kelly2000@yahoo.com
 *
 *  DESCRIPTION: Lex specification for the data input file.
 *               
 *
 *  NOTES      : flex was used to test this example.  It can
 *               be found at www.gnu.org in the non-gnu tools.
 *
 *               Use the following to generate the lexer:
 *               
 *               flex -oweapon_l.c weapon.l
 *
 *               -o filename that the lexer generated source code
 *                  will be placed.
 *
 *               Also, make sure the necessary lib and .h files are included 
 *               so that compiling and linking work.
 */

%{
/* C code section for lex specification */
#include "weapon_y.h"  /* include token macros generated by yacc */

/*
 *
 *  INCLUDES
 *
 */
#include <stdlib.h>
#include <string.h>

/*
 *
 *  PROTOTYPES
 *
 */

void RemoveComment (void);

%}

/*
 *
 * LEXER SPECIFICATION
 *
 */
%%
START_WEAPON                  {    return TKN_START_WEAPON; }
START_AMMO                    {    return TKN_START_AMMO; }
END                           {    return TKN_END; }
WEAPON                        {    return TKN_WEAPON; }
AMMO                          {    return TKN_AMMO; }
AMMO_CLIP                     {    return TKN_AMMO_CLIP; }
AMMO_TYPE                     {    return TKN_AMMO_TYPE; }
FIRE_RATE                     {    return TKN_FIRE_RATE; }
DAMAGE                        {    return TKN_DAMAGE; }

[0-9]+	                     {    yylval.integer = atoi (yytext);
                                   return TKN_INTEGER; }

"/*"                          {    RemoveComment (); }

[a-zA-Z0-9]*[a-zA-Z][_a-zA-Z0-9]*  {    strcpy (yylval.string, yytext);
                                   return TKN_IDENTIFIER; }


%%
/* C code section for lex specification */

/* function to remove a comment from the input data file. */
void RemoveComment (void)
{
   int   c1 = 0, c2 = input();

   for (;;)
   {
      if (c2 == EOF)
      {
         break;
      }
      if (c1 == '*' && c2 == '/')
      {
         break;
      }
      c1 = c2;
      c2 = input();
   }
}