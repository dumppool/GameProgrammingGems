// Parsed informations from HLA file compilation
//
// Copyright 2007 Hyun-jik Bae.  All rights reserved.
//
// Permission is granted to use this code for any purpose, as long as this
// copyright message remains intact.

#pragma once

#include <antlr/refcount.hpp>

using namespace antlr;

class CSpecification;
class CConfigurations;
class CConfiguration;
class CSynchClass;
class CMember;
class CBehavior;

enum BehaviorType
{
	BehaviorType_Static,
	BehaviorType_Conditional,
};

//////////////////////////////////////////////////////////////////////////
// note that parsed information data are collected from class HLAParser.
// HLAParser is generated by compiling .g file.

/** parsed information data: HLA configuration */
class CConfiguration
{
public:
	CString m_name; // Config variable name
	CString m_value; // config variable value

	void SetName(CString name);
	void SetValue(CString value);
};

/** parsed information data: HLA configuration list */
class CConfigurations
{
public:
	CString m_startID; // the first message identifier declared in HLA file.
	CString m_namespace; // namespace from HLA file
	int m_incID; // the incremented number for each synch class declaration.

	CConfigurations();
	void AddConfig(CConfiguration *config);
};

/** parsed information data: a synch class declaration */
class CSynchClass
{
	int m_memberIDGenerator;
public:
	CString m_ID; // message identifier assigned to this synch class. 
	CString m_name; // synch class name

	// synch class parameters list
	typedef vector<RefCount<CMember> > Members; 
	Members m_members;

	void SetName(CString name);
	void AddMember(RefCount<CMember> param);

	CSynchClass();
};

/** parsed information data: a synch class parameter */
class CMember
{
public:
	// parameter name and type name
	CString m_name,m_type;
	int m_ID;
	RefCount<CBehavior> m_behavior;

	void SetType(CString type);
	void SetName(CString name);
	void SetBehavior(RefCount<CBehavior> behavior);
	CMember();
};


/** main of HLA parsing output */
class CSpecification
{
public:

	// collected configuration variables 
	CConfigurations m_configurations;

	// collected synch class declarations
	typedef vector<CSynchClass> SynchClasses;
	SynchClasses m_synchClasses;

	CSpecification(void);
	~CSpecification(void);

	void SetConfigs(CConfigurations *configs);
	void AddSynchClass(CSynchClass* func);
};

class CBehavior
{
	BehaviorType m_type;
public:
	CBehavior();
	void SetType(BehaviorType type);
	BehaviorType GetType();
	LPCTSTR GetTemplateClassName();
};