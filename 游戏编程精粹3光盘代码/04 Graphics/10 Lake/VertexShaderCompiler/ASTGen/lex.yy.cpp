#line 2 "lex.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 67
#define YY_END_OF_BUFFER 68
static yyconst short int yy_accept[251] =
    {   0,
        0,    0,   68,   66,   66,   63,   48,   46,   47,   66,
       49,   45,   62,   40,   40,   40,   40,   40,   40,   40,
       50,   40,   40,   40,    0,    0,    0,    0,    0,    0,
       65,   64,   45,   45,    0,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
       45,   44,   41,   42,   43,   40,   40,   40,   33,   40,
       40,   40,   40,   40,   40,   40,   40,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       38,   36,   40,    0,    0,   59,    0,    0,    0,    0,
        0,    0,   58,    0,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,    2,    1,   40,   40,    0,
        0,   56,   51,    0,    0,    0,    0,   53,   40,   40,
       40,   40,   28,   29,   40,   40,   40,   40,   34,   40,
       40,   40,   37,   40,    0,    0,   60,    0,    0,    0,
       40,   40,   40,   40,   32,   40,   30,   40,   40,   40,
       40,   40,   40,    0,    0,    0,   54,    0,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   35,   40,   39,
       61,    0,    0,    0,    8,   13,   18,   23,    9,   14,

       19,   24,    7,   12,   17,   22,   11,   16,   21,   26,
       40,   40,   40,   40,   40,    6,    0,   55,    0,   10,
       15,   20,   25,   40,    5,   40,   40,   57,   52,   40,
       40,   40,   31,   40,   40,   40,   40,   40,   40,    4,
       40,   40,   40,   40,   40,   40,   40,    3,   27,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   17,   17,   17,   17,    1,   18,    1,
       19,    1,    1,    1,   20,   21,   22,   23,   21,   24,
       21,   21,   21,   21,   21,   25,   26,   27,   21,   28,
       21,   21,   29,   30,   21,   31,   32,   21,   21,   21,
        1,    1,    1,   33,    1,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   21,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   21,   54,   55,
       56,   57,   58,    1,   59,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[60] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    3,
        1,    3,    3,    3,    3,    3,    3,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1
    } ;

static yyconst short int yy_base[253] =
    {   0,
        0,    0,  342, 1243,   24, 1243, 1243, 1243,  323,   64,
     1243,   72, 1243,   80,   88,   97,  105,  122,  130,  141,
     1243,  149,  160,  195,   24,  278,  280,  281,   26,   23,
        0,  111,  172,  182,  124,  214,  192,  210,  211,  221,
      224,  231,  234,  246,  255,  260,  265,  270,  275,  269,
      275,  255,  252,  254,  241,  251,  231,  232,  223,    0,
      306, 1243, 1243, 1243, 1243,  286,  306,  309,  316,  319,
      329,  336,  339,  348,  358,  363,  372,  225,  222,  263,
       51,  218,  228,  223,  202,  241,  190,  373,  383,  382,
      393,  407,  408,  417,  430,  435,  440,  445,  455,  462,

      467,  472,  482,  195,  188, 1243,  218,  215,  165,  171,
      154,  169, 1243,  199,  491,  494,  503,  508,  515,  522,
      534,  537,  544,  547,  554,  568,  571,  578,  581,  155,
      148, 1243, 1243,  188,  138,  144,  127, 1243,  588,  593,
      602,  614,  615,  624,  629,  636,  639,  646,  657,  662,
      667,  672,  681,  682,  127,  130, 1243,  109,  146,  106,
      691,  692,  705,  706,  715,  724,  725,  735,  740,  745,
      754,  764,  771,  138,   86,  117, 1243,   59,  790,  800,
      808,  816,  812,  813,  822,  823,  833,  834,  844,  854,
     1243,   95,  103,   61,  873,  884,  892,  900,  908,  916,

      924,  932,  940,  948,  956,  964,  972,  980,  988,  996,
     1004, 1000, 1001, 1012, 1011, 1021,   88, 1243,   80, 1048,
     1056, 1064, 1072, 1024, 1068, 1069, 1079, 1243, 1243, 1080,
     1090, 1100, 1105, 1110, 1119, 1126, 1129, 1138, 1139, 1151,
     1152, 1165, 1166, 1175, 1176, 1186, 1196, 1208, 1209, 1243,
       71, 1239
    } ;

static yyconst short int yy_def[253] =
    {   0,
      250,    1,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  251,  251,  251,  251,  251,  251,  251,
      250,  251,  251,  251,  250,  250,  250,  250,  250,  250,
      252,  250,  250,  250,  250,  250,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  252,
      250,  250,  250,  250,  250,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  250,
      250,  250,  250,  250,  250,  250,  250,  250,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  250,  250,  250,  250,  250,  250,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  250,  250,  250,  250,  250,  251,  251,
      251,  251,   24,   24,   24,   24,   24,   24,   24,   24,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      251,   24,   24,   24,   24,   24,  250,  250,  250,  250,
      250,  250,  250,   24,   24,   24,   24,  250,  250,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,    0,
      250,  250
    } ;

static yyconst short int yy_nxt[1303] =
    {   0,
        4,    4,    5,    6,    6,    7,    8,    6,    9,   10,
       11,   12,   12,   12,   12,   12,   12,    6,   13,   14,
       14,   14,   14,   14,   15,   16,   17,   18,   14,   19,
       20,   14,   21,   14,   14,   22,   14,   14,   23,   14,
       14,   14,   14,   14,   14,   14,   24,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    6,    6,   25,
       26,   50,   27,   56,   58,  107,  108,   51,   28,   29,
       52,   59,   57,   37,   30,   32,   32,   32,   32,   32,
       32,   33,  229,   34,   34,   34,   34,   34,   34,   35,
      228,   36,   36,   36,   36,   36,   36,   35,  219,   36,

       36,   36,   36,   36,   36,  218,   35,  217,   36,   36,
       36,   36,   36,   36,   35,  194,   36,   36,   36,   36,
       36,   36,   32,   32,   32,   32,   32,   32,  193,   38,
       39,   35,  192,   36,   36,   36,   36,   36,   36,   35,
      191,   36,   36,   36,   36,   36,   36,  178,  177,  176,
       35,   40,   36,   36,   36,   36,   36,   36,   35,  175,
       36,   36,   36,   36,   36,   36,  174,   42,   41,   35,
      160,   36,   36,   36,   36,   36,   36,   62,   63,   64,
       65,  159,   43,   61,   61,   61,   61,   61,   61,  158,
      157,   33,   44,   34,   34,   34,   34,   34,   34,  156,

      155,  138,  137,   45,   35,  136,   36,   36,   36,   36,
       36,   36,  135,   37,  134,   37,   46,  133,   47,   37,
      132,   37,   48,   35,   49,   36,   36,   36,   36,   36,
       36,   37,   37,   37,   37,  131,  130,   37,   37,   37,
       37,  114,   37,  113,   37,   37,  112,   37,   37,   66,
       37,   37,   37,   37,   37,   37,  111,   37,   37,  110,
       37,   37,   67,   37,  109,  106,  105,   37,  104,   37,
       68,   71,   87,   37,   69,   37,   37,   86,   37,   72,
       85,   37,   37,   37,   37,   70,   37,   37,   37,   37,
       84,   37,   37,   37,   37,   83,   37,   37,   37,   37,

       82,   73,   37,   81,   37,   80,   74,   37,   79,   37,
       78,   75,   77,   37,   55,   37,   76,   61,   61,   61,
       61,   61,   61,   54,   53,   89,   88,   37,   90,   37,
       37,   31,   37,   91,   92,   37,   37,   37,   37,   37,
       96,  250,   37,   37,  250,   37,   37,  250,   37,  250,
       37,  250,   37,   94,  250,   93,   37,   37,   37,   37,
       37,  250,   37,   37,  250,   37,   37,   95,   37,   37,
      250,   37,   99,  250,  250,   37,  250,   37,  250,   37,
       98,   37,   97,  250,   37,   37,   37,   37,  250,  250,
       37,  100,   37,   37,   37,   37,   37,  101,  250,   37,

       37,   37,   37,   37,   37,   37,   37,  250,  250,   37,
       37,   37,   37,  102,   37,  250,   37,  250,  250,  250,
       37,  250,   37,  117,  115,  250,  103,  116,   37,   37,
       37,   37,  250,  250,   37,   37,   37,   37,   37,  250,
       37,  250,  118,  250,   37,  250,   37,  119,  250,  121,
      122,  123,  250,   37,  120,  250,   37,   37,   37,   37,
      250,   37,   37,   37,   37,  250,   37,   37,   37,   37,
      250,  250,   37,  250,   37,  250,   37,  125,   37,  250,
      250,  124,   37,   37,   37,   37,  250,  250,   37,   37,
       37,   37,  126,   37,   37,   37,   37,  250,  250,   37,

      250,   37,  250,   37,  250,   37,  127,  250,  128,   37,
      139,   37,   37,  140,   37,   37,  250,   37,  141,  142,
       37,   37,  250,   37,   37,  250,   37,  250,  143,   37,
       37,   37,   37,  129,  250,   37,   37,   37,   37,  250,
      250,  144,   37,   37,   37,   37,  250,  250,  250,   37,
      250,   37,  250,  250,  145,   37,  146,   37,   37,  147,
       37,   37,  250,   37,   37,   37,   37,   37,   37,  250,
       37,   37,  250,   37,   37,   37,   37,   37,  250,  250,
      149,   37,  250,   37,  250,  250,  250,  250,  148,   37,
      150,   37,   37,  151,   37,   37,  250,   37,   37,   37,

       37,   37,   37,  152,   37,   37,  250,   37,   37,   37,
       37,   37,  250,  250,   37,   37,   37,   37,  250,  250,
       37,  250,   37,   37,  250,   37,  250,  153,  250,   37,
      250,   37,  161,  154,  162,   37,   37,   37,   37,  250,
      250,   37,   37,   37,   37,   37,  250,   37,  163,  250,
       37,   37,   37,   37,  250,  250,   37,   37,   37,   37,
       37,  164,   37,   37,  250,   37,   37,   37,   37,   37,
      250,  165,  250,   37,  167,   37,  168,  169,   37,  250,
       37,  166,  250,   37,   37,   37,   37,  250,   37,   37,
       37,   37,  250,   37,   37,   37,   37,  250,  250,  172,

      250,   37,   37,   37,   37,   37,  170,  250,   37,   37,
       37,   37,   37,   37,   37,   37,  171,  250,   37,   37,
       37,   37,  250,  250,  250,  179,   37,   37,   37,   37,
      180,  173,   37,   37,   37,   37,   37,  250,   37,  250,
      250,  181,   37,  183,   37,   37,   37,   37,   37,  250,
      250,   37,   37,   37,   37,  182,   37,  250,   37,  250,
      250,   37,   37,   37,   37,  184,   37,   37,   37,   37,
      250,  250,   37,  250,   37,   37,  185,   37,  250,  187,
      250,   37,  250,   37,  250,   37,  186,   37,  250,  250,
      188,   37,   37,   37,   37,  250,  250,  250,   37,   35,

       37,  195,  196,  197,  198,   36,   36,  250,  190,   35,
      189,  199,  200,  201,  202,   36,   36,   35,  250,  203,
      204,  205,  206,   36,   36,   35,  250,  207,  208,  209,
      210,   36,   36,   37,   37,   37,   37,  250,  250,   37,
       37,   37,   37,   37,   37,   37,   37,  211,  250,   37,
       37,   37,   37,  250,   37,   37,   37,   37,  212,  213,
       37,   37,   37,   37,  250,   37,  250,   37,  250,  250,
      250,   37,  214,   37,  215,   37,  250,   37,  250,  250,
      250,   37,   35,   37,   36,   36,   36,   36,   36,   36,
      250,  250,  250,   35,  216,   36,   36,   36,   36,   36,

       36,   35,  250,   36,   36,   36,   36,   36,   36,   35,
      250,   36,   36,   36,   36,   36,   36,   35,  250,   36,
       36,   36,   36,   36,   36,   35,  250,   36,   36,   36,
       36,   36,   36,   35,  250,   36,   36,   36,   36,   36,
       36,   35,  250,   36,   36,   36,   36,   36,   36,   35,
      250,   36,   36,   36,   36,   36,   36,   35,  250,   36,
       36,   36,   36,   36,   36,   35,  250,   36,   36,   36,
       36,   36,   36,   35,  250,   36,   36,   36,   36,   36,
       36,   35,  250,   36,   36,   36,   36,   36,   36,   35,
      250,   36,   36,   36,   36,   36,   36,   35,  250,   36,

       36,   36,   36,   36,   36,   35,  250,   36,   36,   36,
       36,   36,   36,   35,  250,  220,  221,  222,  223,   36,
       36,   37,   37,   37,   37,  250,  250,   37,   37,   37,
       37,  250,   37,   37,   37,   37,  250,  224,   37,   37,
       37,   37,   37,  250,   37,   37,  250,   37,   37,  250,
       37,   37,  250,   37,  225,  226,  227,   35,  250,   36,
       36,   36,   36,   36,   36,   35,  250,   36,   36,   36,
       36,   36,   36,   35,  230,   36,   36,   36,   36,   36,
       36,   35,  250,   36,   36,   36,   36,   36,   36,   37,
       37,   37,   37,  250,  250,   37,   37,   37,   37,  250,

       37,   37,   37,   37,  250,  231,   37,   37,   37,   37,
      250,   37,  250,   37,  250,  250,  232,   37,  250,   37,
      234,   37,  250,   37,  250,  250,   37,   37,   37,   37,
      233,   37,   37,   37,   37,  250,  235,   37,  250,   37,
       37,  237,   37,  250,  250,  250,   37,   37,   37,   37,
       37,  236,   37,   37,  250,   37,   37,  250,   37,   37,
       37,   37,   37,  238,  250,   37,   37,   37,   37,  250,
      239,  250,   37,   37,   37,   37,  250,  241,  242,   37,
       37,   37,  250,  250,  250,  250,   37,   37,   37,   37,
      243,  240,   37,   37,   37,   37,   37,   37,   37,   37,

      250,  250,   37,   37,   37,   37,  250,   37,  250,   37,
      250,  250,  250,   37,  244,   37,  250,   37,  245,   37,
      250,  246,  250,   37,  250,   37,  247,  250,  248,   37,
       37,   37,   37,  249,  250,   37,   37,   37,   37,   60,
      250,   60,    3,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250
    } ;

static yyconst short int yy_chk[1303] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,   25,    5,   29,   30,   81,   81,   25,    5,    5,
       25,   30,   29,  251,    5,   10,   10,   10,   10,   10,
       10,   12,  219,   12,   12,   12,   12,   12,   12,   14,
      217,   14,   14,   14,   14,   14,   14,   15,  194,   15,

       15,   15,   15,   15,   15,  193,   16,  192,   16,   16,
       16,   16,   16,   16,   17,  178,   17,   17,   17,   17,
       17,   17,   32,   32,   32,   32,   32,   32,  176,   15,
       16,   18,  175,   18,   18,   18,   18,   18,   18,   19,
      174,   19,   19,   19,   19,   19,   19,  160,  159,  158,
       20,   17,   20,   20,   20,   20,   20,   20,   22,  156,
       22,   22,   22,   22,   22,   22,  155,   19,   18,   23,
      137,   23,   23,   23,   23,   23,   23,   35,   35,   35,
       35,  136,   20,   33,   33,   33,   33,   33,   33,  135,
      134,   34,   22,   34,   34,   34,   34,   34,   34,  131,

      130,  114,  112,   23,   24,  111,   24,   24,   24,   24,
       24,   24,  110,   37,  109,   37,   24,  108,   24,   37,
      107,   37,   24,   36,   24,   36,   36,   36,   36,   36,
       36,   38,   39,   38,   39,  105,  104,   38,   39,   38,
       39,   87,   40,   86,   40,   41,   85,   41,   40,   38,
       40,   41,   42,   41,   42,   43,   84,   43,   42,   83,
       42,   43,   39,   43,   82,   80,   79,   44,   78,   44,
       40,   43,   59,   44,   41,   44,   45,   58,   45,   44,
       57,   46,   45,   46,   45,   42,   47,   46,   47,   46,
       56,   48,   47,   48,   47,   55,   49,   48,   49,   48,

       54,   45,   49,   53,   49,   52,   46,   66,   51,   66,
       50,   47,   49,   66,   28,   66,   48,   61,   61,   61,
       61,   61,   61,   27,   26,   67,   66,   67,   67,   67,
       68,    9,   68,   67,   67,   67,   68,   69,   68,   69,
       70,    3,   70,   69,    0,   69,   70,    0,   70,    0,
       71,    0,   71,   68,    0,   67,   71,   72,   71,   72,
       73,    0,   73,   72,    0,   72,   73,   69,   73,   74,
        0,   74,   73,    0,    0,   74,    0,   74,    0,   75,
       72,   75,   71,    0,   76,   75,   76,   75,    0,    0,
       76,   74,   76,   77,   88,   77,   88,   75,    0,   77,

       88,   77,   88,   90,   89,   90,   89,    0,    0,   90,
       89,   90,   89,   76,   91,    0,   91,    0,    0,    0,
       91,    0,   91,   90,   88,    0,   77,   89,   92,   93,
       92,   93,    0,    0,   92,   93,   92,   93,   94,    0,
       94,    0,   91,    0,   94,    0,   94,   92,    0,   93,
       94,   95,    0,   95,   92,    0,   96,   95,   96,   95,
        0,   97,   96,   97,   96,    0,   98,   97,   98,   97,
        0,    0,   98,    0,   98,    0,   99,   97,   99,    0,
        0,   96,   99,  100,   99,  100,    0,    0,  101,  100,
      101,  100,   98,  102,  101,  102,  101,    0,    0,  102,

        0,  102,    0,  103,    0,  103,   99,    0,  100,  103,
      115,  103,  115,  115,  115,  116,    0,  116,  115,  115,
      115,  116,    0,  116,  117,    0,  117,    0,  116,  118,
      117,  118,  117,  103,    0,  118,  119,  118,  119,    0,
        0,  117,  119,  120,  119,  120,    0,    0,    0,  120,
        0,  120,    0,    0,  118,  121,  119,  121,  122,  120,
      122,  121,    0,  121,  122,  123,  122,  123,  124,    0,
      124,  123,    0,  123,  124,  125,  124,  125,    0,    0,
      122,  125,    0,  125,    0,    0,    0,    0,  121,  126,
      123,  126,  127,  124,  127,  126,    0,  126,  127,  128,

      127,  128,  129,  125,  129,  128,    0,  128,  129,  139,
      129,  139,    0,    0,  140,  139,  140,  139,    0,    0,
      140,    0,  140,  141,    0,  141,    0,  128,    0,  141,
        0,  141,  139,  129,  140,  142,  143,  142,  143,    0,
        0,  142,  143,  142,  143,  144,    0,  144,  141,    0,
      145,  144,  145,  144,    0,    0,  145,  146,  145,  146,
      147,  142,  147,  146,    0,  146,  147,  148,  147,  148,
        0,  145,    0,  148,  147,  148,  148,  148,  149,    0,
      149,  146,    0,  150,  149,  150,  149,    0,  151,  150,
      151,  150,    0,  152,  151,  152,  151,    0,    0,  152,

        0,  152,  153,  154,  153,  154,  150,    0,  153,  154,
      153,  154,  161,  162,  161,  162,  151,    0,  161,  162,
      161,  162,    0,    0,    0,  161,  163,  164,  163,  164,
      162,  154,  163,  164,  163,  164,  165,    0,  165,    0,
        0,  162,  165,  164,  165,  166,  167,  166,  167,    0,
        0,  166,  167,  166,  167,  163,  168,    0,  168,    0,
        0,  169,  168,  169,  168,  166,  170,  169,  170,  169,
        0,    0,  170,    0,  170,  171,  168,  171,    0,  170,
        0,  171,    0,  171,    0,  172,  169,  172,    0,    0,
      171,  172,  173,  172,  173,    0,    0,    0,  173,  179,

      173,  179,  179,  179,  179,  179,  179,    0,  173,  180,
      172,  180,  180,  180,  180,  180,  180,  181,    0,  181,
      181,  181,  181,  181,  181,  182,    0,  182,  182,  182,
      182,  182,  182,  183,  184,  183,  184,    0,    0,  183,
      184,  183,  184,  185,  186,  185,  186,  183,    0,  185,
      186,  185,  186,    0,  187,  188,  187,  188,  184,  185,
      187,  188,  187,  188,    0,  189,    0,  189,    0,    0,
        0,  189,  186,  189,  187,  190,    0,  190,    0,    0,
        0,  190,  195,  190,  195,  195,  195,  195,  195,  195,
        0,    0,    0,  196,  189,  196,  196,  196,  196,  196,

      196,  197,    0,  197,  197,  197,  197,  197,  197,  198,
        0,  198,  198,  198,  198,  198,  198,  199,    0,  199,
      199,  199,  199,  199,  199,  200,    0,  200,  200,  200,
      200,  200,  200,  201,    0,  201,  201,  201,  201,  201,
      201,  202,    0,  202,  202,  202,  202,  202,  202,  203,
        0,  203,  203,  203,  203,  203,  203,  204,    0,  204,
      204,  204,  204,  204,  204,  205,    0,  205,  205,  205,
      205,  205,  205,  206,    0,  206,  206,  206,  206,  206,
      206,  207,    0,  207,  207,  207,  207,  207,  207,  208,
        0,  208,  208,  208,  208,  208,  208,  209,    0,  209,

      209,  209,  209,  209,  209,  210,    0,  210,  210,  210,
      210,  210,  210,  211,    0,  211,  211,  211,  211,  211,
      211,  212,  213,  212,  213,    0,    0,  212,  213,  212,
      213,    0,  215,  214,  215,  214,    0,  212,  215,  214,
      215,  214,  216,    0,  216,  224,    0,  224,  216,    0,
      216,  224,    0,  224,  213,  214,  215,  220,    0,  220,
      220,  220,  220,  220,  220,  221,    0,  221,  221,  221,
      221,  221,  221,  222,  224,  222,  222,  222,  222,  222,
      222,  223,    0,  223,  223,  223,  223,  223,  223,  225,
      226,  225,  226,    0,    0,  225,  226,  225,  226,    0,

      227,  230,  227,  230,    0,  226,  227,  230,  227,  230,
        0,  231,    0,  231,    0,    0,  227,  231,    0,  231,
      231,  232,    0,  232,    0,    0,  233,  232,  233,  232,
      230,  234,  233,  234,  233,    0,  232,  234,    0,  234,
      235,  235,  235,    0,    0,    0,  235,  236,  235,  236,
      237,  234,  237,  236,    0,  236,  237,    0,  237,  238,
      239,  238,  239,  236,    0,  238,  239,  238,  239,    0,
      237,    0,  240,  241,  240,  241,    0,  239,  240,  241,
      240,  241,    0,    0,    0,    0,  242,  243,  242,  243,
      241,  238,  242,  243,  242,  243,  244,  245,  244,  245,

        0,    0,  244,  245,  244,  245,    0,  246,    0,  246,
        0,    0,    0,  246,  242,  246,    0,  247,  243,  247,
        0,  244,    0,  247,    0,  247,  245,    0,  246,  248,
      249,  248,  249,  247,    0,  248,  249,  248,  249,  252,
        0,  252,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#line 3 "lexer.l"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "yaccer_tab.h"
#include "CSymbolTable.h"
#include "CastNode.h"

int iID;
extern CSymbolTable symTab;
extern CastNode *root;
extern int eWhichRegComponent;

#line 747 "lex.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 18 "lexer.l"


#line 897 "lex.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 251 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1243 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
#line 21 "lexer.l"
case 2:
YY_RULE_SETUP
#line 21 "lexer.l"
{
							printf("lex found keyword float\n");
							iID = symTab.GetIDFromName(yytext);
							if(iID == -1)
							{
								printf("Error: ID %s not a keyword\n",yytext);
								exit(-1);
							}
							yylval.sval = strdup(yylval.sval);
							return(iID);
						}
	YY_BREAK
case 3:
#line 33 "lexer.l"
case 4:
#line 34 "lexer.l"
case 5:
#line 35 "lexer.l"
case 6:
#line 36 "lexer.l"
case 7:
#line 37 "lexer.l"
case 8:
#line 38 "lexer.l"
case 9:
#line 39 "lexer.l"
case 10:
#line 40 "lexer.l"
case 11:
#line 41 "lexer.l"
case 12:
#line 42 "lexer.l"
case 13:
#line 43 "lexer.l"
case 14:
#line 44 "lexer.l"
case 15:
#line 45 "lexer.l"
case 16:
#line 46 "lexer.l"
case 17:
#line 47 "lexer.l"
case 18:
#line 48 "lexer.l"
case 19:
#line 49 "lexer.l"
case 20:
#line 50 "lexer.l"
case 21:
#line 51 "lexer.l"
case 22:
#line 52 "lexer.l"
case 23:
#line 53 "lexer.l"
case 24:
#line 54 "lexer.l"
case 25:
#line 55 "lexer.l"
case 26:
#line 56 "lexer.l"
case 27:
#line 57 "lexer.l"
case 28:
#line 58 "lexer.l"
case 29:
#line 59 "lexer.l"
case 30:
#line 60 "lexer.l"
case 31:
#line 61 "lexer.l"
case 32:
#line 62 "lexer.l"
case 33:
#line 63 "lexer.l"
case 34:
#line 64 "lexer.l"
case 35:
#line 65 "lexer.l"
case 36:
#line 66 "lexer.l"
case 37:
#line 67 "lexer.l"
case 38:
#line 68 "lexer.l"
case 39:
YY_RULE_SETUP
#line 68 "lexer.l"
{
							printf("lex found shader keyword: %s\n",yytext);
							yylval.sval = strdup(yytext);
							return(T_STRING);
						}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 73 "lexer.l"
{ 
					printf("lex found string %s\n", yytext); 
					yylval.sval = strdup(yytext); 
					printf("%s is sval\n",yylval.sval);
					eWhichRegComponent = eRegCompAll;
					return(T_STRING);
				  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 80 "lexer.l"
{
					printf("lex found string %s\n", yytext); 
					yylval.sval = strdup(yytext); 
					printf("%s is sval\n",yylval.sval);
					eWhichRegComponent = eRegCompX;
					return(T_STRING);
				  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "lexer.l"
{
					printf("lex found string %s\n", yytext); 
					yylval.sval = strdup(yytext); 
					printf("%s is sval\n",yylval.sval);
					eWhichRegComponent = eRegCompY;
					return(T_STRING);
				  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "lexer.l"
{
					printf("lex found string %s\n", yytext); 
					yylval.sval = strdup(yytext); 
					printf("%s is sval\n",yylval.sval);
					eWhichRegComponent = eRegCompZ;
					return(T_STRING);
				  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "lexer.l"
{
					printf("lex found string %s\n", yytext); 
					yylval.sval = strdup(yytext); 
					printf("%s is sval\n",yylval.sval);
					eWhichRegComponent = eRegCompW;
					return(T_STRING);
				  }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 109 "lexer.l"
{
								printf("lex found float %s\n", yytext); 
								yylval.fval = (float)atof(yytext); 
								printf("%f is float\n",yylval.fval);
								return(T_FLOAT); 
							 }
	YY_BREAK
case 46:
#line 119 "lexer.l"
case 47:
#line 120 "lexer.l"
case 48:
#line 121 "lexer.l"
case 49:
#line 122 "lexer.l"
case 50:
#line 123 "lexer.l"
case 51:
#line 124 "lexer.l"
case 52:
#line 125 "lexer.l"
case 53:
#line 126 "lexer.l"
case 54:
#line 127 "lexer.l"
case 55:
#line 128 "lexer.l"
case 56:
#line 129 "lexer.l"
case 57:
#line 130 "lexer.l"
case 58:
#line 131 "lexer.l"
case 59:
#line 132 "lexer.l"
case 60:
#line 133 "lexer.l"
case 61:
YY_RULE_SETUP
#line 133 "lexer.l"
{   /*Operations */
						iID = symTab.GetIDFromName(yytext);
						printf("%s is recognized\n",yytext);
							if(iID == -1)
							{
								printf("Error: ID %s not a keyword\n",yytext);
								exit(-1);
							}
							return(iID);
							}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 145 "lexer.l"
{	/*Relational ops*/
							iID = symTab.GetIDFromName(yytext);
							if(iID == -1)
							{
								printf("Error: ID %s not a keyword\n",yytext);
								exit(-1);
							}
							return(iID);
						}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 154 "lexer.l"
{		/*Delimiters*/
							iID = symTab.GetIDFromName(yytext);
							if(iID == -1)
							{
								printf("Error: ID %s not a keyword\n",yytext);
								exit(-1);
							}
							return(iID);
						}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 164 "lexer.l"
{ 
					printf("found clamp %s\n",yytext);  
					//yylval.fval = (float)atof(yytext); 
					//return(CLAMP); 
				   }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 169 "lexer.l"
{
					// printf("found comment\n");
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 174 "lexer.l"
{  
				printf("singleton \n");
				//yylval.sval = yytext;
				///return(yytext[0]);
				//return(MINUS);
			 }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 181 "lexer.l"
ECHO;
	YY_BREAK
#line 1244 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 251 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 251 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 250);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 181 "lexer.l"


int yywrap() {return 1;}

/*
void main(int argc, char **argv)
{
	yylex();
}
*/