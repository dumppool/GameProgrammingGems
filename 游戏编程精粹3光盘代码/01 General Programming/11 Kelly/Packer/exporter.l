%{
/*
 *  FILE       : exporter.l
 *
 *  PROGRAMMERS: Paul Kelly
 *               paul_kelly2000@yahoo.com
 *
 *  DESCRIPTION: Lex specification for the data input file.
 *               
 *
 *  NOTES      : flex was used to test this example.  It can
 *               be found at www.gnu.org in the non-gnu tools.
 *
 *               Use the following to generate the lexer:
 *               
 *               flex -oweapon_l.c weapon.l
 *
 *               -o filename that the lexer generated source code
 *                  will be placed.
 *
 *               Also, make sure the necessary lib and .h files are included 
 *               so that compiling and linking work.
 */

#include <stdlib.h>
#include <string.h>

#include "exporter_y.h"  /* include token macros generated by yacc */


/*
 *
 * LEXER SPECIFICATION
 *
 */
%}

%%

MD3_FILEHDR                { return TKN_MD3_FILEHDR;}
MD3_BONEFRAMES             { return TKN_MD3_BONEFRAMES;}
MD3_TAGS                   { return TKN_MD3_TAGS ;}
MD3_MESH                   { return TKN_MD3_MESH;}
MD3_TEXTURENAMES           { return TKN_MD3_TEXTURENAMES ;}
MD3_TRIANGLEVERTS          { return TKN_MD3_TRIANGLEVERTS ;}
MD3_TEXVEC                 { return TKN_MD3_TEXVEC;}
MD3_VERTEX                 { return TKN_MD3_VERTEX ;}
END                        { return TKN_END;}

ID                         { /* MD3_FILEHDR */
                             return TKN_ID; }
VERSION                    { return TKN_VERSION ;}
FILENAME                   { return TKN_FILENAME ;}
NUM_BONEFRAME              { return TKN_NUM_BONEFRAME ;}
NUM_TAGS                   { return TKN_NUM_TAGS;}
NUM_MESH                   { return TKN_NUM_MESH;}
MAXTEX_NUM                 { return TKN_MAXTEX_NUM ;}
HEADER_SIZE                { return TKN_HEADER_SIZE ;}
TAGS_START                 { return TKN_TAGS_START;}
MESH_START                 { return TKN_MESH_START ;}
FILE_SIZE                  { return TKN_FILE_SIZE ;}

MINS                       { /* MD3_BONEFRAMES */
                             return TKN_MINS ;}
MAXS                       { return TKN_MAXS ;}
POSITION                   { return TKN_POSITION ;}
SCALE                      { return TKN_SCALE ;}
CREATOR                    { return TKN_CREATOR    ;}

TAG_NAME                   { /* MD3_TAGS */
                             return TKN_TAG_NAME ;}
ROTATION_MAT               { return TKN_ROTATION_MAT;}

MESH_NAME                  { /* MD3_MESH */
                             return TKN_MESH_NAME; }
NUM_MESHFRAMES             { return TKN_NUM_MESHFRAMES ;}
NUM_SKINS                  { return TKN_NUM_SKINS ;}
NUM_VERTS                  { return TKN_NUM_VERTS;}
NUM_TRIS                   { return TKN_NUM_TRIS ;}
TRI_START_ADDR             { return TKN_TRI_START_ADDR ;}
TEXVEC_START_ADDR          { return TKN_TEXVEC_START_ADDR;}
VERTEX_START_ADDR          { return TKN_VERTEX_START_ADDR ;}
MESH_SIZE                  { return TKN_MESH_SIZE ;}

TEX_NAME                   { /* MD3_TEXTURENAMES */
                             return TKN_TEX_NAME   ;}

VERT_IDX                   { /* MD3_TRIANGLEVERTS */
                             return TKN_VERT_IDX         ;}

UV_OR_VEC                  { /* MD3_TEXVEC */
                             return TKN_UV_OR_VEC ;}

VERT                       { /* MD3_VERTEX */
                             return TKN_VERT;}


[-]*[0-9]+	               {    yylval.integer = atoi (yytext);
                                return TKN_INTEGER; }

[-]*[0-9]+.[0-9]+          {    yylval.fp = (float) atof (yytext);
                                return TKN_FLOAT; }

[""][/_ ()a-zA-Z0-9.]+[""]     { // quoted strings
                                 yytext[yyleng-1] = '\0';   
                                 strcpy (yylval.string, &yytext[1]);
                                    
                                 return TKN_STRING; }

[/_a-zA-Z0-9.]+            {    // strings without spaces
                                strcpy (yylval.string, yytext);
                                return TKN_STRING; }



%%
/* C code section for lex specification */
