<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE RENDER_MONKEY [
   <!ELEMENT RENDER_MONKEY
   (
      RmEffectWorkspace |
      RmRegistryBranch |
      RmClipboardNode
   )?>

   <!ELEMENT RmEffectWorkspace 
   (
      RmRegistryBranch?,
      RmPlugInData?,
      RmStringVariable*,
      (
         ( RmDirectXEffect, RmOpenGLEffect? ) |
         ( RmOpenGLEffect, RmDirectXEffect? )
      )?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmEffectGroup
      )*
   )>

   <!ELEMENT RmEffectGroup
   ( 
      RmPlugInData?,
      (
         RmStringVariable |
         RmDirectXEffect |
         RmOpenGLEffect |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData
      )*
   )>

   <!ELEMENT RmDirectXEffect
   ( 
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmPass
      )*
   )>

   <!ELEMENT RmOpenGLEffect
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmGLPass
      )*
   )>

   <!ELEMENT RmPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         (
         ( RmHLSLShader | RmShader ),
         ( RmShader | RmHLSLShader )?
         )
      )?,
      RmRenderTarget*,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject
         )*
      )>
                                                                     
   <!ELEMENT RmGLPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         ( RmGLShader, RmGLShader? ) 
      )?,
      RmRenderTarget?,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmShaderConstant |
         RmSampler
         )*
      )>
      
   <!ELEMENT RmShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable |
      RmShaderConstant
      )*
   )>

   <!ELEMENT RmHLSLShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable |
      RmShaderConstant |
      RmSampler
      )*
   )>

   <!ELEMENT RmGLShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable
      )*
   )>

   <!ELEMENT RmTextureObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmTextureReference?,
      RmState*
   )>

   <!ELEMENT RmLightObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmLightReference?
   )>
   
   <!ELEMENT RmMaterialObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmMaterialReference?
   )>
   
   <!ELEMENT RmRenderStateBlock
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmState 
      )*
   )>

   <!ELEMENT RmStreamMap
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmStream 
      )*
   )>

   <!ELEMENT RmStream               ( RmPlugInData?, RmStreamChannel* )>

   <!ELEMENT RmModelData            ( RmPlugInData?, RmStringVariable* )>  
   <!ELEMENT RmTextureReference     ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmLightReference       ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmMaterialReference    ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmCameraReference      ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmModelReference       ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmStreamMapReference   ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmRenderableTexture    ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmRenderTarget         ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmBooleanVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmFloatVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmVectorVariable       ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmMatrixVariable       ( RmPlugInData?, RmStringVariable? )>   
   <!ELEMENT RmColorVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmIntegerVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT Rm2DTextureVariable    ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmCubemapVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT Rm3DTextureVariable    ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmLightVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmMaterialVariable     ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmCamera               ( RmPlugInData?, RmStringVariable* )>

   <!ELEMENT RmStringVariable       ( RmTextDataBlock, RmPlugInData? )>
   
   <!ELEMENT RmDynamicVariable
   (
      RmPlugInData?,
      RmStringVariable?,
      RmDynamicVariableValueContainer
   )>
   
   <!ELEMENT RmDynamicVariableValueContainer
   (
      RmPlugInData?,
      RmDynamicVariableValue*
   )>
   
   <!ELEMENT RmTextDataBlock        ( #PCDATA ) >
   
   <!ELEMENT RmRegistryBranch
   ( 
      RmTextDataBlock?,
      (
         RmRegistryBranch |
         RmStringVariable |
         RmIntegerVariable |
         RmBooleanVariable |
         RmFloatVariable
      )*      
   )>

   <!ELEMENT RmPlugInData
   ( 
      RmTextDataBlock?,
      (
         RmStringVariable |
         RmIntegerVariable |
         RmBooleanVariable |
         RmFloatVariable |
         RmVectorVariable
      )*      
   )>
   
   <!ELEMENT RmClipboardNode
   ( 
      RmTextDataBlock?,
      (
         RmEffectWorkspace | 
         RmEffectGroup |   
         RmDirectXEffect |                
         RmOpenGLEffect |                
         RmPass |                  
         RmGLPass |                  
         RmShader |        
         RmHLSLShader |        
         RmGLShader |        
         RmShaderConstant |
         RmSampler |               
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmRenderStateBlock |
         RmState |                 
         RmStreamMap |           
         RmStream |              
         RmStreamChannel |
         RmModelData |
         RmTextureReference |
         RmLightReference |
         RmMaterialReference |
         RmModelReference |
         RmStreamMapReference |
         RmRenderableTexture |
         RmRenderTarget |
         RmBooleanVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmDynamicVariableValue |
         RmColorVariable |
         RmIntegerVariable |
         RmStringVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRegistryBranch |
         RmPlugInData |
         RmCamera |                
         RmCameraReference
      )*      
   )>
   
   <!ELEMENT RmStreamChannel        ( RmPlugInData? ) >
   <!ELEMENT RmShaderConstant       ( RmPlugInData? ) >
   <!ELEMENT RmSampler              ( RmPlugInData? ) >
   <!ELEMENT RmState                ( RmPlugInData? ) >
   <!ELEMENT RmDynamicVariableValue ( RmPlugInData? ) >
   
   <!ELEMENT RmShaderCode           ( #PCDATA ) >

   <!ATTLIST RmEffectWorkspace 
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_EFFECT                 CDATA #REQUIRED
      VALIDATION_STRING             CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >                                 

   <!ATTLIST RmEffectGroup           
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >                                 

   <!ATTLIST RmDirectXEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 

   <!ATTLIST RmOpenGLEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 

   <!ATTLIST RmPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 

   <!ATTLIST RmGLPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 
   
   <!ATTLIST RmShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  CDATA #REQUIRED
   >                                 

   <!ATTLIST RmHLSLShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
      TARGET                        CDATA #REQUIRED
      ENTRY_POINT                   CDATA #REQUIRED
   >  

   <!ATTLIST RmGLShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
   >  

   <!ATTLIST RmShaderConstant
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
   >                                 

   <!ATTLIST RmSampler               
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
   >

   <!ATTLIST RmTextureObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STATE_INDEX                   CDATA #REQUIRED
      VERTEX_TEXTURE                ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmLightObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmRenderStateBlock
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >                                 

   <!ATTLIST RmState                 
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STATE                         CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      USAGE                         CDATA #REQUIRED
   >                               

   <!ATTLIST RmStreamMap           
     NAME                           CDATA #REQUIRED
     API                            CDATA #REQUIRED
   >                               

   <!ATTLIST RmStream              
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STRIDE                        CDATA #REQUIRED
   >

   <!ATTLIST RmStreamChannel
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      DATA_SIZE                     CDATA #REQUIRED
      DATA_TYPE                     CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
      USAGE                         CDATA #REQUIRED
      USAGE_INDEX                   CDATA #REQUIRED
   >

   <!ATTLIST RmModelData
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIENTATION                   CDATA #REQUIRED
   >

   <!ATTLIST RmTextureReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmLightReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >
   
   <!ATTLIST RmModelReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmStreamMapReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmRenderableTexture
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
      WIDTH                         CDATA #REQUIRED
      HEIGHT                        CDATA #REQUIRED
      FORMAT                        CDATA #REQUIRED
      USE_VIEWPORT_DIMENSIONS       ( TRUE | FALSE ) #REQUIRED
      GENERATE_MIPMAPS              ( TRUE | FALSE ) #REQUIRED
      WIDTH_RATIO                   CDATA #REQUIRED
      HEIGHT_RATIO                  CDATA #REQUIRED
   >

   <!ATTLIST RmRenderTarget
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
      RENDER_TO_SCREEN              ( TRUE | FALSE ) #REQUIRED
      COLOR_CLEAR                   ( TRUE | FALSE ) #REQUIRED
      DEPTH_CLEAR                   ( TRUE | FALSE ) #REQUIRED
      CLEAR_COLOR_VALUE             CDATA #REQUIRED
      DEPTH_CLEAR_VALUE             CDATA #REQUIRED
   >
   
   <!ATTLIST RmBooleanVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
   >

   <!ATTLIST RmFloatVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmVectorVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
      NORMALIZE                     ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmMatrixVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
      VALUE_4                       CDATA #REQUIRED
      VALUE_5                       CDATA #REQUIRED
      VALUE_6                       CDATA #REQUIRED
      VALUE_7                       CDATA #REQUIRED
      VALUE_8                       CDATA #REQUIRED
      VALUE_9                       CDATA #REQUIRED
      VALUE_10                      CDATA #REQUIRED
      VALUE_11                      CDATA #REQUIRED
      VALUE_12                      CDATA #REQUIRED
      VALUE_13                      CDATA #REQUIRED
      VALUE_14                      CDATA #REQUIRED
      VALUE_15                      CDATA #REQUIRED
   >

   <!ATTLIST RmDynamicVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VARIABLE_TYPE                 ( FLOAT | INTEGER | BOOLEAN ) #REQUIRED
      ROWS                          CDATA #REQUIRED
      COLUMNS                       CDATA #REQUIRED
      FIXED_SIZE                    ( TRUE | FALSE ) #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
      NORMALIZE                     ( TRUE | FALSE ) #REQUIRED
   >
   
   <!ATTLIST RmDynamicVariableValue
      ROW_INDEX                     CDATA #REQUIRED
      COLUMN_INDEX                  CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmColorVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
   >

   <!ATTLIST RmIntegerVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
   >
   
   <!ATTLIST RmStringVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
   >

   <!ATTLIST Rm2DTextureVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST RmCubemapVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST Rm3DTextureVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST RmLightVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      LIGHT_ENABLED                 ( TRUE | FALSE ) #REQUIRED
      LIGHT_TYPE                    ( POSITIONAL | DIRECTIONAL | SPOTLIGHT ) #REQUIRED
      AMBIENT_0                     CDATA #REQUIRED
      AMBIENT_1                     CDATA #REQUIRED
      AMBIENT_2                     CDATA #REQUIRED
      AMBIENT_3                     CDATA #REQUIRED
      DIFFUSE_0                     CDATA #REQUIRED
      DIFFUSE_1                     CDATA #REQUIRED
      DIFFUSE_2                     CDATA #REQUIRED
      DIFFUSE_3                     CDATA #REQUIRED
      SPECULAR_0                    CDATA #REQUIRED
      SPECULAR_1                    CDATA #REQUIRED
      SPECULAR_2                    CDATA #REQUIRED
      SPECULAR_3                    CDATA #REQUIRED
      POSITION_0                    CDATA #REQUIRED
      POSITION_1                    CDATA #REQUIRED
      POSITION_2                    CDATA #REQUIRED
      DIRECTION_0                   CDATA #REQUIRED
      DIRECTION_1                   CDATA #REQUIRED
      DIRECTION_2                   CDATA #REQUIRED
      ATTENUATION_0                 CDATA #REQUIRED
      ATTENUATION_1                 CDATA #REQUIRED
      ATTENUATION_2                 CDATA #REQUIRED
      SPOTLIGHT_THETA               CDATA #REQUIRED
      SPOTLIGHT_PHI                 CDATA #REQUIRED
      RANGE                         CDATA #REQUIRED
      FALLOFF                       CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      AMBIENT_0                     CDATA #REQUIRED
      AMBIENT_1                     CDATA #REQUIRED
      AMBIENT_2                     CDATA #REQUIRED
      AMBIENT_3                     CDATA #REQUIRED
      DIFFUSE_0                     CDATA #REQUIRED
      DIFFUSE_1                     CDATA #REQUIRED
      DIFFUSE_2                     CDATA #REQUIRED
      DIFFUSE_3                     CDATA #REQUIRED
      SPECULAR_0                    CDATA #REQUIRED
      SPECULAR_1                    CDATA #REQUIRED
      SPECULAR_2                    CDATA #REQUIRED
      SPECULAR_3                    CDATA #REQUIRED
      EMISSIVE_0                    CDATA #REQUIRED
      EMISSIVE_1                    CDATA #REQUIRED
      EMISSIVE_2                    CDATA #REQUIRED
      EMISSIVE_3                    CDATA #REQUIRED
      SPECULAR_POWER                CDATA #REQUIRED
   >
      
   <!ATTLIST RmRegistryBranch
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >
   
   <!ATTLIST RmPlugInData
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PLUGIN_GUID                   CDATA #REQUIRED
   >

   <!ATTLIST RmClipboardNode
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >
   
   <!ATTLIST RmCamera                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      CAMERA_POSITION_X             CDATA #REQUIRED
      CAMERA_POSITION_Y             CDATA #REQUIRED
      CAMERA_POSITION_Z             CDATA #REQUIRED
      LOOK_AT_VECTOR_X              CDATA #REQUIRED
      LOOK_AT_VECTOR_Y              CDATA #REQUIRED
      LOOK_AT_VECTOR_Z              CDATA #REQUIRED
      UP_VECTOR_X                   CDATA #REQUIRED
      UP_VECTOR_Y                   CDATA #REQUIRED
      UP_VECTOR_Z                   CDATA #REQUIRED
      FOV                           CDATA #REQUIRED
      NEAR_CLIP_PLANE               CDATA #REQUIRED
      FAR_CLIP_PLANE                CDATA #REQUIRED
   >                                 

   <!ATTLIST RmCameraReference                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      USE_ACTIVE_CAMERA             ( TRUE | FALSE ) #REQUIRED
   >                               
   
   <!ATTLIST RmShaderCode                
      TYPE                          ( TEXT ) #REQUIRED
   >                               
   
   <!ATTLIST RmTextDataBlock                
      TYPE                          ( TEXT ) #REQUIRED
   >                               
   
]>
<RENDER_MONKEY>
 <RmEffectWorkspace NAME="Effect Workspace" API="" ACTIVE_EFFECT="Effect Workspace.Third Example.Single A8R8G8B8 Texture" VALIDATION_STRING="" XML_VERSION="RenderMonkey 1.6">
  <RmRegistryBranch NAME="RM_REGISTRY" API="" XML_VERSION="RenderMonkey 1.6">
   <RmRegistryBranch NAME="RM_LOCAL" API="" XML_VERSION="RenderMonkey 1.6">
    <RmRegistryBranch NAME="RM_PLUGIN" API="" XML_VERSION="RenderMonkey 1.6"><RmTextDataBlock TYPE="TEXT"><![CDATA[
<DockingPaneLayouts><Application_Layout><Pane-1><Type>2</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><Horiz>1</Horiz><Pane-1>2</Pane-1><Panes>1</Panes></Pane-1><Pane-2><Type>2</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY><Horiz>0</Horiz><Pane-1>3</Pane-1><Pane-2>8</Pane-2><Panes>2</Panes></Pane-2><Pane-3><Type>2</Type><DockingCX>0</DockingCX><DockingCY>519</DockingCY><Horiz>1</Horiz><Pane-1>4</Pane-1><Pane-2>6</Pane-2><Pane-3>7</Pane-3><Panes>3</Panes></Pane-3><Pane-4><Type>1</Type><DockingCX>211</DockingCX><DockingCY>250</DockingCY><Selected>5</Selected><Panes>1</Panes><Pane-1>5</Pane-1></Pane-4><Pane-5><Type>0</Type><DockingCX>250</DockingCX><DockingCY>250</DockingCY><Title>Workspace</Title><ID>1000</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>4</DockingHolder><FloatingHolder>0</FloatingHolder><LastHolder>4</LastHolder></Pane-5><Pane-6><Type>4</Type><DockingCX>0</DockingCX><DockingCY>0</DockingCY></Pane-6><Pane-7><Type>1</Type><DockingCX>157</DockingCX><DockingCY>250</DockingCY><Selected>0</Selected><Panes>0</Panes></Pane-7><Pane-8><Type>1</Type><DockingCX>250</DockingCX><DockingCY>107</DockingCY><Selected>9</Selected><Panes>1</Panes><Pane-1>9</Pane-1></Pane-8><Pane-9><Type>0</Type><DockingCX>250</DockingCX><DockingCY>250</DockingCY><Title>Output</Title><ID>1002</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>8</DockingHolder><FloatingHolder>0</FloatingHolder><LastHolder>8</LastHolder></Pane-9><Pane-10><Type>0</Type><DockingCX>250</DockingCX><DockingCY>250</DockingCY><Title>Artist Editor</Title><ID>1001</ID><IconID>-1</IconID><Options>0</Options><DockingHolder>7</DockingHolder><FloatingHolder>0</FloatingHolder><LastHolder>7</LastHolder></Pane-10><Summary><TopContainer>1</TopContainer><Client>6</Client><Panes>10</Panes></Summary></Application_Layout></DockingPaneLayouts>
]]></RmTextDataBlock>
     <RmRegistryBranch NAME="RmPreviewDx9Window" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="EffectPlacementRepository" API="" XML_VERSION="RenderMonkey 1.6">
       <RmRegistryBranch NAME="Effect Workspace.First Example.Multiple Render Targets Deferred Shading" API="" XML_VERSION="RenderMonkey 1.6">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
       <RmRegistryBranch NAME="Effect Workspace.Second Example.Single Floating Point Texture 32 bits" API="" XML_VERSION="RenderMonkey 1.6">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
       <RmRegistryBranch NAME="Effect Workspace.Third Example.Single A8R8G8B8 Texture" API="" XML_VERSION="RenderMonkey 1.6">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
       <RmRegistryBranch NAME="Effect Workspace.Second Example.Single Floating Point Texture 32 bits Specular" API="" XML_VERSION="RenderMonkey 1.6">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="350" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
      </RmRegistryBranch>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmStreamEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Multiple Render Targets.Stream Mapping" API="" XML_VERSION="RenderMonkey 1.6">
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="258" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="116" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="554" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="228" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Screen-AlignedQuad.Stream Mapping" API="" XML_VERSION="RenderMonkey 1.6">
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="258" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="116" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="554" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="222" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="Effect Workspace.Effect Group 1.Multiple Render Targets.Stream Mapping_1" API="" XML_VERSION="RenderMonkey 1.6">
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="258" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="116" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="554" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="222" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmRenderTargetEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmColorEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="NoteEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.6">
       <RmRegistryBranch NAME="Effect Workspace.Third Example.Single A8R8G8B8 Texture.Description" API="" XML_VERSION="RenderMonkey 1.6">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="219" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="116" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="428" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="236" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmPreviewGLPreview" API="" XML_VERSION="RenderMonkey 1.6"/>
     <RmRegistryBranch NAME="RmRenderableTextureEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmShaderEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="Effect Workspace.Third Example.Multiple Render Targets" API="" XML_VERSION="RenderMonkey 1.6">
       <RmRegistryBranch NAME="Disassembly" API="" XML_VERSION="RenderMonkey 1.6"/>
       <RmStringVariable NAME="Editing Shader" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Vertex Shader]]></RmTextDataBlock></RmStringVariable>
       <RmStringVariable NAME="Editing Pass" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Output to MRT]]></RmTextDataBlock></RmStringVariable>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="102" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="691" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="344" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="29" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="Effect Workspace.Second Example.Single Floating Point Texture 32 bits" API="" XML_VERSION="RenderMonkey 1.6">
       <RmRegistryBranch NAME="Disassembly" API="" XML_VERSION="RenderMonkey 1.6"/>
       <RmStringVariable NAME="Editing Shader" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Pixel Shader]]></RmTextDataBlock></RmStringVariable>
       <RmStringVariable NAME="Editing Pass" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Light 1]]></RmTextDataBlock></RmStringVariable>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-3" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="751" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="478" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="27" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="Effect Workspace.Second Example.Single Floating Point Texture 32 bits Specular" API="" XML_VERSION="RenderMonkey 1.6">
       <RmRegistryBranch NAME="Disassembly" API="" XML_VERSION="RenderMonkey 1.6"/>
       <RmStringVariable NAME="Editing Shader" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Vertex Shader]]></RmTextDataBlock></RmStringVariable>
       <RmStringVariable NAME="Editing Pass" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Light 1]]></RmTextDataBlock></RmStringVariable>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="4" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="735" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="484" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="66" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="Effect Workspace.Third Example.Single A8R8G8B8 Texture" API="" XML_VERSION="RenderMonkey 1.6">
       <RmRegistryBranch NAME="Disassembly" API="" XML_VERSION="RenderMonkey 1.6"/>
       <RmStringVariable NAME="Editing Shader" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Vertex Shader]]></RmTextDataBlock></RmStringVariable>
       <RmStringVariable NAME="Editing Pass" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Light 1]]></RmTextDataBlock></RmStringVariable>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="691" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="487" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="52" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
      <RmRegistryBranch NAME="Effect Workspace.First Example.Multiple Render Targets Deferred Shading" API="" XML_VERSION="RenderMonkey 1.6">
       <RmRegistryBranch NAME="Disassembly" API="" XML_VERSION="RenderMonkey 1.6"/>
       <RmStringVariable NAME="Editing Shader" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Pixel Shader]]></RmTextDataBlock></RmStringVariable>
       <RmStringVariable NAME="Editing Pass" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Light 0]]></RmTextDataBlock></RmStringVariable>
       <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="116" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="691" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="344" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="88" MIN="-10" MAX="10" CLAMP="FALSE"/>
      </RmRegistryBranch>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmRenderStateBlockEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmTextureObjectEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.6">
       <RmRegistryBranch NAME="Effect Workspace.Third Example.Single A8R8G8B8 Texture" API="" XML_VERSION="RenderMonkey 1.6">
        <RmIntegerVariable NAME="X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="66" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="87" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Width" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="691" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Height" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="344" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="ShowStatus" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Visible" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="0" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized X" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
        <RmIntegerVariable NAME="Minimized Y" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="-1" MIN="-10" MAX="10" CLAMP="FALSE"/>
       </RmRegistryBranch>
      </RmRegistryBranch>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmTextureGenerator" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="EditNodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmDynamicVariableEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
     </RmRegistryBranch>
     <RmRegistryBranch NAME="RmScalarEditor" API="" XML_VERSION="RenderMonkey 1.6">
      <RmRegistryBranch NAME="NodeRepository" API="" XML_VERSION="RenderMonkey 1.6"/>
     </RmRegistryBranch>
    </RmRegistryBranch>
    <RmRegistryBranch NAME="WORKSPACE" API="" XML_VERSION="RenderMonkey 1.6">
     <RmStringVariable NAME="LAST_SAVE" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
15/9/2005 12:46:40]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="VERSION" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
RenderMonkey Version 1.6 (build 91)]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="XML_VERSION" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
RenderMonkey 1.6]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="BASE_WORKSPACE_PATH" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
C:\Documents and Settings\Frank\Desktop\Gem 6 Article\Deferred mio\Final\]]></RmTextDataBlock></RmStringVariable>
    </RmRegistryBranch>
   </RmRegistryBranch>
  </RmRegistryBranch>
  <RmEffectGroup NAME="First Example" API="">
   <RmDirectXEffect NAME="Multiple Render Targets Deferred Shading" API="D3D" ACTIVE_CAMERA="">
    <RmStringVariable NAME="Description" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
This is the first Deferred Shading example.
It use two floating point textures to create a G-Buffer which is filled using 
Multiple Render Targets in a single pass.

After the G-Buffer is filled, two point lights are rendered and the influence of 
each one is blended in the frame buffer.]]></RmTextDataBlock></RmStringVariable>
    <RmCamera NAME="Camera" API="" CAMERA_POSITION_X="2.514210" CAMERA_POSITION_Y="-37.244499" CAMERA_POSITION_Z="34.530918" LOOK_AT_VECTOR_X="-0.274290" LOOK_AT_VECTOR_Y="3.066250" LOOK_AT_VECTOR_Z="30.567160" UP_VECTOR_X="-0.012450" UP_VECTOR_Y="0.096998" UP_VECTOR_Z="0.995207" FOV="60.000000" NEAR_CLIP_PLANE="1.000000" FAR_CLIP_PLANE="1000.000000"/>
    <RmMatrixVariable NAME="matWorld" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="World" VALUE_0="1.000000" VALUE_1="0.000000" VALUE_2="0.000000" VALUE_3="0.000000" VALUE_4="0.000000" VALUE_5="1.000000" VALUE_6="0.000000" VALUE_7="0.000000" VALUE_8="0.000000" VALUE_9="0.000000" VALUE_10="1.000000" VALUE_11="0.000000" VALUE_12="0.000000" VALUE_13="0.000000" VALUE_14="0.000000" VALUE_15="1.000000"/>
    <RmRenderableTexture NAME="G_Buffer_1" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="" ORIGIN="0" WIDTH="338" HEIGHT="312" FORMAT="116" USE_VIEWPORT_DIMENSIONS="TRUE" GENERATE_MIPMAPS="TRUE" WIDTH_RATIO="1.000000" HEIGHT_RATIO="1.000000"/>
    <RmRenderableTexture NAME="G_Buffer_0" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="" ORIGIN="0" WIDTH="338" HEIGHT="312" FORMAT="116" USE_VIEWPORT_DIMENSIONS="TRUE" GENERATE_MIPMAPS="TRUE" WIDTH_RATIO="1.000000" HEIGHT_RATIO="1.000000"/>
    <RmPass NAME="Light 1" API="D3D" PASS_INDEX="2" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="ScreenAlignedQuad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_FILLMODE" API="D3D" STATE="8" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_SRCBLEND" API="D3D" STATE="19" VALUE="14" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_DESTBLEND" API="D3D" STATE="20" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHABLENDENABLE" API="D3D" STATE="27" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_BLENDOP" API="D3D" STATE="171" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
struct VS_OUTPUT
{
   float4 pos       : POSITION0;
   float2 texCoord  : TEXCOORD0;
};

VS_OUTPUT vs_main( float4 inPos: POSITION )
{
   VS_OUTPUT o = (VS_OUTPUT) 0;

   // Compute vertex positions of a screen aligned quad
   
   inPos.xy = sign( inPos.xy);
   o.pos = float4( inPos.xy, 0.0f, 1.0f);

   //  get the screen coords into range [0,1]
   
   o.texCoord = float2(o.pos.x, -o.pos.y) * 0.5 + 0.5;
   return o;
}
]]></RmShaderCode></RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
sampler2D G_Buffer_0;
sampler2D G_Buffer_1;

float3 LightPos_1;
float  InvSqrLightRange;
float4 DiffuseLightColor_1;

float4 ps_main( float2 texCoord  : TEXCOORD0 ) : COLOR
{
    // pixel position and normal are extracted
    // from G-Buffer

    float3 PixelPos = tex2D(G_Buffer_0, texCoord); 
    float3 Normal   = tex2D(G_Buffer_1, texCoord);

    // Computes light attenuation and direction

    float3 LightDir   = (LightPos_1 - PixelPos) * InvSqrLightRange;
    float Attenuation = saturate(1-dot(LightDir, LightDir));
    LightDir          = normalize(LightDir);

    // Lighting equation

    float  DiffuseInfluence = dot(LightDir, Normal) * Attenuation;
    
    return DiffuseLightColor_1 * DiffuseInfluence;   
}]]></RmShaderCode>
      <RmSampler NAME="G_Buffer_0" API="" REGISTER="0"/>
      <RmSampler NAME="G_Buffer_1" API="" REGISTER="1"/>
      <RmShaderConstant NAME="DiffuseLightColor_1" API="" REGISTER="2"/>
      <RmShaderConstant NAME="InvSqrLightRange" API="" REGISTER="1"/>
      <RmShaderConstant NAME="LightPos_1" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping_1" API=""/>
     <RmTextureObject NAME="G_Buffer_0" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer_0" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSW" API="D3D" STATE="3" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="G_Buffer_1" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer_1" API=""/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="Light 0" API="D3D" PASS_INDEX="1" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="ScreenAlignedQuad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
sampler2D G_Buffer_0;
sampler2D G_Buffer_1;

float3 LightPos_0;
float  InvSqrLightRange;
float4 DiffuseLightColor_0;

float4 ps_main( float2 texCoord  : TEXCOORD0 ) : COLOR
{
    // pixel position and normal are extracted
    // from G-Buffer

    float3 PixelPos = tex2D(G_Buffer_0, texCoord); 
    float3 Normal   = tex2D(G_Buffer_1, texCoord);

    // Computes light attenuation and direction

    float3 LightDir   = (LightPos_0 - PixelPos) * InvSqrLightRange;
    float Attenuation = saturate(1-dot(LightDir, LightDir));
    LightDir          = normalize(LightDir);

    // Lighting equation

    float  DiffuseInfluence = dot(LightDir, Normal) * Attenuation;
    
    return DiffuseLightColor_0 * DiffuseInfluence;   
}

]]></RmShaderCode>
      <RmSampler NAME="G_Buffer_0" API="" REGISTER="0"/>
      <RmSampler NAME="G_Buffer_1" API="" REGISTER="1"/>
      <RmShaderConstant NAME="DiffuseLightColor_0" API="" REGISTER="2"/>
      <RmShaderConstant NAME="InvSqrLightRange" API="" REGISTER="1"/>
      <RmShaderConstant NAME="LightPos_0" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
struct VS_OUTPUT
{
   float4 pos       : POSITION0;
   float2 texCoord  : TEXCOORD0;
};

VS_OUTPUT vs_main( float4 inPos: POSITION )
{
   VS_OUTPUT o = (VS_OUTPUT) 0;

   // Compute vertex positions of a screen aligned quad
   
   inPos.xy = sign( inPos.xy);
   o.pos = float4( inPos.xy, 0.0f, 1.0f);

   //  get the screen coords into range [0,1]
   
   o.texCoord = float2(o.pos.x, -o.pos.y) * 0.5 + 0.5;
   return o;
}
]]></RmShaderCode></RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping_1" API=""/>
     <RmTextureObject NAME="G_Buffer_1" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer_1" API=""/>
     </RmTextureObject>
     <RmTextureObject NAME="G_Buffer_0" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer_0" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSW" API="D3D" STATE="3" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="Output to G_Buffer" API="D3D" PASS_INDEX="0" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model" API=""/>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
struct PS_INPUT
{
   float3 Normal:  TEXCOORD0;
   float3 WorldPos:TEXCOORD1;
};

struct PS_OUTPUT
{
   float4 Color0: COLOR0;
   float4 Color1: COLOR1;
};

PS_OUTPUT ps_main( PS_INPUT Input )
{
   PS_OUTPUT o;
   
   o.Color0.xyz = Input.WorldPos;
   o.Color1.xyz = normalize( Input.Normal );
   
   o.Color0.w = 0;
   o.Color1.w = 0;
   
   return o;
}



]]></RmShaderCode></RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float4x4 matViewProjection;
float4x4 matWorld;

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float3 Normal:  TEXCOORD0;
   float3 WorldPos:TEXCOORD1;
};

VS_OUTPUT vs_main( float4 inPos: POSITION, float3 inNormal: NORMAL )
{
   VS_OUTPUT Out;

   Out.Pos       = mul(matViewProjection, inPos);
   Out.WorldPos  = mul(matWorld,          inPos);
   Out.Normal    = mul(matWorld,          inNormal);

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="4"/>
     </RmHLSLShader>
     <RmRenderTarget NAME="G_Buffer_1" API="" INDEX="1" RENDER_TO_SCREEN="FALSE" COLOR_CLEAR="TRUE" DEPTH_CLEAR="TRUE" CLEAR_COLOR_VALUE="0" DEPTH_CLEAR_VALUE="1.000000"/>
     <RmRenderTarget NAME="G_Buffer_0" API="" INDEX="0" RENDER_TO_SCREEN="FALSE" COLOR_CLEAR="TRUE" DEPTH_CLEAR="TRUE" CLEAR_COLOR_VALUE="0" DEPTH_CLEAR_VALUE="1.000000"/>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
   </RmDirectXEffect>
  </RmEffectGroup>
  <RmEffectGroup NAME="Second Example" API="">
   <RmDirectXEffect NAME="Single Floating Point Texture 32 bits" API="D3D" ACTIVE_CAMERA="">
    <RmStringVariable NAME="Description" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
This is the second example of Deferred Shading. This time a single floatin point texture
is used so there is not need for Multiple Rendere Targets.

In the code the ViewAspect is build from the Viewport Dimensions just because
RenderMonkey don't support the semantic ViewAspect. When on the engine, the 
ViewAspect should be provided as a shader parameter instead of the 
Viewport Dimensions.
]]></RmTextDataBlock></RmStringVariable>
    <RmCamera NAME="Camera" API="" CAMERA_POSITION_X="2.514210" CAMERA_POSITION_Y="-37.244499" CAMERA_POSITION_Z="34.530918" LOOK_AT_VECTOR_X="-0.274290" LOOK_AT_VECTOR_Y="3.066250" LOOK_AT_VECTOR_Z="30.567160" UP_VECTOR_X="-0.012450" UP_VECTOR_Y="0.096998" UP_VECTOR_Z="0.995207" FOV="60.000000" NEAR_CLIP_PLANE="1.000000" FAR_CLIP_PLANE="1000.000000"/>
    <RmRenderableTexture NAME="G_Buffer" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="" ORIGIN="0" WIDTH="338" HEIGHT="312" FORMAT="116" USE_VIEWPORT_DIMENSIONS="TRUE" GENERATE_MIPMAPS="TRUE" WIDTH_RATIO="1.000000" HEIGHT_RATIO="1.000000"/>
    <RmPass NAME="Light 0" API="D3D" PASS_INDEX="1" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="ScreenAlignedQuad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
sampler2D G_Buffer;

struct PS_INPUT
{
    float2 texCoord      : TEXCOORD0;
    float3 EyeScreenRay  : TEXCOORD1;
    float3 LightPos      : TEXCOORD2;
};

float  InvSqrLightRange;
half4  DiffuseLightColor_0;

half4 ps_main( PS_INPUT Input ) : COLOR
{
   float4 G_Buffer = tex2D( G_Buffer, Input.texCoord );

   // Compute pixel position 

   float  Depth = G_Buffer.z;
   float3 PixelPos = normalize(Input.EyeScreenRay.xyz) * Depth;
   
   // Compute normal
   
   half3 Normal;
   Normal.xy = G_Buffer.xy;
   Normal.z = -sqrt(1-dot(Normal.xy,Normal.xy));
   
   // Computes light attenuation and direction

   float3 LightDir = (Input.LightPos - PixelPos)*InvSqrLightRange;
   half   Attenuation = saturate(1-dot(LightDir,LightDir));
   LightDir = normalize(LightDir);
  
   // Lighting equation

   half  DiffuseInfluence = dot(LightDir, Normal)*Attenuation;
   
   return DiffuseLightColor_0 * DiffuseInfluence;      
}

]]></RmShaderCode>
      <RmSampler NAME="G_Buffer" API="" REGISTER="0"/>
      <RmShaderConstant NAME="DiffuseLightColor_0" API="" REGISTER="1"/>
      <RmShaderConstant NAME="InvSqrLightRange" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float2 ViewportDimensions;
float TanFOV;

float3 LightPos_0;

float4x4 matWorldView;

struct VS_OUTPUT
{
   float4 pos          : POSITION0;
   float2 texCoord     : TEXCOORD0;
   float3 EyeScreenRay : TEXCOORD1;
   float3 LightPos     : TEXCOORD2;
};

VS_OUTPUT vs_main( float4 inPos: POSITION )
{
   VS_OUTPUT o = (VS_OUTPUT) 0;

   // Compute vertex positions of a screen aligned quad

   inPos.xy = sign( inPos.xy);
   o.pos = float4( inPos.xy, 0.0f, 1.0f);
   
   // RenderMonkey don't have a ViewAspect variable, but it can be computed
   // When on the engine, the ViewAspect is provided instead of the Dimensions

   float ViewAspect = ViewportDimensions.x/ViewportDimensions.y;
   
   // This ray goes from the camera position to the pixel in the screen
   
   o.EyeScreenRay = float3(inPos.x * ViewAspect, inPos.y, TanFOV);

   // get the screen coords into range [0,1]
   
   o.texCoord = float2(o.pos.x, -o.pos.y) * 0.5 + 0.5;
   
   // Compute the light pos in normalized view space
   
   float4 p = mul( matWorldView, float4(LightPos_0,1));
   o.LightPos = p.xyz/p.w;
   
   return o;
}
]]></RmShaderCode>
      <RmShaderConstant NAME="LightPos_0" API="" REGISTER="6"/>
      <RmShaderConstant NAME="TanFOV" API="" REGISTER="5"/>
      <RmShaderConstant NAME="ViewportDimensions" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorldView" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping_1" API=""/>
     <RmTextureObject NAME="G_Buffer" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSW" API="D3D" STATE="3" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="Output to G_Buffer" API="D3D" PASS_INDEX="0" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model" API=""/>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
struct PS_INPUT
{
   float3 Normal:  TEXCOORD0;
   float3 WorldPos :TEXCOORD1;
};

float4 ps_main( PS_INPUT Input ) : COLOR0
{
   float4 G_Buffer;
   
   G_Buffer.xy = normalize( Input.Normal ).xy; 
   G_Buffer.z = length(Input.WorldPos);
   
   G_Buffer.w = 0;
   
   return G_Buffer;
}



]]></RmShaderCode></RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float4x4 matViewProjection;
float4x4 matWorldView;

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float3 Normal:  TEXCOORD0;
   float3 WorldPos:TEXCOORD1;
};

VS_OUTPUT vs_main( float4 inPos: POSITION, float3 inNormal: NORMAL )
{
   VS_OUTPUT Out;
   
   Out.Pos    = mul( matViewProjection,  inPos);   
   Out.Normal = mul( matWorldView,       inNormal);
   float4 pp  = mul( matWorldView,       inPos );
   
   Out.WorldPos = pp.xyz / pp.w;

   return Out;
}
]]></RmShaderCode>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
      <RmShaderConstant NAME="matWorldView" API="" REGISTER="4"/>
     </RmHLSLShader>
     <RmRenderTarget NAME="G_Buffer" API="" INDEX="0" RENDER_TO_SCREEN="FALSE" COLOR_CLEAR="TRUE" DEPTH_CLEAR="TRUE" CLEAR_COLOR_VALUE="0" DEPTH_CLEAR_VALUE="1.000000"/>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Light 1" API="D3D" PASS_INDEX="2" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="ScreenAlignedQuad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_FILLMODE" API="D3D" STATE="8" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_SRCBLEND" API="D3D" STATE="19" VALUE="14" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_DESTBLEND" API="D3D" STATE="20" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHABLENDENABLE" API="D3D" STATE="27" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_BLENDOP" API="D3D" STATE="171" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float2 ViewportDimensions;
float TanFOV;

float3 LightPos_1;

float4x4 matWorldView;

struct VS_OUTPUT
{
   float4 pos          : POSITION0;
   float2 texCoord     : TEXCOORD0;
   float3 EyeScreenRay : TEXCOORD1;
   float3 LightPos     : TEXCOORD2;
};

VS_OUTPUT vs_main( float4 inPos: POSITION )
{
   VS_OUTPUT o = (VS_OUTPUT) 0;

   // Compute vertex positions of a screen aligned quad

   inPos.xy = sign( inPos.xy);
   o.pos = float4( inPos.xy, 0.0f, 1.0f);
   
   // RenderMonkey don't have a ViewAspect variable, but it can be computed
   // When on the engine, the ViewAspect is provided instead of the Dimensions

   float ViewAspect = ViewportDimensions.x/ViewportDimensions.y;
   
   // This ray goes from the camera position to the pixel in the screen
   
   o.EyeScreenRay = float3(inPos.x * ViewAspect, inPos.y, TanFOV);

   // get the screen coords into range [0,1]
   
   o.texCoord = float2(o.pos.x, -o.pos.y) * 0.5 + 0.5;
   
   // Compute the light pos in normalized view space
   
   float4 p = mul( matWorldView, float4(LightPos_1,1) );
   o.LightPos = p.xyz/p.w;

   return o;
}
]]></RmShaderCode>
      <RmShaderConstant NAME="LightPos_1" API="" REGISTER="6"/>
      <RmShaderConstant NAME="TanFOV" API="" REGISTER="5"/>
      <RmShaderConstant NAME="ViewportDimensions" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorldView" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
sampler2D G_Buffer;

struct PS_INPUT
{
    float2 texCoord      : TEXCOORD0;
    float3 EyeScreenRay  : TEXCOORD1;
    float3 LightPos      : TEXCOORD2;
};

float  InvSqrLightRange;
half4  DiffuseLightColor_1;

half4 ps_main( PS_INPUT Input ) : COLOR
{
   float4 G_Buffer = tex2D( G_Buffer, Input.texCoord );

   // Compute pixel position 

   float  Depth = G_Buffer.z;
   float3 PixelPos = normalize(Input.EyeScreenRay.xyz) * Depth;
   
   // Compute normal
   
   half3 Normal;
   Normal.xy = G_Buffer.xy;
   Normal.z = -sqrt(1-dot(Normal.xy,Normal.xy));
   
   // Computes light attenuation and direction

   float3 LightDir = (Input.LightPos - PixelPos)*InvSqrLightRange;
   half   Attenuation = saturate(1-dot(LightDir,LightDir));
   LightDir = normalize(LightDir);
  
   // Lighting equation

   half  DiffuseInfluence = dot(LightDir, Normal)*Attenuation;
   
   return DiffuseLightColor_1 * DiffuseInfluence;      
}
]]></RmShaderCode>
      <RmSampler NAME="G_Buffer" API="" REGISTER="0"/>
      <RmShaderConstant NAME="DiffuseLightColor_1" API="" REGISTER="1"/>
      <RmShaderConstant NAME="InvSqrLightRange" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping_1" API=""/>
     <RmTextureObject NAME="G_Buffer" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSW" API="D3D" STATE="3" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
   </RmDirectXEffect>
   <RmDirectXEffect NAME="Single Floating Point Texture 32 bits Specular" API="D3D" ACTIVE_CAMERA="">
    <RmStringVariable NAME="Description" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
This is the second example of Deferred Shading. This time a single floatin point texture
is used so there is not need for Multiple Rendere Targets.

In the code the ViewAspect is build from the Viewport Dimensions just because
RenderMonkey don't support the semantic ViewAspect. When on the engine, the 
ViewAspect should be provided as a shader parameter instead of the 
Viewport Dimensions.
]]></RmTextDataBlock></RmStringVariable>
    <RmCamera NAME="Camera" API="" CAMERA_POSITION_X="2.514210" CAMERA_POSITION_Y="-37.244499" CAMERA_POSITION_Z="34.530918" LOOK_AT_VECTOR_X="-0.274290" LOOK_AT_VECTOR_Y="3.066250" LOOK_AT_VECTOR_Z="30.567160" UP_VECTOR_X="-0.012450" UP_VECTOR_Y="0.096998" UP_VECTOR_Z="0.995207" FOV="60.000000" NEAR_CLIP_PLANE="1.000000" FAR_CLIP_PLANE="1000.000000"/>
    <RmRenderableTexture NAME="G_Buffer" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="" ORIGIN="0" WIDTH="338" HEIGHT="312" FORMAT="116" USE_VIEWPORT_DIMENSIONS="TRUE" GENERATE_MIPMAPS="TRUE" WIDTH_RATIO="1.000000" HEIGHT_RATIO="1.000000"/>
    <RmPass NAME="Light 0" API="D3D" PASS_INDEX="1" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="ScreenAlignedQuad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
sampler2D G_Buffer;

struct PS_INPUT
{
    float2 texCoord      : TEXCOORD0;
    float3 EyeScreenRay  : TEXCOORD1;
    float3 LightPos      : TEXCOORD2;
};

float  InvSqrLightRange;
half4 DiffuseLightColor_0;

half4 ps_main( PS_INPUT Input ) : COLOR
{
   float4 G_Buffer = tex2D( G_Buffer, Input.texCoord );

   // Compute pixel position 

   float  Depth = G_Buffer.z;
   float3 PixelPos = normalize(Input.EyeScreenRay.xyz) * Depth;
   
   // Compute normal
   
   half3 Normal;
   Normal.xy = G_Buffer.xy;
   Normal.z = -sqrt(1-dot(Normal.xy,Normal.xy));
   
   // Computes light attenuation and direction

   float3 LightDir = (Input.LightPos - PixelPos)*InvSqrLightRange;
   half Attenuation = saturate(1-dot(LightDir, LightDir));
   LightDir = normalize(LightDir);
   
   half3 Reflect = -reflect( LightDir, Normal );


   // Lighting equation

   half  SpecularInfluence = pow(saturate(dot(Reflect, LightDir)), 8) * Attenuation;
   half  DiffuseInfluence  = dot(LightDir, Normal)*Attenuation;
   
   return DiffuseLightColor_0 * DiffuseInfluence + SpecularInfluence;      
}

]]></RmShaderCode>
      <RmSampler NAME="G_Buffer" API="" REGISTER="0"/>
      <RmShaderConstant NAME="DiffuseLightColor_0" API="" REGISTER="1"/>
      <RmShaderConstant NAME="InvSqrLightRange" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float2 ViewportDimensions;
float TanFOV;

float3 LightPos_0;

float4x4 matWorldView;

struct VS_OUTPUT
{
   float4 pos          : POSITION0;
   float2 texCoord     : TEXCOORD0;
   float3 EyeScreenRay : TEXCOORD1;
   float3 LightPos     : TEXCOORD2;
};

VS_OUTPUT vs_main( float4 inPos: POSITION )
{
   VS_OUTPUT o = (VS_OUTPUT) 0;

   // Compute vertex positions of a screen aligned quad

   inPos.xy = sign( inPos.xy);
   o.pos = float4( inPos.xy, 0.0f, 1.0f);
   
   // RenderMonkey don't have a ViewAspect variable, but it can be computed
   // When on the engine, the ViewAspect is provided instead of the Dimensions

   float ViewAspect = ViewportDimensions.x/ViewportDimensions.y;
   
   // This ray goes from the camera position to the pixel in the screen
   
   o.EyeScreenRay = float3(inPos.x * ViewAspect, inPos.y, TanFOV);

   // get the screen coords into range [0,1]
   
   o.texCoord = float2(o.pos.x, -o.pos.y) * 0.5 + 0.5;
   
   // Compute the light pos in normalized view space
   
   float4 p = mul( matWorldView, float4(LightPos_0,1) );
   o.LightPos = p.xyz/p.w;
   
   return o;
}
]]></RmShaderCode>
      <RmShaderConstant NAME="LightPos_0" API="" REGISTER="6"/>
      <RmShaderConstant NAME="TanFOV" API="" REGISTER="5"/>
      <RmShaderConstant NAME="ViewportDimensions" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorldView" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping_1" API=""/>
     <RmTextureObject NAME="G_Buffer" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSW" API="D3D" STATE="3" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="Output to G_Buffer" API="D3D" PASS_INDEX="0" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model" API=""/>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
struct PS_INPUT
{
   float3 Normal:  TEXCOORD0;
   float3 WorldPos :TEXCOORD1;
};

float4 ps_main( PS_INPUT Input ) : COLOR0
{
   float4 G_Buffer;
   
   G_Buffer.xy = normalize( Input.Normal ).xy; 
   G_Buffer.z = length(Input.WorldPos);
   
   G_Buffer.w = 0;
   
   return G_Buffer;
}



]]></RmShaderCode></RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float4x4 matViewProjection;
float4x4 matWorldView;

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float3 Normal:  TEXCOORD0;
   float3 WorldPos:TEXCOORD1;
};

VS_OUTPUT vs_main( float4 inPos: POSITION, float3 inNormal: NORMAL )
{
   VS_OUTPUT Out;
   
   Out.Pos    = mul( matViewProjection,  inPos );   
   Out.Normal = mul( matWorldView,       inNormal );
   float4 pp  = mul( matWorldView,       inPos );
   
   Out.WorldPos = pp.xyz / pp.w;

   return Out;
}
]]></RmShaderCode>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
      <RmShaderConstant NAME="matWorldView" API="" REGISTER="4"/>
     </RmHLSLShader>
     <RmRenderTarget NAME="G_Buffer" API="" INDEX="0" RENDER_TO_SCREEN="FALSE" COLOR_CLEAR="TRUE" DEPTH_CLEAR="TRUE" CLEAR_COLOR_VALUE="0" DEPTH_CLEAR_VALUE="1.000000"/>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Light 1" API="D3D" PASS_INDEX="2" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="ScreenAlignedQuad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_FILLMODE" API="D3D" STATE="8" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_SRCBLEND" API="D3D" STATE="19" VALUE="14" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_DESTBLEND" API="D3D" STATE="20" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHABLENDENABLE" API="D3D" STATE="27" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_BLENDOP" API="D3D" STATE="171" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float2 ViewportDimensions;
float TanFOV;

float3 LightPos_1;

float4x4 matWorldView;

struct VS_OUTPUT
{
   float4 pos          : POSITION0;
   float2 texCoord     : TEXCOORD0;
   float3 EyeScreenRay : TEXCOORD1;
   float3 LightPos     : TEXCOORD2;
};

VS_OUTPUT vs_main( float4 inPos: POSITION )
{
   VS_OUTPUT o = (VS_OUTPUT) 0;

   // Compute vertex positions of a screen aligned quad

   inPos.xy = sign( inPos.xy);
   o.pos = float4( inPos.xy, 0.0f, 1.0f);
   
   // RenderMonkey don't have a ViewAspect variable, but it can be computed
   // When on the engine, the ViewAspect is provided instead of the Dimensions

   float ViewAspect = ViewportDimensions.x/ViewportDimensions.y;
   
   // This ray goes from the camera position to the pixel in the screen
   
   o.EyeScreenRay = float3(inPos.x * ViewAspect, inPos.y, TanFOV);

   // get the screen coords into range [0,1]
   
   o.texCoord = float2(o.pos.x, -o.pos.y) * 0.5 + 0.5;
   
   // Compute the light pos in normalized view space
   
   float4 p = mul( matWorldView, float4(LightPos_1,1) );
   o.LightPos = p.xyz/p.w;
   
   return o;
   
   return o;
}
]]></RmShaderCode>
      <RmShaderConstant NAME="LightPos_1" API="" REGISTER="6"/>
      <RmShaderConstant NAME="TanFOV" API="" REGISTER="5"/>
      <RmShaderConstant NAME="ViewportDimensions" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorldView" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
sampler2D G_Buffer;

struct PS_INPUT
{
    float2 texCoord      : TEXCOORD0;
    float3 EyeScreenRay  : TEXCOORD1;
    float3 LightPos      : TEXCOORD2;
};

float  InvSqrLightRange;
half4 DiffuseLightColor_1;

half4 ps_main( PS_INPUT Input ) : COLOR
{
   float4 G_Buffer = tex2D( G_Buffer, Input.texCoord );

   // Compute pixel position 

   float  Depth = G_Buffer.z;
   float3 PixelPos = normalize(Input.EyeScreenRay.xyz) * Depth;
   
   // Compute normal
   
   half3 Normal;
   Normal.xy = G_Buffer.xy;
   Normal.z = -sqrt(1-dot(Normal.xy,Normal.xy));
   
   // Computes light attenuation and direction

   float3 LightDir = (Input.LightPos - PixelPos)*InvSqrLightRange;
   half Attenuation = saturate(1-dot(LightDir, LightDir));
   LightDir = normalize(LightDir);
   
   half3 Reflect = -reflect( LightDir, Normal );


   // Lighting equation

   half  SpecularInfluence = pow(saturate(dot(Reflect, LightDir)), 8) * Attenuation;
   half  DiffuseInfluence  = dot(LightDir, Normal)*Attenuation;
   
   return DiffuseLightColor_1 * DiffuseInfluence + SpecularInfluence;      
}
]]></RmShaderCode>
      <RmSampler NAME="G_Buffer" API="" REGISTER="0"/>
      <RmShaderConstant NAME="DiffuseLightColor_1" API="" REGISTER="1"/>
      <RmShaderConstant NAME="InvSqrLightRange" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping_1" API=""/>
     <RmTextureObject NAME="G_Buffer" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSW" API="D3D" STATE="3" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
   </RmDirectXEffect>
  </RmEffectGroup>
  <RmEffectGroup NAME="Third Example" API="">
   <RmDirectXEffect NAME="Single A8R8G8B8 Texture" API="D3D" ACTIVE_CAMERA="">
    <RmStringVariable NAME="Description" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
This is the third example of Deferred Shading. This time the G-Buffer consist on
a single A8R8G8B8 which is widely supported.

As the A8R8G8B8 texture only has 32 bits per texel instead of the 128 bits
Of the previous examples the resulting image has a lower quality.

Position is packed in 16 bits and each component of the normal vector 
gets 8 bits.

Normal z component is extracted from the NormalTexture instead of computing it
using the Pythagoras trick.

This time the position unpack procedure avoid the need to normalize
The eye-screen ray vector by dividing the pixel distance by the ray length
Before packing it in the G_Buffer.
]]></RmTextDataBlock></RmStringVariable>
    <RmCamera NAME="Camera" API="" CAMERA_POSITION_X="2.514210" CAMERA_POSITION_Y="-37.244499" CAMERA_POSITION_Z="34.530918" LOOK_AT_VECTOR_X="-0.274290" LOOK_AT_VECTOR_Y="3.066250" LOOK_AT_VECTOR_Z="30.567160" UP_VECTOR_X="-0.012450" UP_VECTOR_Y="0.096998" UP_VECTOR_Z="0.995207" FOV="60.000000" NEAR_CLIP_PLANE="1.000000" FAR_CLIP_PLANE="1000.000000"/>
    <Rm2DTextureVariable NAME="NormalTexture" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME=".\NormalTexture.dds" ORIGIN="0"/>
    <RmRenderableTexture NAME="G_Buffer" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="" ORIGIN="0" WIDTH="338" HEIGHT="312" FORMAT="32" USE_VIEWPORT_DIMENSIONS="TRUE" GENERATE_MIPMAPS="TRUE" WIDTH_RATIO="1.000000" HEIGHT_RATIO="1.000000"/>
    <RmPass NAME="Light 0" API="D3D" PASS_INDEX="1" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="ScreenAlignedQuad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
sampler2D G_Buffer;
sampler2D Normal_Texture;

struct PS_INPUT
{
    half2 texCoord      : TEXCOORD0;
    half3 EyeScreenRay  : TEXCOORD1;
    half3 LightPos      : TEXCOORD2;
};

half  InvSqrLightRange;
half4 DiffuseLightColor_0;

half UnpackFloat16( half2 depth )
{
   const half2 unpack = {1024.0f, 4.0f};

   return dot(unpack, depth);
}

half4 ps_main( PS_INPUT Input ) : COLOR
{
   half4 G_Buffer = tex2D( G_Buffer, Input.texCoord );

   // Compute pixel position 

   half  Depth = UnpackFloat16( G_Buffer.zw );
   float3 PixelPos = Input.EyeScreenRay.xyz * Depth;
   
   // Compute normal
   
   half3 Normal;
   G_Buffer.z = -tex2D( Normal_Texture, G_Buffer.xy );
   Normal.z = G_Buffer.z * 2 + 1;
   Normal.xy = G_Buffer.xy*2-1;

   // Computes light attenuation and direction
   
   float3 LightDir = (Input.LightPos - PixelPos)*InvSqrLightRange;
   half Attenuation = saturate(1-dot(LightDir, LightDir));
   LightDir = normalize(LightDir);

   // Lighting equation

   half  DiffuseInfluence = dot(LightDir, Normal)*Attenuation;
   return DiffuseLightColor_0 * DiffuseInfluence; 
}

]]></RmShaderCode>
      <RmSampler NAME="G_Buffer" API="" REGISTER="0"/>
      <RmSampler NAME="Normal_Texture" API="" REGISTER="1"/>
      <RmShaderConstant NAME="InvSqrLightRange" API="" REGISTER="0"/>
      <RmShaderConstant NAME="DiffuseLightColor_0" API="" REGISTER="1"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float2 ViewportDimensions;
float TanFOV;

float3 LightPos_0;

float4x4 matWorldView;

struct VS_OUTPUT
{
   float4 pos          : POSITION0;
   float2 texCoord     : TEXCOORD0;
   float3 EyeScreenRay : TEXCOORD1;
   float3 LightPos     : TEXCOORD2;
};

VS_OUTPUT vs_main( float4 inPos: POSITION )
{
   VS_OUTPUT o = (VS_OUTPUT) 0;

   // Compute vertex positions of a screen aligned quad

   inPos.xy = sign( inPos.xy);
   o.pos = float4( inPos.xy, 0.0f, 1.0f);
   
   // RenderMonkey don't have a ViewAspect variable, but it can be computed
   // When on the engine, the ViewAspect is provided instead of the Dimensions

   float ViewAspect = ViewportDimensions.x/ViewportDimensions.y;
   
   o.EyeScreenRay = float3(inPos.x * ViewAspect, inPos.y, TanFOV);

   // get the screen coords into range [0,1]
   o.texCoord = float2(o.pos.x, -o.pos.y) * 0.5 + 0.5;
   
   float4 p = mul( matWorldView, float4(LightPos_0,1) );
   o.LightPos = p.xyz/p.w;
   
   return o;
}
]]></RmShaderCode>
      <RmShaderConstant NAME="LightPos_0" API="" REGISTER="6"/>
      <RmShaderConstant NAME="TanFOV" API="" REGISTER="5"/>
      <RmShaderConstant NAME="ViewportDimensions" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorldView" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping_1" API=""/>
     <RmTextureObject NAME="G_Buffer" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSW" API="D3D" STATE="3" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="Normal_Texture" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="NormalTexture" API=""/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="Light 1" API="D3D" PASS_INDEX="2" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="ScreenAlignedQuad" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_FILLMODE" API="D3D" STATE="8" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_SRCBLEND" API="D3D" STATE="19" VALUE="14" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_DESTBLEND" API="D3D" STATE="20" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHABLENDENABLE" API="D3D" STATE="27" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_BLENDOP" API="D3D" STATE="171" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float2 ViewportDimensions;
float TanFOV;

float3 LightPos_1;

float4x4 matWorldView;

struct VS_OUTPUT
{
   float4 pos          : POSITION0;
   float2 texCoord     : TEXCOORD0;
   float3 EyeScreenRay : TEXCOORD1;
   float3 LightPos     : TEXCOORD2;
};

VS_OUTPUT vs_main( float4 inPos: POSITION )
{
   VS_OUTPUT o = (VS_OUTPUT) 0;

   // Compute vertex positions of a screen aligned quad

   inPos.xy = sign( inPos.xy);
   o.pos = float4( inPos.xy, 0.0f, 1.0f);
   
   // RenderMonkey don't have a ViewAspect variable, but it can be computed
   // When on the engine, the ViewAspect is provided instead of the Dimensions

   float ViewAspect = ViewportDimensions.x/ViewportDimensions.y;
   
   o.EyeScreenRay = float3(inPos.x * ViewAspect, inPos.y, TanFOV);

   // get the screen coords into range [0,1]
   o.texCoord = float2(o.pos.x, -o.pos.y) * 0.5 + 0.5;
   
   float4 p = mul( matWorldView, float4(LightPos_1,1) );
   o.LightPos = p.xyz/p.w;
   
   return o;
}
]]></RmShaderCode>
      <RmShaderConstant NAME="LightPos_1" API="" REGISTER="6"/>
      <RmShaderConstant NAME="TanFOV" API="" REGISTER="5"/>
      <RmShaderConstant NAME="ViewportDimensions" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorldView" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
sampler2D G_Buffer;
sampler2D Normal_Texture;

struct PS_INPUT
{
    half2 texCoord      : TEXCOORD0;
    half3 EyeScreenRay  : TEXCOORD1;
    half3 LightPos      : TEXCOORD2;
};

half  InvSqrLightRange;
half4 DiffuseLightColor_1;

half UnpackFloat16( half2 depth )
{
   const half2 unpack = {1024.0f, 4.0f};

   return dot(unpack, depth);
}

half4 ps_main( PS_INPUT Input ) : COLOR
{
   half4 G_Buffer = tex2D( G_Buffer, Input.texCoord );

   // Compute pixel position 

   half  Depth = UnpackFloat16( G_Buffer.zw );
   float3 PixelPos = Input.EyeScreenRay.xyz * Depth;
   
   // Compute normal
   
   half3 Normal;
   G_Buffer.z = -tex2D( Normal_Texture, G_Buffer.xy );
   Normal.z = G_Buffer.z * 2 + 1;
   Normal.xy = G_Buffer.xy*2-1;

   // Computes light attenuation and direction
   
   float3 LightDir = (Input.LightPos - PixelPos)*InvSqrLightRange;
   half Attenuation = saturate(1-dot(LightDir, LightDir));
   LightDir = normalize(LightDir);
   
   // Lighting equation

   half  DiffuseInfluence = dot(LightDir, Normal)*Attenuation;
   
   return DiffuseLightColor_1 * DiffuseInfluence; 
}

]]></RmShaderCode>
      <RmSampler NAME="G_Buffer" API="" REGISTER="0"/>
      <RmSampler NAME="Normal_Texture" API="" REGISTER="1"/>
      <RmShaderConstant NAME="InvSqrLightRange" API="" REGISTER="0"/>
      <RmShaderConstant NAME="DiffuseLightColor_1" API="" REGISTER="1"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping_1" API=""/>
     <RmTextureObject NAME="Normal_Texture" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="NormalTexture" API=""/>
     </RmTextureObject>
     <RmTextureObject NAME="G_Buffer" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="G_Buffer" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSW" API="D3D" STATE="3" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="Output to G_Buffer" API="D3D" PASS_INDEX="0" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model" API=""/>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main"><RmShaderCode TYPE="TEXT"><![CDATA[
struct PS_INPUT
{
   half3 Normal        : TEXCOORD0;
   half3 WorldPos      : TEXCOORD1;
   half3 EyeScreenRay  : TEXCOORD2;
};

half2 PackFloat16( half depth )
{
    depth /= 4;
    half Integer = floor(depth);
    half fraction= frac(depth);
    
    return half2( Integer/256, fraction);    
}

half4 ps_main( PS_INPUT Input ) : COLOR0
{
   half4 G_Buffer;
   
   half Depth = length(Input.WorldPos)/length(Input.EyeScreenRay);
      
   G_Buffer.zw = PackFloat16(Depth);
   
   G_Buffer.xy = normalize( Input.Normal ).xy * 0.5 + 0.5;
   
   return G_Buffer;
}



]]></RmShaderCode></RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main"><RmShaderCode TYPE="TEXT"><![CDATA[
float4x4 matViewProjection;
float4x4 matWorldView;

struct VS_OUTPUT 
{
   float4  Pos           : POSITION;
   float3  Normal        : TEXCOORD0;
   float3  WorldPos      :TEXCOORD1;
   float3  EyeScreenRay  :TEXCOORD2;
};

float2 ViewportDimensions;  // Only use this in RenderMonkey, in the Engine use ViewAspect
float  TanFOV;

VS_OUTPUT vs_main( float4 inPos: POSITION, float3 inNormal: NORMAL )
{
   VS_OUTPUT Out;
   
   float4 P = mul( matViewProjection, inPos );

   Out.Pos = P;
   
   // RenderMonkey don't have a ViewAspect variable, but it can be computed
   // When on the engine, the ViewAspect is provided instead of the Dimensions
   float ViewAspect = ViewportDimensions.x / ViewportDimensions.y; 
   
   // Ray from Eye to Screen Pixel
   P.xy /= P.w;
   Out.EyeScreenRay = float3(P.x * ViewAspect, P.y, TanFOV);   
   
   Out.Normal = mul( matWorldView, inNormal );

   // Normalized World Position
   
   float4 pp = mul( matWorldView, inPos );
   Out.WorldPos = pp.xyz / pp.w;

   return Out;
}
]]></RmShaderCode>
      <RmShaderConstant NAME="TanFOV" API="" REGISTER="9"/>
      <RmShaderConstant NAME="ViewportDimensions" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
      <RmShaderConstant NAME="matWorldView" API="" REGISTER="4"/>
     </RmHLSLShader>
     <RmRenderTarget NAME="G_Buffer" API="" INDEX="0" RENDER_TO_SCREEN="FALSE" COLOR_CLEAR="TRUE" DEPTH_CLEAR="TRUE" CLEAR_COLOR_VALUE="0" DEPTH_CLEAR_VALUE="1.000000"/>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
   </RmDirectXEffect>
  </RmEffectGroup>
  <RmFloatVariable NAME="InvSqrLightRange" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE="0.010000" MIN="0.000000" MAX="0.000000" CLAMP="FALSE"/>
  <RmDynamicVariable NAME="LightPos_0" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-1.000000" MAX="1.000000" CLAMP="FALSE" NORMALIZE="FALSE">
   <RmDynamicVariableValueContainer>
    <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="0.000000"/>
    <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="-20.000000"/>
    <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="20.000000"/>
   </RmDynamicVariableValueContainer>
  </RmDynamicVariable>
  <RmDynamicVariable NAME="LightPos_1" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-1.000000" MAX="1.000000" CLAMP="FALSE" NORMALIZE="FALSE">
   <RmDynamicVariableValueContainer>
    <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="11.000000"/>
    <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="-12.700000"/>
    <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="32.599998"/>
   </RmDynamicVariableValueContainer>
  </RmDynamicVariable>
  <RmMatrixVariable NAME="matViewProjection" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="WorldViewProjection" VALUE_0="-1.594917" VALUE_1="-0.111224" VALUE_2="-0.009112" VALUE_3="0.182096" VALUE_4="-0.021564" VALUE_5="0.168005" VALUE_6="1.723749" VALUE_7="-53.211124" VALUE_8="-0.068749" VALUE_9="0.993844" VALUE_10="-0.097725" VALUE_11="39.561611" VALUE_12="-0.068681" VALUE_13="0.992850" VALUE_14="-0.097627" VALUE_15="40.522049"/>
  <RmMatrixVariable NAME="matWorldView" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="WorldView" VALUE_0="-0.997561" VALUE_1="-0.069567" VALUE_2="-0.005699" VALUE_3="0.113894" VALUE_4="-0.012450" VALUE_5="0.096998" VALUE_6="0.995207" VALUE_7="-30.721458" VALUE_8="-0.068681" VALUE_9="0.992850" VALUE_10="-0.097627" VALUE_11="40.522049" VALUE_12="0.000000" VALUE_13="0.000000" VALUE_14="0.000000" VALUE_15="1.000000"/>
  <RmFloatVariable NAME="TanFOV" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VALUE="1.732051" MIN="-1.000000" MAX="1.000000" CLAMP="FALSE"/>
  <RmDynamicVariable NAME="ViewportDimensions" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="ViewportDimensions" VARIABLE_TYPE="FLOAT" ROWS="2" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-1.000000" MAX="1.000000" CLAMP="FALSE" NORMALIZE="FALSE">
   <RmDynamicVariableValueContainer>
    <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="338.000000"/>
    <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="312.000000"/>
   </RmDynamicVariableValueContainer>
  </RmDynamicVariable>
  <RmColorVariable NAME="DiffuseLightColor_1" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="0.000000" VALUE_1="0.050397" VALUE_2="1.000000" VALUE_3="1.000000"/>
  <RmColorVariable NAME="DiffuseLightColor_0" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="1.000000" VALUE_1="0.011505" VALUE_2="0.000000" VALUE_3="1.000000"/>
  <RmStreamMap NAME="Stream Mapping_1" API="">
   <RmStream NAME="Stream 0" API="" STRIDE="12">
    <RmStreamChannel NAME="Position_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="0" USAGE_INDEX="0"/>
   </RmStream>
  </RmStreamMap>
  <RmStreamMap NAME="Stream Mapping" API="">
   <RmStream NAME="Stream" API="" STRIDE="32">
    <RmStreamChannel NAME="Position_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="0" USAGE_INDEX="0"/>
    <RmStreamChannel NAME="Normal_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="3" USAGE_INDEX="0"/>
    <RmStreamChannel NAME="TexCoord_0" API="" DATA_SIZE="8" DATA_TYPE="1" REGISTER="0" USAGE="5" USAGE_INDEX="0"/>
   </RmStream>
  </RmStreamMap>
  <RmModelData NAME="Model" API="" FILE_NAME=".\Hebe2.3DS" ORIENTATION="0"/>
  <RmModelData NAME="ScreenAlignedQuad" API="" FILE_NAME="..\..\..\..\..\..\Program Files\RenderMonkey 1.6\Examples\Media\Models\ScreenAlignedQuad.3ds" ORIENTATION="0"/>
 </RmEffectWorkspace>
</RENDER_MONKEY>
