	TITLE	C:\WINDOWS\Desktop\Gems2 CD\SourceCode\04 Geometry Management\03 Ratcliff\circle.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_00A@?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0FG@ILEN@?3Sun?3Sunday?3Mon?3Monday?3Tue?3Tuesd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0IH@JLLA@?3Jan?3January?3Feb?3February?3Mar?3Ma@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04NCCD@true?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_02ELCB@no?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03LGKI@yes?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01FKHJ@C?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@KLJH@invalid?5vector?$DMbool?$DO?5subscript?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MMAA@missing?5locale?5facet?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Lockit@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Lockit@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1bad_exception@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@bad_exception@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_exception@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0bad_exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@bad_alloc@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcmp
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemmove
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _wmemset
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@G@std@@SAPAGPAGPBGI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?to_char_type@?$char_traits@G@std@@SAGABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?to_int_type@?$char_traits@G@std@@SAGABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?eq_int_type@?$char_traits@G@std@@SA_NABG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?eof@?$char_traits@G@std@@SAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@logic_error@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1domain_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@domain_error@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gdomain_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0domain_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1invalid_argument@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@invalid_argument@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Ginvalid_argument@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0invalid_argument@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@length_error@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@out_of_range@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@runtime_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@runtime_error@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1overflow_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@overflow_error@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Goverflow_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0overflow_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1underflow_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@underflow_error@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gunderflow_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0underflow_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1range_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@range_error@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Grange_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0range_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0bad_cast@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@bad_cast@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0bad_typeid@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1bad_typeid@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@bad_typeid@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gbad_typeid@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0bad_typeid@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G__non_rtti_object@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1__non_rtti_object@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Timevec@std@@QAE@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Timevec@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_Timevec@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Incref@facet@locale@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Decref@facet@locale@std@@QAEPAV123@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1facet@locale@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0locale@std@@QAE@W4_Uninitialized@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfacet@locale@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Narrow@std@@YAHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Widen@std@@YAGDPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0codecvt_base@std@@QAE@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_always_noconv@codecvt_base@std@@MBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_max_length@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_encoding@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gcodecvt_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1codecvt_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$codecvt@GDH@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$codecvt@GDH@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_in@?$codecvt@GDH@std@@MBEHAAHPBD1AAPBDPAG3AAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_out@?$codecvt@GDH@std@@MBEHAAHPBG1AAPBGPAD3AAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_length@?$codecvt@GDH@std@@MBEHAAHPBG1I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_always_noconv@?$codecvt@GDH@std@@MBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_max_length@?$codecvt@GDH@std@@MBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_encoding@?$codecvt@GDH@std@@MBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$codecvt@GDH@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?is@?$ctype@D@std@@QBE_NFD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ctype@D@std@@QAE@PBF_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ctype@D@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Term@?$ctype@D@std@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@D@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Doraise@failure@ios_base@std@@MBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setstate@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fail@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?exceptions@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setf@ios_base@std@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setf@ios_base@std@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?unsetf@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0reference@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4reference@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Breference@?$vector@_NV?$allocator@I@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPBI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?BVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Zconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Mconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$vector@_NV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@_NV?$allocator@I@std@@@std@@QAE@IPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVreference@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Ziterator@?$vector@_NV?$allocator@I@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@_NV?$allocator@I@std@@@std@@QBEHV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9iterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Miterator@?$vector@_NV?$allocator@I@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@I@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@_NV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@I_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@_NV?$allocator@I@std@@@std@@QAEXViterator@12@Vconst_iterator@12@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@_NV?$allocator@I@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@_NV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nw@?$vector@_NV?$allocator@I@std@@@std@@KAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Trim@?$vector@_NV?$allocator@I@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$vector@_NV?$allocator@I@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRadius@Sphere@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCenter@Sphere@@QBEABV?$Vector3d@M@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRadius@Sphere@@QAEXM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Sphere@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RayTraceCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RangeTestCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HasSpherePackFlag@SpherePack@@QBE_NW4SpherePackFlag@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetParent@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlink@SpherePack@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNextSibling@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPrevSibling@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetUserData@SpherePack@@QBEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DistanceSquared@SpherePack@@QBEMPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPos@SpherePack@@QBEABV?$Vector3d@M@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ComputeBindingDistance@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NewPos@SpherePack@@QAEXABV?$Vector3d@M@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetCircleItem@Circle@@QAEXPAVCircleItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCircleItem@Circle@@QAEPAVCircleItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSpherePack@Circle@@QAEPAVSpherePack@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetViewState@Circle@@QBE?AW4ViewState@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetViewState@Circle@@QAEXW4ViewState@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CircleItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetCircle@CircleItem@@QAEXPAVCircle@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCircle@CircleItem@@QAEPAVCircle@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@CircleItem@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPrevious@CircleItem@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNext@CircleItem@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPrevious@CircleItem@@QAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0SpherePackCallback@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCircle@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GSpherePackFactory@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_ostream@GU?$char_traits@G@std@@@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?put@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAEAAV12@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?flush@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_ios@GU?$char_traits@G@std@@@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setstate@?$basic_ios@GU?$char_traits@G@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rdbuf@?$basic_ios@GU?$char_traits@G@std@@@std@@QBEPAV?$basic_streambuf@GU?$char_traits@G@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JW4seekdir@ios_base@2@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_istream@GU?$char_traits@G@std@@@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_istream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_streambuf@GU?$char_traits@G@std@@@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sgetc@?$basic_streambuf@GU?$char_traits@G@std@@@std@@QAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?snextc@?$basic_streambuf@GU?$char_traits@G@std@@@std@@QAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?overflow@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pbackfail@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?showmanyc@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?underflow@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?uflow@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?xsgetn@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEHPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?xsputn@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seekoff@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAE?AV?$fpos@H@2@JW4seekdir@ios_base@2@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seekpos@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?setbuf@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEPAV12@PAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sync@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?imbue@?$basic_streambuf@GU?$char_traits@G@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?is@?$ctype@G@std@@QBE_NFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$ctype@G@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_is@?$ctype@G@std@@MBE_NFG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_is@?$ctype@G@std@@MBEPBGPBG0PAF@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_scan_is@?$ctype@G@std@@MBEPBGFPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_scan_not@?$ctype@G@std@@MBEPBGFPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@G@std@@MBEGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_tolower@?$ctype@G@std@@MBEPBGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@G@std@@MBEGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_toupper@?$ctype@G@std@@MBEPBGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@G@std@@MBEGD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_widen@?$ctype@G@std@@MBEPBDPBD0PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@G@std@@MBEDGD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?do_narrow@?$ctype@G@std@@MBEPBGPBG0DPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@IABIABV?$allocator@I@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QAEPAIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@IV?$allocator@I@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_allocator@?$vector@IV?$allocator@I@std@@@std@@QBE?AV?$allocator@I@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@IV?$allocator@I@std@@@std@@QAEAAII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@IV?$allocator@I@std@@@std@@QAEPAIPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eq@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lt@?$vector@IV?$allocator@I@std@@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@?$vector@IV?$allocator@I@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Viterator@?$vector@_NV?$allocator@I@std@@@std@@_NVreference@23@PAV423@H@std@@QAE@Viterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$reverse_iterator@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@std@@_N$$CBVreference@23@PBV423@H@std@@QAE@Vconst_iterator@?$vector@_NV?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Vector3d@M@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Vector3d@M@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Vector3d@M@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$Vector3d@M@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$Vector3d@M@@QAEXMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Distance2@?$Vector3d@M@@QBEMABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Pool@VCircleItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$Pool@VCircleItem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$Pool@VCircleItem@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Begin@?$Pool@VCircleItem@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNext@?$Pool@VCircleItem@@@@QAEPAVCircleItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$Pool@VCircleItem@@@@QAEXPAVCircleItem@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFreeLink@?$Pool@VCircleItem@@@@QAEPAVCircleItem@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$basic_ostream@GU?$char_traits@G@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$basic_ios@GU?$char_traits@G@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$basic_istream@GU?$char_traits@G@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$basic_streambuf@GU?$char_traits@G@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$ctype@G@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_D?$basic_ostream@GU?$char_traits@G@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_D?$basic_istream@GU?$char_traits@G@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nullstr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEX_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$fpos@H@std@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$basic_ios@GU?$char_traits@G@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1sentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bsentry@?$basic_ostream@GU?$char_traits@G@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ipfx@?$basic_istream@GU?$char_traits@G@std@@@std@@QAE_N_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pubsync@?$basic_streambuf@GU?$char_traits@G@std@@@std@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sbumpc@?$basic_streambuf@GU?$char_traits@G@std@@@std@@QAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?sputc@?$basic_streambuf@GU?$char_traits@G@std@@@std@@QAEGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?gptr@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pptr@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?egptr@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?gbump@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?epptr@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Gninc@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pbump@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?widen@?$ctype@G@std@@QBEGD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?narrow@?$ctype@G@std@@QBEDGD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@I@std@@QAEPAIIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@I@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@I@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$vector@IV?$allocator@I@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QBEPBIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@IV?$allocator@I@std@@@std@@QAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IAEXPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ucopy@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEXPAIIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Refcnt@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAEPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?opfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?opfx@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?osfx@?$basic_ostream@GU?$char_traits@G@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?tie@?$basic_ios@GU?$char_traits@G@std@@@std@@QBEPAV?$basic_ostream@GU?$char_traits@G@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Pninc@?$basic_streambuf@GU?$char_traits@G@std@@@std@@IAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@I@std@@QAEXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@I@std@@QAEXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Split@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADIPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@D@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?use_facet@std@@YAABV?$ctype@G@1@ABVlocale@1@PBV21@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXViterator@?$vector@_NV?$allocator@I@std@@@1@0AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@Vconst_iterator@31@0V231@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YA?AViterator@?$vector@_NV?$allocator@I@std@@@1@V231@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?equal@std@@YA_NPBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lexicographical_compare@std@@YA_NPBI000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@I@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?swap@std@@YAXAAPAI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPAIHPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@std@@YAPAIPBI0PAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fill@std@@YAXPAI0ABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy_backward@std@@YAPAIPAI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Construct@std@@YAXPAIABI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@std@@YAXPAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Allocate@std@@YAPADHPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$ctype@G@std@@QAE@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@D@std@@@std@@SAPAV?$ctype@D@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Save@?$_Tidyfac@V?$ctype@G@std@@@std@@SAPAV?$ctype@G@2@PAV32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$ctype@G@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@D@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tidyfac@V?$ctype@G@std@@@std@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?id@?$ctype@G@std@@$D
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Iter_cat@std@@YA?AUrandom_access_iterator_tag@1@ABU?$iterator@Urandom_access_iterator_tag@std@@_NH@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Distance@std@@YAXVconst_iterator@?$vector@_NV?$allocator@I@std@@@1@0AAIUrandom_access_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?mismatch@std@@YA?AU?$pair@PBIPBI@1@PBI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?id@?$ctype@G@std@@$E
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@PBIPBI@std@@QAE@ABQBI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVoverflow_error@std@@@8??0overflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVrange_error@std@@@8??0range_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@G@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_typeid@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CircleFactory@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA3?AVunderflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVrange_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVoverflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$codecvt@GDH@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7__non_rtti_object@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$basic_ios@GU?$char_traits@G@std@@@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$basic_istream@GU?$char_traits@G@std@@@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_8?$basic_istream@GU?$char_traits@G@std@@@std@@7B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7range_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7underflow_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@GU?$char_traits@G@std@@@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7domain_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@GU?$char_traits@G@std@@@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7overflow_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_typeid@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$ctype@G@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7invalid_argument@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@D@std@@@std@@0PAV?$ctype@D@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Facsav@?$_Tidyfac@V?$ctype@G@std@@@std@@0PAV?$ctype@G@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_8?$basic_ostream@GU?$char_traits@G@std@@@std@@7B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_exception@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7codecvt_base@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVfailure@ios_base@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_typeid@std@@@8??0bad_typeid@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVdomain_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVinvalid_argument@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_Psave@?1??use_facet@std@@YAABV?$ctype@D@2@ABVlocale@2@PBV32@_N@Z@4PBVfacet@42@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVunderflow_error@std@@@8??0underflow_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVdomain_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVunderflow_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7SpherePackCallback@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVinvalid_argument@std@@@8??0invalid_argument@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_exception@std@@@8??0bad_exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI3?AVoverflow_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVdomain_error@std@@@8??0domain_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_typeid@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVrange_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI2?AVbad_exception@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?_C@?1??_Nullstr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPBDXZ@4DB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z28
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_exception@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
_BSS	SEGMENT
_?gCount@?4??Process@CircleFactory@@QAEHXZ@4HA DD 01H DUP (?)
_?fcount@?1??Render@CircleFactory@@QAEHXZ@4HA DD 01H DUP (?)
_?dx@?BN@??Render@CircleFactory@@QAEHXZ@4HA DD 01H DUP (?)
_?dy@?BN@??Render@CircleFactory@@QAEHXZ@4HA DD 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_$S18	DD	FLAT:_$E17
_$S24	DD	FLAT:_$E23
CRT$XCU	ENDS
_DATA	SEGMENT
_gCenterX DD	02000H
_gCenterY DD	01800H
_?x1@?6??Render@CircleFactory@@QAEHXZ@4HA DD 012cH
_?y1@?6??Render@CircleFactory@@QAEHXZ@4HA DD 0faH
_?x2@?6??Render@CircleFactory@@QAEHXZ@4HA DD 01f4H
_?y2@?6??Render@CircleFactory@@QAEHXZ@4HA DD 0190H
_?x1@?BH@??Render@CircleFactory@@QAEHXZ@4HA DD 012cH
_?y1@?BH@??Render@CircleFactory@@QAEHXZ@4HA DD 0faH
_?x2@?BH@??Render@CircleFactory@@QAEHXZ@4HA DD 01f4H
_?y2@?BH@??Render@CircleFactory@@QAEHXZ@4HA DD 0190H
_?radius@?BN@??Render@CircleFactory@@QAEHXZ@4HA DD 080H
_DATA	ENDS
CRT$XCU	SEGMENT
_$S32	DD	FLAT:_$E31
CRT$XCU	ENDS
_DATA	SEGMENT
$SG13071 DB	'Show Spheres Intersecting A Frustum', 00H
$SG13098 DB	'%d Spheres Intersected Frustum.', 00H
$SG13101 DB	'Show Spheres Intersecting A Line Segment', 00H
	ORG $+3
$SG13120 DB	'Show Spheres Within A Certain Range', 00H
$SG13121 DB	'(A) Show All', 00H
	ORG $+3
$SG13122 DB	'(F) Frustum Culling', 00H
$SG13123 DB	'(T) Ray Tracing', 00H
$SG13124 DB	'(R) Range Testing', 00H
	ORG $+2
$SG13125 DB	'(SPACE) Pause', 00H
	ORG $+2
$SG13126 DB	'(ENTER) UnPause', 00H
$SG13136 DB	'%d Spheres Intersected Ray.', 00H
$SG13156 DB	'%d Spheres Inside Range.', 00H
_DATA	ENDS
PUBLIC	??0Attractor@@QAE@XZ				; Attractor::Attractor
EXTRN	_rand:NEAR
_TEXT	SEGMENT
??0Attractor@@QAE@XZ PROC NEAR				; Attractor::Attractor

; 30   : {

	push	esi
	mov	esi, ecx

; 31   :   mX = rand()%SWID;

	call	_rand
	and	eax, -2147467265			; 80003fffH
	jns	SHORT $L14808
	dec	eax
	or	eax, -16384				; ffffc000H
	inc	eax
$L14808:
	mov	DWORD PTR [esi+4], eax

; 32   :   mY = rand()%SHIT;

	call	_rand
	cdq
	mov	ecx, 12288				; 00003000H
	idiv	ecx
	mov	DWORD PTR [esi+8], edx

; 33   : 
; 34   :   mDx = (rand()&7)-4;

	call	_rand
	and	eax, 7
	sub	eax, 4
	mov	DWORD PTR [esi+12], eax

; 35   :   mDy = (rand()&7)-4;

	call	_rand
	and	eax, 7
	sub	eax, 4
	mov	DWORD PTR [esi+16], eax

; 36   : 
; 37   : 
; 38   :   mAcount = (rand()%127)+16;

	call	_rand
	cdq
	mov	ecx, 127				; 0000007fH
	idiv	ecx

; 39   : }

	mov	eax, esi
	add	edx, 16					; 00000010H
	mov	DWORD PTR [esi], edx
	pop	esi
	ret	0
??0Attractor@@QAE@XZ ENDP				; Attractor::Attractor
_TEXT	ENDS
PUBLIC	?ResetTest@Attractor@@QAEXXZ			; Attractor::ResetTest
_TEXT	SEGMENT
?ResetTest@Attractor@@QAEXXZ PROC NEAR			; Attractor::ResetTest

; 42   : {

	push	esi
	mov	esi, ecx

; 43   :   mAcount--;

	mov	eax, DWORD PTR [esi]
	dec	eax
	mov	DWORD PTR [esi], eax

; 44   : 
; 45   :   if ( mAcount < 0 )

	jns	SHORT $L12919

; 46   :   {
; 47   :     mX = rand()%SWID;

	call	_rand
	and	eax, -2147467265			; 80003fffH
	jns	SHORT $L14810
	dec	eax
	or	eax, -16384				; ffffc000H
	inc	eax
$L14810:
	mov	DWORD PTR [esi+4], eax

; 48   :     mY = rand()%SHIT;

	call	_rand
	cdq
	mov	ecx, 12288				; 00003000H
	idiv	ecx
	mov	DWORD PTR [esi+8], edx

; 49   :     mDx = (rand()&7)-4;

	call	_rand
	and	eax, 7
	sub	eax, 4
	mov	DWORD PTR [esi+12], eax

; 50   :     mDy = (rand()&7)-4;

	call	_rand
	and	eax, 7
	sub	eax, 4
	mov	DWORD PTR [esi+16], eax

; 51   :     mAcount = (rand()%127)+16;

	call	_rand
	cdq
	mov	ecx, 127				; 0000007fH
	idiv	ecx
	add	edx, 16					; 00000010H
	mov	DWORD PTR [esi], edx
$L12919:

; 52   :   }
; 53   : 
; 54   :   mX+=mDx;

	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [esi+4]
	add	ecx, eax
	push	edi

; 55   :   mY+=mDy;

	mov	edi, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, ecx
	mov	ecx, DWORD PTR [esi+16]
	add	edi, ecx

; 56   : 
; 57   : 	if ( mX > SWID)

	cmp	edx, 16384				; 00004000H
	mov	DWORD PTR [esi+8], edi
	jle	SHORT $L12920

; 58   : 	{
; 59   : 		mDx*= -1;

	neg	eax
	mov	DWORD PTR [esi+12], eax
$L12920:

; 60   : 	}
; 61   : 
; 62   : 	if ( mX < 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jge	SHORT $L12921

; 63   : 	{
; 64   : 		mDx *= -1;

	mov	edx, DWORD PTR [esi+12]
	neg	edx
	mov	DWORD PTR [esi+12], edx
$L12921:

; 65   : 	}
; 66   : 
; 67   : 	if ( mY > SHIT)

	cmp	edi, 12288				; 00003000H
	pop	edi
	jle	SHORT $L12922

; 68   : 	{
; 69   : 		mDy *= -1;

	neg	ecx
	mov	DWORD PTR [esi+16], ecx
$L12922:

; 70   : 	}
; 71   : 
; 72   : 	if (mY < 0)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jge	SHORT $L12923

; 73   : 	{
; 74   : 		mDy *= -1;

	mov	eax, DWORD PTR [esi+16]
	neg	eax
	mov	DWORD PTR [esi+16], eax
$L12923:
	pop	esi

; 75   : 	}
; 76   : 
; 77   : 
; 78   : }

	ret	0
?ResetTest@Attractor@@QAEXXZ ENDP			; Attractor::ResetTest
_TEXT	ENDS
PUBLIC	?Cap@@YAHH@Z					; Cap
_TEXT	SEGMENT
_v$ = 8
?Cap@@YAHH@Z PROC NEAR					; Cap

; 81   : {

	push	ebp
	mov	ebp, esp

; 82   :   if ( v > 0 )

	mov	eax, DWORD PTR _v$[ebp]
	test	eax, eax
	jle	SHORT $L12927

; 83   :   {
; 84   :     if ( v > 32 ) v = 32;

	cmp	eax, 32					; 00000020H
	jle	SHORT $L12930
	mov	eax, 32					; 00000020H

; 89   :   }
; 90   :   return v;
; 91   : }

	pop	ebp
	ret	0
$L12927:

; 85   :   }
; 86   :   else
; 87   :   {
; 88   :     if ( v < -32 ) v = -32;

	cmp	eax, -32				; ffffffe0H
	jge	SHORT $L12930
	mov	eax, -32				; ffffffe0H
$L12930:

; 89   :   }
; 90   :   return v;
; 91   : }

	pop	ebp
	ret	0
?Cap@@YAHH@Z ENDP					; Cap
_TEXT	ENDS
PUBLIC	?AdjustXY@Attractor@@QAEXHHAAH0@Z		; Attractor::AdjustXY
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_dx$ = 16
_dy$ = 20
?AdjustXY@Attractor@@QAEXHHAAH0@Z PROC NEAR		; Attractor::AdjustXY

; 94   : {

	push	ebp
	mov	ebp, esp

; 95   :   if ( mX < x ) dx--;

	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR _dx$[ebp]
	cmp	edx, eax
	jge	SHORT $L12938
	dec	DWORD PTR [esi]
$L12938:

; 96   :   if ( mX > x ) dx++;

	cmp	DWORD PTR [ecx+4], eax
	jle	SHORT $L12939
	inc	DWORD PTR [esi]
$L12939:

; 97   :   if ( mY < y ) dy--;

	mov	edx, DWORD PTR [ecx+8]
	push	edi
	mov	edi, DWORD PTR _y$[ebp]
	cmp	edx, edi
	mov	edx, DWORD PTR _dy$[ebp]
	jge	SHORT $L12940
	dec	DWORD PTR [edx]
$L12940:

; 98   :   if ( mY > x ) dy++;

	mov	edi, DWORD PTR [ecx+8]
	cmp	edi, eax
	pop	edi
	jle	SHORT $L12941
	inc	DWORD PTR [edx]
$L12941:

; 99   : 
; 100  :   dx = Cap(dx);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jle	SHORT $L14818
	cmp	eax, 32					; 00000020H
	jle	SHORT $L14821
	mov	eax, 32					; 00000020H
	jmp	SHORT $L14821
$L14818:
	cmp	eax, -32				; ffffffe0H
	jge	SHORT $L14821
	mov	eax, -32				; ffffffe0H
$L14821:
	mov	DWORD PTR [esi], eax

; 101  :   dy = Cap(dy);

	mov	eax, DWORD PTR [edx]
	test	eax, eax
	pop	esi
	jle	SHORT $L14826
	cmp	eax, 32					; 00000020H
	jle	SHORT $L14831
	mov	eax, 32					; 00000020H
	mov	DWORD PTR [edx], eax

; 102  : }

	pop	ebp
	ret	16					; 00000010H

; 101  :   dy = Cap(dy);

$L14826:
	cmp	eax, -32				; ffffffe0H
	jge	SHORT $L14831
	mov	eax, -32				; ffffffe0H
$L14831:
	mov	DWORD PTR [edx], eax

; 102  : }

	pop	ebp
	ret	16					; 00000010H
?AdjustXY@Attractor@@QAEXHHAAH0@Z ENDP			; Attractor::AdjustXY
_TEXT	ENDS
PUBLIC	??0Circle@@QAE@HHHPAVSpherePackFactory@@PAVAttractor@@@Z ; Circle::Circle
PUBLIC	__real@4@3ffb8000000000000000
EXTRN	?AddSphere@SpherePackFactory@@QAEPAVSpherePack@@ABV?$Vector3d@M@@MPAXH@Z:NEAR ; SpherePackFactory::AddSphere
EXTRN	__fltused:NEAR
;	COMDAT __real@4@3ffb8000000000000000
; File C:\WINDOWS\Desktop\Gems2 CD\SourceCode\04 Geometry Management\03 Ratcliff\vector.h
CONST	SEGMENT
__real@4@3ffb8000000000000000 DD 03d800000r	; 0.0625
CONST	ENDS
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_radius$ = 16
_factory$ = 20
_attractor$ = 24
_pos$ = -12
??0Circle@@QAE@HHHPAVSpherePackFactory@@PAVAttractor@@@Z PROC NEAR ; Circle::Circle

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 108  :   mItem = 0;
; 109  : 	mLocX			= x;

	mov	eax, DWORD PTR _x$[ebp]

; 110  : 	mLocY			= y;
; 111  : 	mRadius		= radius;

	mov	edx, DWORD PTR _radius$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [esi+4], eax

; 112  :   mAttractor = attractor;

	mov	eax, DWORD PTR _attractor$[ebp]
	mov	DWORD PTR [esi+32], 0
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+12], edx
	mov	DWORD PTR [esi+28], eax

; 113  : 
; 114  :   mJumpCounter = (rand()%JUMP_TIME)+JUMP_TIME/4;

	call	_rand
	and	eax, -2147483521			; 8000007fH
	jns	SHORT $L14841
	dec	eax
	or	eax, -128				; ffffff80H
	inc	eax
$L14841:
	add	eax, 32					; 00000020H
	mov	DWORD PTR [esi], eax

; 115  : 
; 116  :   if ( mAttractor )

	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $L12950

; 117  :   {
; 118  :     mDeltaX = (rand()&7)-3;

	call	_rand
	and	eax, 7
	sub	eax, 3
	mov	DWORD PTR [esi+16], eax

; 119  :     mDeltaY = (rand()&7)-3;

	call	_rand
	and	eax, 7
	sub	eax, 3
	mov	DWORD PTR [esi+20], eax

; 120  :   }
; 121  :   else

	jmp	SHORT $L12951
$L12950:

; 122  :   {
; 123  :     mDeltaX = 0;

	mov	DWORD PTR [esi+16], 0

; 124  :     mDeltaY = 0;

	mov	DWORD PTR [esi+20], 0
$L12951:

; 125  :   }
; 126  : 
; 127  : 
; 128  :   Vector3d<float> pos(x,y,0);
; 129  : 
; 130  :   pos.x = float(mLocX)*(1.0f/FIXED);

	fild	DWORD PTR [esi+4]

; 131  :   pos.y = float(mLocY)*(1.0f/FIXED);
; 132  :   pos.z = 0;
; 133  : 
; 134  : 
; 135  :   mSphere   = factory->AddSphere(pos,mRadius,this);

	push	4
	push	esi
	push	ecx
	lea	ecx, DWORD PTR _pos$[ebp]
	fmul	DWORD PTR __real@4@3ffb8000000000000000
	mov	DWORD PTR _pos$[ebp+8], 0
	fstp	DWORD PTR _pos$[ebp]
	fild	DWORD PTR [esi+8]
	fmul	DWORD PTR __real@4@3ffb8000000000000000
	fstp	DWORD PTR _pos$[ebp+4]
	fild	DWORD PTR [esi+12]
	fstp	DWORD PTR [esp]
	push	ecx
	mov	ecx, DWORD PTR _factory$[ebp]
	call	?AddSphere@SpherePackFactory@@QAEPAVSpherePack@@ABV?$Vector3d@M@@MPAXH@Z ; SpherePackFactory::AddSphere
	mov	DWORD PTR [esi+24], eax

; 136  : }

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0Circle@@QAE@HHHPAVSpherePackFactory@@PAVAttractor@@@Z ENDP ; Circle::Circle
_TEXT	ENDS
PUBLIC	??1Circle@@QAE@XZ				; Circle::~Circle
_TEXT	SEGMENT
??1Circle@@QAE@XZ PROC NEAR				; Circle::~Circle

; 142  : }

	ret	0
??1Circle@@QAE@XZ ENDP					; Circle::~Circle
_TEXT	ENDS
PUBLIC	?Process@Circle@@QAEHPAVSpherePackFactory@@@Z	; Circle::Process
PUBLIC	?Distance2@?$Vector3d@M@@QBEMABV1@@Z		; Vector3d<float>::Distance2
EXTRN	?LostChild@SpherePack@@QAEXPAV1@@Z:NEAR		; SpherePack::LostChild
EXTRN	?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z:NEAR ; SpherePackFactory::AddIntegrate
EXTRN	?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z:NEAR ; SpherePackFactory::AddRecompute
_TEXT	SEGMENT
_pos$12966 = -20
_pos$12968 = -20
?Process@Circle@@QAEHPAVSpherePackFactory@@@Z PROC NEAR	; Circle::Process

; 147  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	mov	esi, ecx

; 148  :   if ( mAttractor )

	xor	ebx, ebx
	push	edi
	mov	eax, DWORD PTR [esi+28]
	cmp	eax, ebx
	je	$L14915

; 149  :   {
; 150  : 
; 151  :     mAttractor->AdjustXY(mLocX,mLocY,mDeltaX,mDeltaY);

	mov	ecx, DWORD PTR [esi+4]
	mov	edi, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [esi+8]
	cmp	edi, ecx
	jge	SHORT $L15012
	mov	edi, DWORD PTR [esi+16]
	dec	edi
	mov	DWORD PTR [esi+16], edi
	mov	edi, DWORD PTR [eax+4]
	cmp	edi, ecx
$L15012:
	jle	SHORT $L14877
	inc	DWORD PTR [esi+16]
$L14877:
	cmp	DWORD PTR [eax+8], edx
	jge	SHORT $L14878
	dec	DWORD PTR [esi+20]
$L14878:
	cmp	DWORD PTR [eax+8], ecx
	jle	SHORT $L14879
	inc	DWORD PTR [esi+20]
$L14879:
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, ebx
	jle	SHORT $L14865
	cmp	eax, 32					; 00000020H
	jle	SHORT $L14868
	mov	eax, 32					; 00000020H
	jmp	SHORT $L14868
$L14865:
	cmp	eax, -32				; ffffffe0H
	jge	SHORT $L14868
	mov	eax, -32				; ffffffe0H
$L14868:
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ebx
	jle	SHORT $L14871
	cmp	eax, 32					; 00000020H
	jle	SHORT $L14874
	mov	eax, 32					; 00000020H
	jmp	SHORT $L14874
$L14871:
	cmp	eax, -32				; ffffffe0H
	jge	SHORT $L14874
	mov	eax, -32				; ffffffe0H
$L14874:
	mov	DWORD PTR [esi+20], eax

; 152  : 
; 153  :  	  if ((mLocX + mDeltaX) > SWID)

	mov	eax, DWORD PTR [esi+16]
	mov	edi, DWORD PTR [esi+4]
	mov	ecx, eax
	add	ecx, edi
	cmp	ecx, 16384				; 00004000H
	jle	SHORT $L12962

; 154  :     {
; 155  :   		mDeltaX *= -1;

	neg	eax
	mov	DWORD PTR [esi+16], eax
$L12962:

; 156  :     }
; 157  : 	  if ((mLocX + mDeltaX) < 0)

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, eax
	add	edx, ecx
	jns	SHORT $L12963

; 158  :     {
; 159  :   		mDeltaX *= -1;

	neg	eax
	mov	DWORD PTR [esi+16], eax
$L12963:

; 160  :     }
; 161  : 	  if ((mLocY + mDeltaY) > SHIT)

	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, eax
	cmp	ecx, 12288				; 00003000H
	jle	SHORT $L12964

; 162  :     {
; 163  :   		mDeltaY *= -1;

	neg	eax
	mov	DWORD PTR [esi+20], eax
$L12964:

; 164  :     }
; 165  : 	  if ((mLocY + mDeltaY) < 0)

	mov	eax, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+8]
	add	edx, eax
	jns	SHORT $L12965

; 166  :     {
; 167  :   		mDeltaY *= -1;

	neg	eax
	mov	DWORD PTR [esi+20], eax
$L12965:

; 168  :     }
; 169  : 
; 170  : 
; 171  :     mLocX+=mDeltaX;

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+4]

; 172  :     mLocY+=mDeltaY;

	mov	edx, DWORD PTR [esi+20]
	mov	edi, DWORD PTR [esi+8]
	add	ecx, eax
	add	edi, edx
	mov	DWORD PTR -4+[ebp], ecx
	mov	eax, edi

; 173  : 
; 174  : 
; 175  :     Vector3d<float> pos;
; 176  : 
; 177  :     pos.x = float(mLocX)*(1.0f/FIXED);

	fild	DWORD PTR -4+[ebp]
	mov	DWORD PTR -8+[ebp], eax
	mov	DWORD PTR [esi+8], edi

; 178  :     pos.y = float(mLocY)*(1.0f/FIXED);
; 179  :     pos.z = 0;
; 180  : 
; 181  :     mSphere->NewPos(pos);

	mov	edi, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+4], ecx
	fmul	DWORD PTR __real@4@3ffb8000000000000000
	fild	DWORD PTR -8+[ebp]
	mov	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [edi+8], ebx
	cmp	eax, ebx
	fmul	DWORD PTR __real@4@3ffb8000000000000000
	fstp	DWORD PTR _pos$12966[ebp+4]
	mov	ecx, DWORD PTR _pos$12966[ebp+4]
	fstp	DWORD PTR [edi]
	mov	DWORD PTR [edi+4], ecx
	je	SHORT $L14915
	test	BYTE PTR [edi+52], 32			; 00000020H
	jne	SHORT $L14915
	push	eax
	mov	ecx, edi
	call	?Distance2@?$Vector3d@M@@QBEMABV1@@Z	; Vector3d<float>::Distance2
	fcomp	DWORD PTR [edi+60]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L14915
	mov	eax, DWORD PTR [edi+28]
	test	BYTE PTR [eax+52], 16			; 00000010H
	jne	SHORT $L14916
	mov	ecx, DWORD PTR [edi+68]
	push	eax
	call	?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute
$L14916:
	mov	eax, DWORD PTR [edi+44]
	cmp	eax, ebx
	je	SHORT $L14929
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [edi+44], ebx
$L14929:
	mov	eax, DWORD PTR [edi+48]
	cmp	eax, ebx
	je	SHORT $L14930
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [edi+48], ebx
$L14930:
	mov	ecx, DWORD PTR [edi+28]
	cmp	ecx, ebx
	je	SHORT $L14931
	push	edi
	call	?LostChild@SpherePack@@QAEXPAV1@@Z	; SpherePack::LostChild
$L14931:
	mov	ecx, DWORD PTR [edi+68]
	push	edi
	mov	DWORD PTR [edi+28], ebx
	call	?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
$L14915:

; 182  : 
; 183  :   }
; 184  : 
; 185  : 
; 186  :   mJumpCounter--;

	mov	ecx, DWORD PTR [esi]
	dec	ecx

; 187  : 
; 188  :   if ( mJumpCounter <= 0 )

	mov	eax, ecx
	mov	DWORD PTR [esi], ecx
	cmp	eax, ebx
	jg	$L15003

; 189  :   {
; 190  :     Vector3d<float> pos;
; 191  : 
; 192  :     if ( !mAttractor )

	cmp	DWORD PTR [esi+28], ebx
	jne	SHORT $L12975

; 193  :     {
; 194  :       int wx = SWID/4;
; 195  :       int wy = SHIT/4;
; 196  :       mLocX = (rand()%wx)-(wx/2)+gCenterX;

	call	_rand
	and	eax, -2147479553			; 80000fffH
	jns	SHORT $L15010
	dec	eax
	or	eax, -4096				; fffff000H
	inc	eax
$L15010:
	mov	edx, DWORD PTR _gCenterX
	lea	eax, DWORD PTR [eax+edx-2048]
	mov	DWORD PTR [esi+4], eax

; 197  :       mLocY = (rand()%wy)-(wy/2)+gCenterY;

	call	_rand
	cdq
	mov	ecx, 3072				; 00000c00H
	idiv	ecx
	mov	eax, DWORD PTR _gCenterY
	lea	ecx, DWORD PTR [edx+eax-1536]

; 198  : 
; 199  :       if ( mLocX < 0 ) mLocX = 0;

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, ebx
	mov	DWORD PTR [esi+8], ecx
	jge	SHORT $L12972
	mov	DWORD PTR [esi+4], ebx
$L12972:

; 200  :       if ( mLocX > SWID ) mLocX = SWID;

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, 16384				; 00004000H
	cmp	ecx, eax
	jle	SHORT $L12973
	mov	DWORD PTR [esi+4], eax
$L12973:

; 201  :       if ( mLocY < 0 ) mLocY = 0;

	cmp	DWORD PTR [esi+8], ebx
	jge	SHORT $L12974
	mov	DWORD PTR [esi+8], ebx
$L12974:

; 202  :       if ( mLocY > SHIT ) mLocY = SHIT;

	mov	ecx, DWORD PTR [esi+8]
	mov	eax, 12288				; 00003000H
	cmp	ecx, eax
	jle	SHORT $L12975
	mov	DWORD PTR [esi+8], eax
$L12975:

; 203  : 
; 204  :     }
; 205  : 
; 206  :     pos.x = float(mLocX)*(1.0f/FIXED);

	fild	DWORD PTR [esi+4]
	fmul	DWORD PTR __real@4@3ffb8000000000000000
	fstp	DWORD PTR _pos$12968[ebp]

; 207  :     pos.y = float(mLocY)*(1.0f/FIXED);

	fild	DWORD PTR [esi+8]
	fmul	DWORD PTR __real@4@3ffb8000000000000000
	fstp	DWORD PTR _pos$12968[ebp+4]

; 208  :     pos.z = 0;
; 209  : 
; 210  :     mJumpCounter = rand()%JUMP_TIME;

	call	_rand
	and	eax, -2147483521			; 8000007fH
	jns	SHORT $L15011
	dec	eax
	or	eax, -128				; ffffff80H
	inc	eax
$L15011:
	mov	DWORD PTR [esi], eax

; 211  : 
; 212  :     mDeltaX = (rand()&31)-16;

	call	_rand
	and	eax, 31					; 0000001fH
	sub	eax, 16					; 00000010H
	mov	DWORD PTR [esi+16], eax

; 213  :     mDeltaY = (rand()&31)-16;

	call	_rand
	and	eax, 31					; 0000001fH

; 214  :     mSphere->NewPos(pos);

	mov	edx, DWORD PTR _pos$12968[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR [esi+20], eax
	mov	esi, DWORD PTR [esi+24]
	mov	eax, DWORD PTR _pos$12968[ebp+4]
	mov	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [esi], edx
	cmp	ecx, ebx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ebx
	je	SHORT $L15003
	test	BYTE PTR [esi+52], 32			; 00000020H
	jne	SHORT $L15003
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR _pos$12968[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR _pos$12968[ebp+4]
	fld	DWORD PTR [ecx+8]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	ST(0), ST(3)

; 215  :   }
; 216  : 
; 217  : 	return 0;

	faddp	ST(1), ST(0)
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fcomp	DWORD PTR [esi+60]
	fstp	ST(0)
	fnstsw	ax
	fstp	ST(0)
	test	ah, 1
	fstp	ST(0)
	jne	SHORT $L15003
	test	BYTE PTR [ecx+52], 16			; 00000010H
	jne	SHORT $L14976
	push	ecx
	mov	ecx, DWORD PTR [esi+68]
	call	?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute
$L14976:
	mov	eax, DWORD PTR [esi+44]
	cmp	eax, ebx
	je	SHORT $L14994
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [esi+44], ebx
$L14994:
	mov	eax, DWORD PTR [esi+48]
	cmp	eax, ebx
	je	SHORT $L14995
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [esi+48], ebx
$L14995:
	mov	ecx, DWORD PTR [esi+28]
	cmp	ecx, ebx
	je	SHORT $L14996
	push	esi
	call	?LostChild@SpherePack@@QAEXPAV1@@Z	; SpherePack::LostChild
$L14996:
	mov	ecx, DWORD PTR [esi+68]
	push	esi
	mov	DWORD PTR [esi+28], ebx
	call	?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
$L15003:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx

; 218  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Process@Circle@@QAEHPAVSpherePackFactory@@@Z ENDP	; Circle::Process
_TEXT	ENDS
PUBLIC	?Render@Circle@@QAEHXZ				; Circle::Render
EXTRN	?DrawCircle@@YAHHHHH@Z:NEAR			; DrawCircle
_TEXT	SEGMENT
?Render@Circle@@QAEHXZ PROC NEAR			; Circle::Render

; 224  : 	DrawCircle(mLocX, mLocY, mRadius, 0x00ffffff);

	mov	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR [ecx+8]
	push	16777215				; 00ffffffH
	push	eax
	mov	eax, DWORD PTR [ecx+4]
	push	edx
	push	eax
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle
	add	esp, 16					; 00000010H

; 225  : 
; 226  : 	return 0;

	xor	eax, eax

; 227  : }

	ret	0
?Render@Circle@@QAEHXZ ENDP				; Circle::Render
_TEXT	ENDS
PUBLIC	??0CircleFactory@@QAE@H@Z			; CircleFactory::CircleFactory
PUBLIC	?RayTraceCallback@CircleFactory@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z ; CircleFactory::RayTraceCallback
PUBLIC	?VisibilityCallback@CircleFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; CircleFactory::VisibilityCallback
PUBLIC	?RangeTestCallback@CircleFactory@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z ; CircleFactory::RangeTestCallback
PUBLIC	??1?$Pool@VCircleItem@@@@QAE@XZ			; Pool<CircleItem>::~Pool<CircleItem>
PUBLIC	??_7CircleFactory@@6B@				; CircleFactory::`vftable'
PUBLIC	?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::VisibilityCallback
PUBLIC	?RayTraceCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z ; SpherePackCallback::RayTraceCallback
PUBLIC	?RangeTestCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::RangeTestCallback
PUBLIC	??_7SpherePackCallback@@6B@			; SpherePackCallback::`vftable'
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	??0SpherePackFactory@@QAE@HMMM@Z:NEAR		; SpherePackFactory::SpherePackFactory
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT ??_7SpherePackCallback@@6B@
; File C:\WINDOWS\Desktop\Gems2 CD\SourceCode\04 Geometry Management\03 Ratcliff\circle.h
CONST	SEGMENT
??_7SpherePackCallback@@6B@ DD FLAT:?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::`vftable'
	DD	FLAT:?RayTraceCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_7CircleFactory@@6B@
CONST	SEGMENT
??_7CircleFactory@@6B@ DD FLAT:?VisibilityCallback@CircleFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; CircleFactory::`vftable'
	DD	FLAT:?RayTraceCallback@CircleFactory@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@CircleFactory@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
xdata$x	SEGMENT
$T15125	DD	019930520H
	DD	03H
	DD	FLAT:$T15141
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T15141	DD	0ffffffffH
	DD	FLAT:$L15024
	DD	00H
	DD	FLAT:$L15025
	DD	00H
	DD	FLAT:$L15026
xdata$x	ENDS
_TEXT	SEGMENT
$T15017 = 8
$T15021 = -24
_circlecount$ = 8
_this$ = -20
_i$ = 8
_at$12996 = -16
$T15121 = 8
__$EHRec$ = -12
??0CircleFactory@@QAE@H@Z PROC NEAR			; CircleFactory::CircleFactory

; 235  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L15135
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[ebp], esi
	mov	ebx, 16					; 00000010H
	mov	DWORD PTR [esi], OFFSET FLAT:??_7SpherePackCallback@@6B@ ; SpherePackCallback::`vftable'
	lea	edi, DWORD PTR [esi+20]
$L15038:
	call	_rand
	and	eax, -2147467265			; 80003fffH
	jns	SHORT $L15137
	dec	eax
	or	eax, -16384				; ffffc000H
	inc	eax
$L15137:
	mov	DWORD PTR [edi+4], eax
	call	_rand
	cdq
	mov	ecx, 12288				; 00003000H
	idiv	ecx
	mov	DWORD PTR [edi+8], edx
	call	_rand
	and	eax, 7
	sub	eax, 4
	mov	DWORD PTR [edi+12], eax
	call	_rand
	and	eax, 7
	sub	eax, 4
	mov	DWORD PTR [edi+16], eax
	call	_rand
	cdq
	mov	ecx, 127				; 0000007fH
	add	edi, 20					; 00000014H
	idiv	ecx
	add	edx, 16					; 00000010H
	dec	ebx
	mov	DWORD PTR [edi-20], edx
	jne	SHORT $L15038
	xor	ebx, ebx
	mov	DWORD PTR [esi+352], ebx
	mov	DWORD PTR [esi+356], ebx
	mov	DWORD PTR [esi+348], ebx
	mov	DWORD PTR [esi+344], ebx
	mov	DWORD PTR [esi+364], ebx
	mov	DWORD PTR [esi+360], ebx

; 236  :   mState = CS_SHOW_ALL;
; 237  :   mCircleCount = circlecount;

	mov	eax, DWORD PTR _circlecount$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	DWORD PTR [esi], OFFSET FLAT:??_7CircleFactory@@6B@ ; CircleFactory::`vftable'
	mov	DWORD PTR [esi+4], ebx

; 238  :   mCircles = new Circle *[mCircleCount];

	lea	edx, DWORD PTR [eax*4]
	mov	DWORD PTR [esi+368], eax
	push	edx
	call	??2@YAPAXI@Z				; operator new

; 239  : 
; 240  :   mVisible.Set(mCircleCount); // visiblelist

	mov	edi, DWORD PTR [esi+368]
	mov	DWORD PTR [esi+12], eax
	mov	eax, DWORD PTR [esi+348]
	mov	DWORD PTR $T15121[ebp], edi
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	lea	eax, DWORD PTR [edi+edi*2]
	mov	DWORD PTR [esi+340], edi
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 12					; 0000000cH
	cmp	eax, ebx
	je	SHORT $L15102
	lea	edx, DWORD PTR [edi-1]
	mov	ecx, eax
	cmp	edx, ebx
	jl	SHORT $L15103
	inc	edx
$L15108:
	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], ebx
	add	ecx, 12					; 0000000cH
	dec	edx
	jne	SHORT $L15108
	jmp	SHORT $L15103
$L15102:
	xor	eax, eax
$L15103:
	mov	ecx, DWORD PTR [esi+340]
	mov	DWORD PTR [esi+348], eax
	mov	DWORD PTR [esi+356], eax
	xor	eax, eax
	dec	ecx
	mov	DWORD PTR [esi+352], ebx
	test	ecx, ecx
	jle	SHORT $L15095
$L15093:
	mov	edx, DWORD PTR [esi+348]
	lea	ecx, DWORD PTR [eax+eax*2+3]
	lea	edi, DWORD PTR [edx+ecx*4]
	lea	ecx, DWORD PTR [eax+eax*2]
	shl	ecx, 2
	cmp	eax, ebx
	mov	DWORD PTR [ecx+edx], edi
	jne	SHORT $L15096
	mov	ecx, DWORD PTR [esi+348]
	mov	DWORD PTR [ecx+4], ebx
	jmp	SHORT $L15094
$L15096:
	mov	edx, DWORD PTR [esi+348]
	add	ecx, edx
	lea	edx, DWORD PTR [ecx-12]
	mov	DWORD PTR [ecx+4], edx
$L15094:
	mov	ecx, DWORD PTR [esi+340]
	inc	eax
	dec	ecx
	cmp	eax, ecx
	jl	SHORT $L15093
	mov	edi, DWORD PTR $T15121[ebp]
$L15095:
	mov	edx, DWORD PTR [esi+348]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 2
	mov	ecx, eax

; 241  : 
; 242  :   mFactory = new SpherePackFactory(mCircleCount,256,64,8);

	push	116					; 00000074H
	add	ecx, edx
	mov	DWORD PTR [ecx], ebx
	mov	edx, DWORD PTR [esi+348]
	add	eax, edx
	lea	ecx, DWORD PTR [eax-12]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [esi+344], ebx
	mov	DWORD PTR [esi+364], edi
	mov	DWORD PTR [esi+360], ebx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15017[ebp], eax
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	je	SHORT $L15018
	mov	ecx, DWORD PTR [esi+368]
	push	1090519040				; 41000000H
	push	1115684864				; 42800000H
	push	1132462080				; 43800000H
	push	ecx
	mov	ecx, eax
	call	??0SpherePackFactory@@QAE@HMMM@Z	; SpherePackFactory::SpherePackFactory
	jmp	SHORT $L15019
$L15018:
	xor	eax, eax
$L15019:
	mov	DWORD PTR [esi+16], eax

; 243  : 
; 244  : 	for (int i = 0; i != mCircleCount; i++)

	mov	eax, DWORD PTR [esi+368]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	DWORD PTR _i$[ebp], ebx
	je	$L15134
$L12992:

; 245  : 	{
; 246  : 
; 247  :     int a = rand()%MAX_ATTRACTORS;

	call	_rand
	and	eax, -2147483633			; 8000000fH
	jns	SHORT $L15138
	dec	eax
	or	eax, -16				; fffffff0H
	inc	eax
$L15138:

; 248  : 
; 249  :     Attractor *at = &mAttractors[a];

	lea	edx, DWORD PTR [eax+eax*4+5]
	lea	eax, DWORD PTR [esi+edx*4]
	mov	DWORD PTR _at$12996[ebp], eax

; 250  :     if ( (i&3) == 0 ) at = 0; // 1 of 4 are non moving

	mov	al, BYTE PTR _i$[ebp]
	test	al, 3
	jne	SHORT $L12997
	mov	DWORD PTR _at$12996[ebp], ebx
$L12997:

; 251  : 
; 252  : 		mCircles[i] = new Circle(rand()%SWID,
; 253  : 		                         rand()%SHIT,
; 254  : 		                         (rand()%4) + 1,
; 255  : 		                         mFactory,
; 256  :                              at);

	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T15021[ebp], edi
	cmp	edi, ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	je	SHORT $L15022
	mov	ecx, DWORD PTR _at$12996[ebp]
	mov	edx, DWORD PTR [esi+16]
	push	ecx
	push	edx
	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $L15139
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$L15139:
	inc	eax
	push	eax
	call	_rand
	cdq
	mov	ecx, 12288				; 00003000H
	idiv	ecx
	push	edx
	call	_rand
	and	eax, -2147467265			; 80003fffH
	jns	SHORT $L15140
	dec	eax
	or	eax, -16384				; ffffc000H
	inc	eax
$L15140:
	push	eax
	mov	ecx, edi
	call	??0Circle@@QAE@HHHPAVSpherePackFactory@@PAVAttractor@@@Z ; Circle::Circle
	jmp	SHORT $L15023
$L15022:
	xor	eax, eax
$L15023:
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR [esi+368]
	inc	ecx
	cmp	ecx, eax
	mov	DWORD PTR _i$[ebp], ecx
	jne	$L12992
$L15134:

; 257  : 	}
; 258  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
$L15024:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	jmp	??1?$Pool@VCircleItem@@@@QAE@XZ		; Pool<CircleItem>::~Pool<CircleItem>
$L15025:
	mov	eax, DWORD PTR $T15017[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
$L15026:
	mov	eax, DWORD PTR $T15021[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
$L15135:
	mov	eax, OFFSET FLAT:$T15125
	jmp	___CxxFrameHandler
text$x	ENDS
??0CircleFactory@@QAE@H@Z ENDP				; CircleFactory::CircleFactory
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___n$[ebp]
	dec	eax
	js	SHORT $L13013
	push	ebx
	mov	ebx, DWORD PTR ___f$[ebp]
	push	esi
	mov	esi, DWORD PTR ___t$[ebp]
	push	edi
	lea	edi, DWORD PTR [eax+1]
$L13012:
	mov	ecx, esi
	call	ebx
	mov	ecx, DWORD PTR ___s$[ebp]
	add	esi, ecx
	dec	edi
	jne	SHORT $L13012
	pop	edi
	pop	esi
	pop	ebx
$L13013:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1CircleFactory@@QAE@XZ			; CircleFactory::~CircleFactory
EXTRN	??1SpherePackFactory@@QAE@XZ:NEAR		; SpherePackFactory::~SpherePackFactory
xdata$x	SEGMENT
$T15176	DD	019930520H
	DD	01H
	DD	FLAT:$T15180
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T15180	DD	0ffffffffH
	DD	FLAT:$L15156
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1CircleFactory@@QAE@XZ PROC NEAR			; CircleFactory::~CircleFactory

; 263  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L15179
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[ebp], esi
	mov	DWORD PTR [esi], OFFSET FLAT:??_7CircleFactory@@6B@ ; CircleFactory::`vftable'

; 264  : 	for (int i = 0; i != mCircleCount; i++)

	mov	eax, DWORD PTR [esi+368]
	xor	edi, edi
	test	eax, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $L13022
$L13020:

; 265  : 	{
; 266  : 		delete(mCircles[i]);

	mov	eax, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [eax+edi*4]
	test	eax, eax
	je	SHORT $L13021
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L13021:
	mov	eax, DWORD PTR [esi+368]
	inc	edi
	cmp	edi, eax
	jne	SHORT $L13020
$L13022:

; 267  : 	}
; 268  :   delete mFactory;

	mov	edi, DWORD PTR [esi+16]
	test	edi, edi
	je	SHORT $L15154
	mov	ecx, edi
	call	??1SpherePackFactory@@QAE@XZ		; SpherePackFactory::~SpherePackFactory
	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L15154:

; 269  : }

	mov	ecx, DWORD PTR [esi+348]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	add	esp, 4
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
$L15156:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	jmp	??1?$Pool@VCircleItem@@@@QAE@XZ		; Pool<CircleItem>::~Pool<CircleItem>
$L15179:
	mov	eax, OFFSET FLAT:$T15176
	jmp	___CxxFrameHandler
text$x	ENDS
??1CircleFactory@@QAE@XZ ENDP				; CircleFactory::~CircleFactory
PUBLIC	?Process@CircleFactory@@QAEHXZ			; CircleFactory::Process
EXTRN	?Process@SpherePackFactory@@QAEXXZ:NEAR		; SpherePackFactory::Process
EXTRN	?Reset@SpherePackFactory@@QAEXXZ:NEAR		; SpherePackFactory::Reset
_TEXT	SEGMENT
?Process@CircleFactory@@QAEHXZ PROC NEAR		; CircleFactory::Process

; 275  :   if ( 1 )
; 276  :   {
; 277  :     static gCount = 0;
; 278  :     gCount++;

	mov	eax, DWORD PTR _?gCount@?4??Process@CircleFactory@@QAEHXZ@4HA
	push	esi
	inc	eax
	mov	esi, ecx

; 279  :     if ( gCount == 128 )

	cmp	eax, 128				; 00000080H
	mov	DWORD PTR _?gCount@?4??Process@CircleFactory@@QAEHXZ@4HA, eax
	jne	SHORT $L13042

; 280  :     {
; 281  :       gCount = 0;

	mov	DWORD PTR _?gCount@?4??Process@CircleFactory@@QAEHXZ@4HA, 0

; 282  :       gCenterX = rand()%SWID;

	call	_rand
	and	eax, -2147467265			; 80003fffH
	jns	SHORT $L15186
	dec	eax
	or	eax, -16384				; ffffc000H
	inc	eax
$L15186:
	mov	DWORD PTR _gCenterX, eax

; 283  :       gCenterY = rand()%SHIT;

	call	_rand
	cdq
	mov	ecx, 12288				; 00003000H
	idiv	ecx
	mov	DWORD PTR _gCenterY, edx
$L13042:
	push	ebx
	push	edi

; 284  :     }
; 285  :   }
; 286  : 
; 287  :   if ( 1 )
; 288  :   {
; 289  :     for (int i=0; i<MAX_ATTRACTORS; i++) mAttractors[i].ResetTest();

	lea	edi, DWORD PTR [esi+20]
	mov	ebx, 16					; 00000010H
$L13045:
	mov	ecx, edi
	call	?ResetTest@Attractor@@QAEXXZ		; Attractor::ResetTest
	add	edi, 20					; 00000014H
	dec	ebx
	jne	SHORT $L13045

; 290  :   }
; 291  : 
; 292  :   // Perform 'physics' on all circles.
; 293  :   for (int i = 0; i != mCircleCount; i++)

	mov	eax, DWORD PTR [esi+368]
	xor	edi, edi
	test	eax, eax
	je	SHORT $L13051
$L13049:

; 294  :   {
; 295  :  	  mCircles[i]->Process(mFactory);

	mov	eax, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [esi+16]
	push	edx
	mov	ecx, DWORD PTR [eax+edi*4]
	call	?Process@Circle@@QAEHPAVSpherePackFactory@@@Z ; Circle::Process
	mov	eax, DWORD PTR [esi+368]
	inc	edi
	cmp	edi, eax
	jne	SHORT $L13049
$L13051:

; 296  :   }
; 297  : 
; 298  :   CircleState gLastState = CS_SHOW_ALL;
; 299  : 
; 300  :   if ( mState != gLastState )

	mov	eax, DWORD PTR [esi+4]
	pop	edi
	test	eax, eax
	pop	ebx
	je	SHORT $L13053

; 301  :   {
; 302  :     // Frustum culling in this example presumes frame to frame coherency.
; 303  :     // If we change modes we need to reset the visibility status of the
; 304  :     // sphere tree to a null state.
; 305  :     gLastState = mState;
; 306  :     mFactory->Reset(); // reset visibility state

	mov	ecx, DWORD PTR [esi+16]
	call	?Reset@SpherePackFactory@@QAEXXZ	; SpherePackFactory::Reset
$L13053:

; 307  :   }
; 308  : 
; 309  :   mFactory->Process(); // controls how much CPU to give up to reintegration and recomputation fifos

	mov	ecx, DWORD PTR [esi+16]
	call	?Process@SpherePackFactory@@QAEXXZ	; SpherePackFactory::Process

; 310  : 
; 311  : 	return 0;

	xor	eax, eax
	pop	esi

; 312  : }

	ret	0
?Process@CircleFactory@@QAEHXZ ENDP			; CircleFactory::Process
_TEXT	ENDS
PUBLIC	?Render@CircleFactory@@QAEHXZ			; CircleFactory::Render
EXTRN	?Render@SpherePackFactory@@QAEXXZ:NEAR		; SpherePackFactory::Render
EXTRN	?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z:NEAR ; SpherePackFactory::FrustumTest
EXTRN	?RayTrace@SpherePackFactory@@QAEXABV?$Vector3d@M@@0PAVSpherePackCallback@@@Z:NEAR ; SpherePackFactory::RayTrace
EXTRN	?RangeTest@SpherePackFactory@@QAEXABV?$Vector3d@M@@MPAVSpherePackCallback@@@Z:NEAR ; SpherePackFactory::RangeTest
EXTRN	?PrintText@@YAHHHHPADZZ:NEAR			; PrintText
EXTRN	?DrawLine@@YAHHHHHH@Z:NEAR			; DrawLine
EXTRN	?Set@Frustum@@QAEXHHHH@Z:NEAR			; Frustum::Set
_TEXT	SEGMENT
_color1$ = -8
_color2$ = -12
_color3$ = -16
_color4$ = -20
_f$13085 = -52
_p1$15238 = -48
_p2$15239 = -36
_p$15254 = -48
$T15258 = -24
$T15259 = -28
$T15260 = -4
?Render@CircleFactory@@QAEHXZ PROC NEAR			; CircleFactory::Render

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 318  :   static int fcount=0;
; 319  : 
; 320  :   fcount++;

	mov	edx, DWORD PTR _?fcount@?1??Render@CircleFactory@@QAEHXZ@4HA
	push	ebx
	push	esi
	mov	esi, ecx
	inc	edx
	push	edi
	mov	DWORD PTR _?fcount@?1??Render@CircleFactory@@QAEHXZ@4HA, edx

; 321  : 
; 322  :   unsigned int color1=0xFFFFFF;
; 323  :   unsigned int color2=0xFFFFFF;
; 324  :   unsigned int color3=0xFFFFFF;
; 325  :   unsigned int color4=0xFFFFFF;
; 326  : 
; 327  :   switch ( mState )
; 328  :   {

	mov	eax, DWORD PTR [esi+4]
	mov	edi, 16777215				; 00ffffffH
	cmp	eax, 3
	mov	DWORD PTR _color1$[ebp], edi
	mov	DWORD PTR _color2$[ebp], edi
	mov	DWORD PTR _color3$[ebp], edi
	mov	DWORD PTR _color4$[ebp], edi
	ja	$L15253
	jmp	DWORD PTR $L15276[eax*4]
$L13068:

; 329  :     case CS_SHOW_ALL:
; 330  :       mFactory->Render();

	mov	ecx, DWORD PTR [esi+16]
	call	?Render@SpherePackFactory@@QAEXXZ	; SpherePackFactory::Render

; 331  :       color1 = 0x00FFFF;

	mov	DWORD PTR _color1$[ebp], 65535		; 0000ffffH

; 332  :       break;

	jmp	$L15253
$L13069:

; 333  :     case CS_SHOW_FRUSTUM:
; 334  :       color2 = 0x00FFFF;
; 335  :       if ( 1 )
; 336  :       {
; 337  :         PrintText(0,12,0xFFFFFF,"Show Spheres Intersecting A Frustum");

	push	OFFSET FLAT:$SG13071
	push	edi
	push	12					; 0000000cH
	push	0
	mov	DWORD PTR _color2$[ebp], 65535		; 0000ffffH
	call	?PrintText@@YAHHHHPADZZ			; PrintText

; 338  : 
; 339  :         static int x1 = 300;
; 340  :         static int y1 = 250;
; 341  :         static int x2 = 500;
; 342  :         static int y2 = 400;
; 343  : 
; 344  : 
; 345  :         if ( (fcount&255) == 0 )

	mov	al, BYTE PTR _?fcount@?1??Render@CircleFactory@@QAEHXZ@4HA
	add	esp, 16					; 00000010H
	test	al, al
	jne	$L15265

; 346  :         {
; 347  :           x1 = rand()%(SCREEN_WIDTH-200);

	call	_rand
	cdq
	mov	ecx, 824				; 00000338H
	idiv	ecx
	mov	DWORD PTR _?x1@?6??Render@CircleFactory@@QAEHXZ@4HA, edx

; 348  :           y1 = rand()%(SCREEN_HEIGHT-200);

	call	_rand
	cdq
	mov	ecx, 568				; 00000238H
	idiv	ecx
	mov	DWORD PTR _?y1@?6??Render@CircleFactory@@QAEHXZ@4HA, edx

; 349  : 
; 350  :           int wid = rand()%((SCREEN_WIDTH)/2-x1)+32;

	call	_rand
	mov	edx, DWORD PTR _?x1@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	ecx, 512				; 00000200H
	sub	ecx, edx
	cdq
	idiv	ecx
	mov	edi, edx
	add	edi, 32					; 00000020H

; 351  :           int hit = rand()%((SCREEN_HEIGHT)/2-y1)+32;

	call	_rand
	mov	ecx, DWORD PTR _?y1@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	ebx, 384				; 00000180H
	cdq
	sub	ebx, ecx
	idiv	ebx

; 352  : 
; 353  :           x2 = x1+wid;

	mov	eax, DWORD PTR _?x1@?6??Render@CircleFactory@@QAEHXZ@4HA
	add	eax, edi
	mov	DWORD PTR _?x2@?6??Render@CircleFactory@@QAEHXZ@4HA, eax
	add	edx, 32					; 00000020H

; 354  :           y2 = y1+hit;

	add	edx, ecx

; 355  :           if ( x2 > (SCREEN_WIDTH-20) ) x2 = SCREEN_WIDTH-20;

	cmp	eax, 1004				; 000003ecH
	mov	DWORD PTR _?y2@?6??Render@CircleFactory@@QAEHXZ@4HA, edx
	jle	SHORT $L13083
	mov	eax, 1004				; 000003ecH
	mov	DWORD PTR _?x2@?6??Render@CircleFactory@@QAEHXZ@4HA, eax
$L13083:

; 356  :           if ( y2 > (SCREEN_HEIGHT-20) ) y2 = SCREEN_HEIGHT-20;

	cmp	edx, 748				; 000002ecH
	jle	SHORT $L13084
	mov	edx, 748				; 000002ecH
	mov	DWORD PTR _?y2@?6??Render@CircleFactory@@QAEHXZ@4HA, edx
	jmp	SHORT $L13084
$L15265:
	mov	ecx, DWORD PTR _?y1@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	eax, DWORD PTR _?x2@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	edx, DWORD PTR _?y2@?6??Render@CircleFactory@@QAEHXZ@4HA
$L13084:

; 357  : 
; 358  :         }
; 359  : 
; 360  :         Frustum f;
; 361  : 
; 362  :         f.Set(x1,y1,x2,y2);

	push	edx
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _?x1@?6??Render@CircleFactory@@QAEHXZ@4HA
	push	ecx
	lea	ecx, DWORD PTR _f$13085[ebp]
	call	?Set@Frustum@@QAEXHHHH@Z		; Frustum::Set

; 363  : 
; 364  :         DrawLine(x1,y1,x2,y1,0xFFFFFF);

	mov	eax, DWORD PTR _?y1@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	edx, DWORD PTR _?x2@?6??Render@CircleFactory@@QAEHXZ@4HA
	push	16777215				; 00ffffffH
	push	eax
	push	edx
	push	eax
	mov	eax, DWORD PTR _?x1@?6??Render@CircleFactory@@QAEHXZ@4HA
	push	eax
	call	?DrawLine@@YAHHHHHH@Z			; DrawLine

; 365  :         DrawLine(x1,y2,x2,y2,0xFFFFFF);

	mov	eax, DWORD PTR _?y2@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	ecx, DWORD PTR _?x2@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	edx, DWORD PTR _?x1@?6??Render@CircleFactory@@QAEHXZ@4HA
	push	16777215				; 00ffffffH
	push	eax
	push	ecx
	push	eax
	push	edx
	call	?DrawLine@@YAHHHHHH@Z			; DrawLine

; 366  :         DrawLine(x1,y1,x1,y2,0xFFFFFF);

	mov	eax, DWORD PTR _?y2@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	ecx, DWORD PTR _?y1@?6??Render@CircleFactory@@QAEHXZ@4HA
	push	16777215				; 00ffffffH
	push	eax
	mov	eax, DWORD PTR _?x1@?6??Render@CircleFactory@@QAEHXZ@4HA
	push	eax
	push	ecx
	push	eax
	call	?DrawLine@@YAHHHHHH@Z			; DrawLine

; 367  :         DrawLine(x2,y1,x2,y2,0xFFFFFF);

	mov	edx, DWORD PTR _?y2@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	eax, DWORD PTR _?x2@?6??Render@CircleFactory@@QAEHXZ@4HA
	mov	ecx, DWORD PTR _?y1@?6??Render@CircleFactory@@QAEHXZ@4HA
	push	16777215				; 00ffffffH
	push	edx
	push	eax
	push	ecx
	push	eax
	call	?DrawLine@@YAHHHHHH@Z			; DrawLine

; 368  : 
; 369  :         FrustumTest(f);

	mov	ecx, DWORD PTR [esi+16]
	add	esp, 80					; 00000050H
	lea	edx, DWORD PTR _f$13085[ebp]
	push	esi
	push	edx
	call	?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z ; SpherePackFactory::FrustumTest

; 370  : 
; 371  :         // now render everybody in the visible list.
; 372  :         int count = mVisible.Begin();

	mov	edi, DWORD PTR [esi+360]
	mov	eax, DWORD PTR [esi+352]

; 373  : 
; 374  :         for (int i=0; i<count; i++)

	xor	ebx, ebx
	mov	DWORD PTR [esi+344], eax
	test	edi, edi
	jle	SHORT $L15264
$L13088:

; 375  :         {
; 376  :           CircleItem *item = mVisible.GetNext();

	mov	ecx, DWORD PTR [esi+352]
	test	ecx, ecx
	je	SHORT $L15264
	mov	eax, DWORD PTR [esi+344]
	test	eax, eax
	jne	SHORT $L15273
	mov	eax, ecx
	test	eax, eax
	je	SHORT $L15264
$L15273:
	mov	ecx, DWORD PTR [eax]

; 377  :           if ( !item ) break;
; 378  :           Circle *circle = item->GetCircle();
; 379  :           SpherePack *sphere = circle->GetSpherePack();
; 380  :           Vector3d<float> pos = sphere->GetCenter();
; 381  :           int color = 0x00FF00;

	mov	edx, 65280				; 0000ff00H
	mov	DWORD PTR [esi+344], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+24]

; 382  :           if ( circle->GetViewState() == VS_PARTIAL ) color = 0x00FFFF;

	cmp	DWORD PTR [ecx+36], 1
	fld	DWORD PTR [eax]
	fld	DWORD PTR [eax+4]
	jne	SHORT $L13097
	mov	edx, 65535				; 0000ffffH
$L13097:

; 383  :           DrawCircle( int(pos.x), int(pos.y), int( sphere->GetRadius() ), color);

	fld	DWORD PTR [eax+12]
	push	edx
	fistp	QWORD PTR -32+[ebp]
	mov	edx, DWORD PTR -32+[ebp]
	push	edx
	fistp	QWORD PTR -32+[ebp]
	mov	eax, DWORD PTR -32+[ebp]
	push	eax
	fistp	QWORD PTR -32+[ebp]
	mov	ecx, DWORD PTR -32+[ebp]
	push	ecx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle
	add	esp, 16					; 00000010H
	inc	ebx
	cmp	ebx, edi
	jl	SHORT $L13088
$L15264:

; 384  :         }
; 385  : 
; 386  :         PrintText(0,24,0xFFFFFF,"%d Spheres Intersected Frustum.",count);

	push	edi
	push	OFFSET FLAT:$SG13098

; 387  : 
; 388  :       }
; 389  :       break;

	jmp	$L15274
$L13099:

; 390  :     case CS_SHOW_RAYTRACE:
; 391  :       color3 = 0x00FFFF;
; 392  :       if ( 1 )
; 393  :       {
; 394  :         PrintText(0,12,0xFFFFFF,"Show Spheres Intersecting A Line Segment");

	push	OFFSET FLAT:$SG13101
	push	edi
	push	12					; 0000000cH
	push	0
	mov	DWORD PTR _color3$[ebp], 65535		; 0000ffffH
	call	?PrintText@@YAHHHHPADZZ			; PrintText

; 395  : 
; 396  :         static int x1 = 300;
; 397  :         static int y1 = 250;
; 398  :         static int x2 = 500;
; 399  :         static int y2 = 400;
; 400  : 
; 401  :         if ( (fcount&255) == 0 )

	mov	al, BYTE PTR _?fcount@?1??Render@CircleFactory@@QAEHXZ@4HA
	add	esp, 16					; 00000010H
	test	al, al
	jne	SHORT $L13110

; 402  :         {
; 403  :           x1 = rand()%SCREEN_WIDTH;

	call	_rand
	and	eax, -2147482625			; 800003ffH
	jns	SHORT $L15270
	dec	eax
	or	eax, -1024				; fffffc00H
	inc	eax
$L15270:
	mov	DWORD PTR _?x1@?BH@??Render@CircleFactory@@QAEHXZ@4HA, eax

; 404  :           y1 = rand()%SCREEN_HEIGHT;

	call	_rand
	cdq
	mov	ecx, 768				; 00000300H
	idiv	ecx
	mov	DWORD PTR _?y1@?BH@??Render@CircleFactory@@QAEHXZ@4HA, edx

; 405  :           x2 = rand()%SCREEN_WIDTH;

	call	_rand
	and	eax, -2147482625			; 800003ffH
	jns	SHORT $L15271
	dec	eax
	or	eax, -1024				; fffffc00H
	inc	eax
$L15271:
	mov	DWORD PTR _?x2@?BH@??Render@CircleFactory@@QAEHXZ@4HA, eax

; 406  :           y2 = rand()%SCREEN_HEIGHT;

	call	_rand
	cdq
	mov	ecx, 768				; 00000300H
	idiv	ecx
	mov	DWORD PTR _?y2@?BH@??Render@CircleFactory@@QAEHXZ@4HA, edx
$L13110:

; 407  :         }
; 408  : 
; 409  :         RayTest(x1,y1,x2,y2);

	fild	DWORD PTR _?x1@?BH@??Render@CircleFactory@@QAEHXZ@4HA
	mov	edx, DWORD PTR _?y2@?BH@??Render@CircleFactory@@QAEHXZ@4HA
	mov	eax, DWORD PTR _?x2@?BH@??Render@CircleFactory@@QAEHXZ@4HA
	mov	ecx, DWORD PTR _?y1@?BH@??Render@CircleFactory@@QAEHXZ@4HA
	push	edi
	fstp	DWORD PTR _p1$15238[ebp]
	fild	DWORD PTR _?y1@?BH@??Render@CircleFactory@@QAEHXZ@4HA
	push	edx
	mov	edx, DWORD PTR _?x1@?BH@??Render@CircleFactory@@QAEHXZ@4HA
	push	eax
	push	ecx
	fstp	DWORD PTR _p1$15238[ebp+4]
	fild	DWORD PTR _?x2@?BH@??Render@CircleFactory@@QAEHXZ@4HA
	push	edx
	mov	DWORD PTR _p1$15238[ebp+8], 0
	mov	DWORD PTR _p2$15239[ebp+8], 0
	fstp	DWORD PTR _p2$15239[ebp]
	fild	DWORD PTR _?y2@?BH@??Render@CircleFactory@@QAEHXZ@4HA
	fstp	DWORD PTR _p2$15239[ebp+4]
	call	?DrawLine@@YAHHHHHH@Z			; DrawLine
	add	esp, 20					; 00000014H
	lea	eax, DWORD PTR _p2$15239[ebp]
	lea	ecx, DWORD PTR _p1$15238[ebp]
	mov	DWORD PTR [esi+8], 0
	push	esi
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	call	?RayTrace@SpherePackFactory@@QAEXABV?$Vector3d@M@@0PAVSpherePackCallback@@@Z ; SpherePackFactory::RayTrace
	mov	edx, DWORD PTR [esi+8]
	push	edx
	push	OFFSET FLAT:$SG13136
	push	edi

; 410  :       }
; 411  :       break;

	jmp	$L15275
$L13111:

; 412  :     case CS_SHOW_RANGE_TEST:
; 413  :       color4 = 0x00FFFF;
; 414  :       if ( 1 )
; 415  :       {
; 416  :         static int dx = 0;
; 417  :         static int dy = 0;
; 418  :         static int radius = 128;
; 419  : 
; 420  :         if ( (fcount&255) == 0 )

	mov	al, BYTE PTR _?fcount@?1??Render@CircleFactory@@QAEHXZ@4HA
	mov	DWORD PTR _color4$[ebp], 65535		; 0000ffffH
	test	al, al
	jne	SHORT $L13119

; 421  :         {
; 422  :           dx = (rand()&255)-128;

	call	_rand
	and	eax, 255				; 000000ffH
	sub	eax, 128				; 00000080H
	mov	DWORD PTR _?dx@?BN@??Render@CircleFactory@@QAEHXZ@4HA, eax

; 423  :           dy = (rand()&255)-128;

	call	_rand
	and	eax, 255				; 000000ffH
	sub	eax, 128				; 00000080H
	mov	DWORD PTR _?dy@?BN@??Render@CircleFactory@@QAEHXZ@4HA, eax

; 424  :           radius = (rand()&127)+32;

	call	_rand
	and	eax, 127				; 0000007fH
	add	eax, 32					; 00000020H
	mov	DWORD PTR _?radius@?BN@??Render@CircleFactory@@QAEHXZ@4HA, eax
$L13119:

; 425  :         }
; 426  : 
; 427  :         PrintText(0,12,0xFFFFFF,"Show Spheres Within A Certain Range");

	push	OFFSET FLAT:$SG13120
	push	edi
	push	12					; 0000000cH
	push	0
	call	?PrintText@@YAHHHHPADZZ			; PrintText

; 428  : 
; 429  :         RangeTest(SCREEN_WIDTH/2+dx,SCREEN_HEIGHT/2+dy,radius);

	mov	ecx, DWORD PTR _?dy@?BN@??Render@CircleFactory@@QAEHXZ@4HA
	mov	edx, DWORD PTR _?dx@?BN@??Render@CircleFactory@@QAEHXZ@4HA
	mov	eax, DWORD PTR _?radius@?BN@??Render@CircleFactory@@QAEHXZ@4HA
	push	255					; 000000ffH
	lea	edi, DWORD PTR [ecx+384]
	lea	ebx, DWORD PTR [edx+512]
	push	eax
	push	edi
	push	ebx
	mov	DWORD PTR $T15260[ebp], eax
	mov	DWORD PTR $T15259[ebp], edi
	mov	DWORD PTR $T15258[ebp], ebx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle
	mov	eax, DWORD PTR $T15260[ebp]
	push	255					; 000000ffH
	add	eax, 2
	push	eax
	push	edi
	push	ebx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle
	mov	ecx, DWORD PTR $T15260[ebp]
	push	255					; 000000ffH
	add	ecx, 4
	push	ecx
	push	edi
	push	ebx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle
	mov	edx, DWORD PTR $T15260[ebp]
	add	esp, 64					; 00000040H
	add	edx, 6
	push	255					; 000000ffH
	push	edx
	push	edi
	push	ebx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle
	fild	DWORD PTR $T15258[ebp]
	add	esp, 16					; 00000010H
	lea	eax, DWORD PTR _p$15254[ebp]
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR _p$15254[ebp+8], 0
	fstp	DWORD PTR _p$15254[ebp]
	fild	DWORD PTR $T15259[ebp]
	push	esi
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	fstp	DWORD PTR _p$15254[ebp+4]
	fild	DWORD PTR $T15260[ebp]
	fstp	DWORD PTR [esp]
	push	eax
	call	?RangeTest@SpherePackFactory@@QAEXABV?$Vector3d@M@@MPAVSpherePackCallback@@@Z ; SpherePackFactory::RangeTest
	mov	ecx, DWORD PTR [esi+8]
	push	ecx
	push	OFFSET FLAT:$SG13156
$L15274:
	push	16777215				; 00ffffffH
$L15275:
	push	24					; 00000018H
	push	0
	call	?PrintText@@YAHHHHPADZZ			; PrintText
	add	esp, 20					; 00000014H
$L15253:

; 430  : 
; 431  :       }
; 432  :       break;
; 433  :   }
; 434  : 
; 435  : 
; 436  :   PrintText(900, 0,color1,"(A) Show All");

	mov	edx, DWORD PTR _color1$[ebp]
	push	OFFSET FLAT:$SG13121
	push	edx
	push	0
	push	900					; 00000384H
	call	?PrintText@@YAHHHHPADZZ			; PrintText

; 437  :   PrintText(900,20,color2,"(F) Frustum Culling");

	mov	eax, DWORD PTR _color2$[ebp]
	push	OFFSET FLAT:$SG13122
	push	eax
	push	20					; 00000014H
	push	900					; 00000384H
	call	?PrintText@@YAHHHHPADZZ			; PrintText

; 438  :   PrintText(900,40,color3,"(T) Ray Tracing");

	mov	ecx, DWORD PTR _color3$[ebp]
	push	OFFSET FLAT:$SG13123
	push	ecx
	push	40					; 00000028H
	push	900					; 00000384H
	call	?PrintText@@YAHHHHPADZZ			; PrintText

; 439  :   PrintText(900,60,color4,"(R) Range Testing");

	mov	edx, DWORD PTR _color4$[ebp]
	push	OFFSET FLAT:$SG13124
	push	edx
	push	60					; 0000003cH
	push	900					; 00000384H
	call	?PrintText@@YAHHHHPADZZ			; PrintText
	add	esp, 64					; 00000040H

; 440  :   PrintText(900,80,0xFFFFFF,"(SPACE) Pause");

	push	OFFSET FLAT:$SG13125
	push	16777215				; 00ffffffH
	push	80					; 00000050H
	push	900					; 00000384H
	call	?PrintText@@YAHHHHPADZZ			; PrintText

; 441  :   PrintText(900,100,0xFFFFFF, "(ENTER) UnPause");

	push	OFFSET FLAT:$SG13126
	push	16777215				; 00ffffffH
	push	100					; 00000064H
	push	900					; 00000384H
	call	?PrintText@@YAHHHHPADZZ			; PrintText
	add	esp, 32					; 00000020H

; 442  : 
; 443  : 
; 444  : 	return 0;

	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx

; 445  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$L15276:
	DD	$L13068
	DD	$L13069
	DD	$L13099
	DD	$L13111
?Render@CircleFactory@@QAEHXZ ENDP			; CircleFactory::Render
_TEXT	ENDS
PUBLIC	?RayTest@CircleFactory@@AAEXHHHH@Z		; CircleFactory::RayTest
_TEXT	SEGMENT
_x1$ = 8
_y1$ = 12
_x2$ = 16
_y2$ = 20
_p1$ = -24
_p2$ = -12
?RayTest@CircleFactory@@AAEXHHHH@Z PROC NEAR		; CircleFactory::RayTest

; 449  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 450  :   Vector3d<float> p1(x1,y1,0);

	fild	DWORD PTR _x1$[ebp]

; 451  :   Vector3d<float> p2(x2,y2,0);
; 452  : 
; 453  :   DrawLine(x1,y1,x2,y2,0xFFFFFF);

	mov	eax, DWORD PTR _y2$[ebp]
	mov	edx, DWORD PTR _y1$[ebp]
	push	esi
	mov	esi, ecx
	fstp	DWORD PTR _p1$[ebp]
	fild	DWORD PTR _y1$[ebp]
	mov	ecx, DWORD PTR _x2$[ebp]
	push	16777215				; 00ffffffH
	push	eax
	mov	eax, DWORD PTR _x1$[ebp]
	fstp	DWORD PTR _p1$[ebp+4]
	fild	DWORD PTR _x2$[ebp]
	push	ecx
	push	edx
	push	eax
	mov	DWORD PTR _p1$[ebp+8], 0
	fstp	DWORD PTR _p2$[ebp]
	fild	DWORD PTR _y2$[ebp]
	mov	DWORD PTR _p2$[ebp+8], 0
	fstp	DWORD PTR _p2$[ebp+4]
	call	?DrawLine@@YAHHHHHH@Z			; DrawLine
	add	esp, 20					; 00000014H

; 454  : 
; 455  :   mHitCount = 0;
; 456  : 
; 457  :   mFactory->RayTrace(p1,p2,this);

	lea	ecx, DWORD PTR _p2$[ebp]
	lea	edx, DWORD PTR _p1$[ebp]
	mov	DWORD PTR [esi+8], 0
	push	esi
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	push	edx
	call	?RayTrace@SpherePackFactory@@QAEXABV?$Vector3d@M@@0PAVSpherePackCallback@@@Z ; SpherePackFactory::RayTrace

; 458  : 
; 459  :   PrintText(0,24,0xFFFFFF,"%d Spheres Intersected Ray.",mHitCount);

	mov	eax, DWORD PTR [esi+8]
	push	eax
	push	OFFSET FLAT:$SG13136
	push	16777215				; 00ffffffH
	push	24					; 00000018H
	push	0
	call	?PrintText@@YAHHHHPADZZ			; PrintText
	add	esp, 20					; 00000014H
	pop	esi

; 460  : 
; 461  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?RayTest@CircleFactory@@AAEXHHHH@Z ENDP			; CircleFactory::RayTest
_sect$ = 20
_sphere$ = 24
?RayTraceCallback@CircleFactory@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z PROC NEAR ; CircleFactory::RayTraceCallback

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 470  :   const Vector3d<float> pos = sphere->GetPos();

	mov	eax, DWORD PTR _sphere$[ebp]
	push	ebx
	mov	ebx, ecx
	push	esi
	fld	DWORD PTR [eax]
	fld	DWORD PTR [eax+4]

; 471  : 
; 472  :   float radius = sphere->GetRadius();
; 473  : 
; 474  :   DrawCircle( int(pos.x), int(pos.y), int(radius), 0x00FF00);

	fld	DWORD PTR [eax+12]
	fistp	QWORD PTR -8+[ebp]
	mov	eax, DWORD PTR -8+[ebp]
	push	edi
	push	65280					; 0000ff00H
	push	eax
	fistp	QWORD PTR -8+[ebp]
	mov	ecx, DWORD PTR -8+[ebp]
	push	ecx
	fistp	QWORD PTR -8+[ebp]
	mov	edx, DWORD PTR -8+[ebp]
	push	edx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle

; 475  : 
; 476  :   int sx = int(sect.x);

	mov	eax, DWORD PTR _sect$[ebp]

; 477  :   int sy = int(sect.y);
; 478  : 
; 479  :   DrawLine(sx-10,sy,sx+10,sy,0x0000FF);

	push	255					; 000000ffH
	fld	DWORD PTR [eax]
	fistp	QWORD PTR -8+[ebp]
	mov	esi, DWORD PTR -8+[ebp]
	lea	ecx, DWORD PTR [esi-10]
	fld	DWORD PTR [eax+4]
	fistp	QWORD PTR -8+[ebp]
	mov	edi, DWORD PTR -8+[ebp]
	lea	eax, DWORD PTR [esi+10]
	push	edi
	push	eax
	push	edi
	push	ecx
	call	?DrawLine@@YAHHHHHH@Z			; DrawLine

; 480  :   DrawLine(sx,sy-10,sx,sy+10,0x0000FF);

	lea	edx, DWORD PTR [edi+10]
	push	255					; 000000ffH
	push	edx
	add	edi, -10				; fffffff6H
	push	esi
	push	edi
	push	esi
	call	?DrawLine@@YAHHHHHH@Z			; DrawLine

; 481  : 
; 482  :   mHitCount++;

	mov	eax, DWORD PTR [ebx+8]
	add	esp, 56					; 00000038H
	inc	eax
	pop	edi
	mov	DWORD PTR [ebx+8], eax
	pop	esi
	pop	ebx

; 483  : 
; 484  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?RayTraceCallback@CircleFactory@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z ENDP ; CircleFactory::RayTraceCallback
_TEXT	ENDS
PUBLIC	?RangeTest@CircleFactory@@AAEXHHH@Z		; CircleFactory::RangeTest
_TEXT	SEGMENT
_x1$ = 8
_y1$ = 12
_distance$ = 16
_p$ = -12
?RangeTest@CircleFactory@@AAEXHHH@Z PROC NEAR		; CircleFactory::RangeTest

; 488  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 489  :   DrawCircle(x1,y1,distance,  0x00FF);

	mov	eax, DWORD PTR _x1$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _y1$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _distance$[ebp]
	push	255					; 000000ffH
	push	edi
	push	ebx
	mov	esi, ecx
	push	eax
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle

; 490  :   DrawCircle(x1,y1,distance+2,0x00FF);

	mov	edx, DWORD PTR _x1$[ebp]
	lea	ecx, DWORD PTR [edi+2]
	push	255					; 000000ffH
	push	ecx
	push	ebx
	push	edx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle

; 491  :   DrawCircle(x1,y1,distance+4,0x00FF);

	mov	ecx, DWORD PTR _x1$[ebp]
	lea	eax, DWORD PTR [edi+4]
	push	255					; 000000ffH
	push	eax
	push	ebx
	push	ecx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle

; 492  :   DrawCircle(x1,y1,distance+6,0x00FF);

	mov	edx, DWORD PTR _x1$[ebp]
	add	edi, 6
	push	255					; 000000ffH
	push	edi
	push	ebx
	push	edx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle

; 493  : 
; 494  :   mHitCount = 0;
; 495  : 
; 496  :   Vector3d<float> p(x1,y1,0);

	fild	DWORD PTR _x1$[ebp]
	add	esp, 64					; 00000040H

; 497  : 
; 498  :   mFactory->RangeTest(p,distance,this);

	lea	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR _p$[ebp+8], 0
	fstp	DWORD PTR _p$[ebp]
	fild	DWORD PTR _y1$[ebp]
	push	esi
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	fstp	DWORD PTR _p$[ebp+4]
	fild	DWORD PTR _distance$[ebp]
	fstp	DWORD PTR [esp]
	push	eax
	call	?RangeTest@SpherePackFactory@@QAEXABV?$Vector3d@M@@MPAVSpherePackCallback@@@Z ; SpherePackFactory::RangeTest

; 499  : 
; 500  :   PrintText(0,24,0xFFFFFF,"%d Spheres Inside Range.",mHitCount);

	mov	ecx, DWORD PTR [esi+8]
	push	ecx
	push	OFFSET FLAT:$SG13156
	push	16777215				; 00ffffffH
	push	24					; 00000018H
	push	0
	call	?PrintText@@YAHHHHPADZZ			; PrintText
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 501  : 
; 502  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?RangeTest@CircleFactory@@AAEXHHH@Z ENDP		; CircleFactory::RangeTest
_sphere$ = 16
?RangeTestCallback@CircleFactory@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z PROC NEAR ; CircleFactory::RangeTestCallback

; 505  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 506  :   const Vector3d<float> pos = sphere->GetPos();

	mov	eax, DWORD PTR _sphere$[ebp]
	push	esi
	mov	esi, ecx

; 507  : 
; 508  :   float radius = sphere->GetRadius();
; 509  : 
; 510  :   DrawCircle( int(pos.x), int(pos.y), int(radius), 0x00FF00);

	push	65280					; 0000ff00H
	fld	DWORD PTR [eax]
	fld	DWORD PTR [eax+4]
	fld	DWORD PTR [eax+12]
	fistp	QWORD PTR -8+[ebp]
	mov	eax, DWORD PTR -8+[ebp]
	push	eax
	fistp	QWORD PTR -8+[ebp]
	mov	ecx, DWORD PTR -8+[ebp]
	push	ecx
	fistp	QWORD PTR -8+[ebp]
	mov	edx, DWORD PTR -8+[ebp]
	push	edx
	call	?DrawCircle@@YAHHHHH@Z			; DrawCircle

; 511  : 
; 512  : 
; 513  :   mHitCount++;

	mov	eax, DWORD PTR [esi+8]
	add	esp, 16					; 00000010H
	inc	eax
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 514  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?RangeTestCallback@CircleFactory@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; CircleFactory::RangeTestCallback
_TEXT	ENDS
PUBLIC	?FrustumTest@CircleFactory@@AAEXABVFrustum@@@Z	; CircleFactory::FrustumTest
_TEXT	SEGMENT
_f$ = 8
?FrustumTest@CircleFactory@@AAEXABVFrustum@@@Z PROC NEAR ; CircleFactory::FrustumTest

; 518  : {

	push	ebp
	mov	ebp, esp

; 519  :   mFactory->FrustumTest(f,this);

	mov	eax, DWORD PTR _f$[ebp]
	push	ecx
	mov	ecx, DWORD PTR [ecx+16]
	push	eax
	call	?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z ; SpherePackFactory::FrustumTest

; 520  : }

	pop	ebp
	ret	4
?FrustumTest@CircleFactory@@AAEXABVFrustum@@@Z ENDP	; CircleFactory::FrustumTest
_sphere$ = 12
_state$ = 16
?VisibilityCallback@CircleFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC NEAR ; CircleFactory::VisibilityCallback

; 524  : {

	push	ebp
	mov	ebp, esp

; 525  :   Circle *circle = (Circle *) sphere->GetUserData();

	mov	eax, DWORD PTR _sphere$[ebp]
	push	esi
	mov	esi, DWORD PTR [eax+64]

; 526  : 
; 527  :   if ( state == VS_OUTSIDE ) // it is not visible!

	mov	eax, DWORD PTR _state$[ebp]
	cmp	eax, 2
	jne	SHORT $L13178

; 528  :   {
; 529  :     CircleItem *item = circle->GetCircleItem();

	mov	eax, DWORD PTR [esi+32]

; 530  : 
; 531  :     if ( item )

	test	eax, eax
	je	$L15421

; 532  :     {
; 533  :       circle->SetCircleItem(0);

	mov	DWORD PTR [esi+32], 0

; 534  :       mVisible.Release(item);

	mov	edx, DWORD PTR [ecx+344]
	cmp	eax, edx
	jne	SHORT $L15350
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+344], edx
$L15350:
	mov	esi, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	test	esi, esi
	je	SHORT $L15352
	test	edx, edx
	mov	DWORD PTR [esi], edx
	je	SHORT $L15372
	mov	DWORD PTR [edx+4], esi
	jmp	SHORT $L15372
$L15352:
	test	edx, edx
	mov	DWORD PTR [ecx+352], edx
	je	SHORT $L15372
	mov	DWORD PTR [edx+4], 0
$L15372:
	mov	edx, DWORD PTR [ecx+356]
	mov	DWORD PTR [ecx+356], eax
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+360]
	mov	eax, DWORD PTR [ecx+364]
	dec	edx
	inc	eax
	mov	DWORD PTR [ecx+360], edx
	mov	DWORD PTR [ecx+364], eax
	pop	esi

; 552  :       }
; 553  : 
; 554  :     }
; 555  :   }
; 556  : }

	pop	ebp
	ret	12					; 0000000cH
$L13178:

; 535  :     }
; 536  :   }
; 537  :   else
; 538  :   {
; 539  :     circle->SetViewState(state);

	mov	DWORD PTR [esi+36], eax

; 540  : 
; 541  :     CircleItem *item = circle->GetCircleItem();
; 542  : 
; 543  :     if ( !item )

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	jne	SHORT $L15421

; 544  :     {
; 545  : 
; 546  :       item = mVisible.GetFreeLink();

	mov	eax, DWORD PTR [ecx+356]
	test	eax, eax
	je	SHORT $L15421
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+356], edx
	mov	edx, DWORD PTR [ecx+352]
	test	edx, edx
	mov	DWORD PTR [ecx+352], eax
	je	SHORT $L15405
	mov	DWORD PTR [edx+4], eax
$L15405:
	push	ebx
	mov	ebx, DWORD PTR [ecx+352]
	mov	DWORD PTR [ebx], edx
	mov	edx, DWORD PTR [ecx+352]
	mov	DWORD PTR [edx+4], 0
	mov	ebx, DWORD PTR [ecx+360]
	mov	edx, DWORD PTR [ecx+364]
	inc	ebx
	dec	edx
	mov	DWORD PTR [ecx+360], ebx

; 547  : 
; 548  :       if ( item )

	test	eax, eax
	mov	DWORD PTR [ecx+364], edx
	pop	ebx
	je	SHORT $L15421

; 549  :       {
; 550  :         circle->SetCircleItem(item);

	mov	DWORD PTR [esi+32], eax

; 551  :         item->SetCircle(circle);

	mov	DWORD PTR [eax+8], esi
$L15421:
	pop	esi

; 552  :       }
; 553  : 
; 554  :     }
; 555  :   }
; 556  : }

	pop	ebp
	ret	12					; 0000000cH
?VisibilityCallback@CircleFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; CircleFactory::VisibilityCallback
_TEXT	ENDS
;	COMDAT ?Distance2@?$Vector3d@M@@QBEMABV1@@Z
_TEXT	SEGMENT
_a$ = 8
?Distance2@?$Vector3d@M@@QBEMABV1@@Z PROC NEAR		; Vector3d<float>::Distance2, COMDAT

; 167  :   {

	push	ebp
	mov	ebp, esp

; 168  :     float dx = a.x - x;

	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]

; 169  :     float dy = a.y - y;

	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]

; 170  :     float dz = a.z - z;

	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]

; 171  :     return dx*dx + dy*dy + dz*dz;

	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fstp	ST(3)
	fstp	ST(0)
	fstp	ST(0)

; 172  :   };

	pop	ebp
	ret	4
?Distance2@?$Vector3d@M@@QBEMABV1@@Z ENDP		; Vector3d<float>::Distance2
_TEXT	ENDS
;	COMDAT ??1?$Pool@VCircleItem@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Pool@VCircleItem@@@@QAE@XZ PROC NEAR		; Pool<CircleItem>::~Pool<CircleItem>, COMDAT

; 37   :     delete mData;

	mov	eax, DWORD PTR [ecx+8]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 38   :   };

	ret	0
??1?$Pool@VCircleItem@@@@QAE@XZ ENDP			; Pool<CircleItem>::~Pool<CircleItem>
_TEXT	ENDS
PUBLIC	?id@?$ctype@G@std@@$E				; std::ctype<unsigned short>::id
EXTRN	_atexit:NEAR
_DATA	SEGMENT
COMM	??_B?1???id@?$ctype@G@std@@$D@@9@51:BYTE							; std::ctype<unsigned short>::d::`local static guard'
_DATA	ENDS
_TEXT	SEGMENT
_$E31	PROC NEAR
	mov	cl, BYTE PTR ??_B?1???id@?$ctype@G@std@@$D@@9@51 ; std::ctype<unsigned short>::d::`local static guard'
	mov	al, 1
	test	cl, al
	jne	SHORT $L15432
	or	cl, al
	mov	BYTE PTR ??_B?1???id@?$ctype@G@std@@$D@@9@51, cl ; std::ctype<unsigned short>::d::`local static guard'
$L15432:
	push	OFFSET FLAT:?id@?$ctype@G@std@@$E	; std::ctype<unsigned short>::id
	call	_atexit
	pop	ecx
	ret	0
_$E31	ENDP
_TEXT	ENDS
;	COMDAT ?id@?$ctype@G@std@@$E
_TEXT	SEGMENT
?id@?$ctype@G@std@@$E PROC NEAR				; std::ctype<unsigned short>::id, COMDAT
	ret	0
?id@?$ctype@G@std@@$E ENDP				; std::ctype<unsigned short>::id
_TEXT	ENDS
EXTRN	??0Init@ios_base@std@@QAE@XZ:NEAR		; std::ios_base::Init::Init
_BSS	SEGMENT
__Ios_init DB	01H DUP (?)
_BSS	ENDS
_TEXT	SEGMENT
_$E17	PROC NEAR
	mov	ecx, OFFSET FLAT:__Ios_init
	call	??0Init@ios_base@std@@QAE@XZ		; std::ios_base::Init::Init
	push	OFFSET FLAT:_$E15
	call	_atexit
	pop	ecx
	ret	0
_$E17	ENDP
_TEXT	ENDS
EXTRN	??1Init@ios_base@std@@QAE@XZ:NEAR		; std::ios_base::Init::~Init
_TEXT	SEGMENT
_$E15	PROC NEAR
	mov	ecx, OFFSET FLAT:__Ios_init
	jmp	??1Init@ios_base@std@@QAE@XZ		; std::ios_base::Init::~Init
_$E15	ENDP
_TEXT	ENDS
EXTRN	??0_Winit@std@@QAE@XZ:NEAR			; std::_Winit::_Winit
_BSS	SEGMENT
	ALIGN	4

__Wios_init DB	01H DUP (?)
_BSS	ENDS
_TEXT	SEGMENT
_$E23	PROC NEAR
	mov	ecx, OFFSET FLAT:__Wios_init
	call	??0_Winit@std@@QAE@XZ			; std::_Winit::_Winit
	push	OFFSET FLAT:_$E21
	call	_atexit
	pop	ecx
	ret	0
_$E23	ENDP
_TEXT	ENDS
EXTRN	??1_Winit@std@@QAE@XZ:NEAR			; std::_Winit::~_Winit
_TEXT	SEGMENT
_$E21	PROC NEAR
	mov	ecx, OFFSET FLAT:__Wios_init
	jmp	??1_Winit@std@@QAE@XZ			; std::_Winit::~_Winit
_$E21	ENDP
_TEXT	ENDS
;	COMDAT ?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC NEAR ; SpherePackCallback::VisibilityCallback, COMDAT

; 59   :   {};

	ret	12					; 0000000cH
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::VisibilityCallback
_TEXT	ENDS
;	COMDAT ?RayTraceCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
?RayTraceCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z PROC NEAR ; SpherePackCallback::RayTraceCallback, COMDAT

; 66   :   {};

	ret	20					; 00000014H
?RayTraceCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@0M0PAVSpherePack@@@Z ENDP ; SpherePackCallback::RayTraceCallback
_TEXT	ENDS
;	COMDAT ?RangeTestCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
?RangeTestCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z PROC NEAR ; SpherePackCallback::RangeTestCallback, COMDAT

; 72   :   {};

	ret	16					; 00000010H
?RangeTestCallback@SpherePackCallback@@UAEXABV?$Vector3d@M@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::RangeTestCallback
_TEXT	ENDS
END
